<?xml version="1.0" encoding="UTF-8" ?>
<project name="synapseDB" id="Project_1e07ec1" template="Default" database="PostgreSQL" >
	<schema name="public" catalogname="postgres" schemaname="public" >
		<table name="alembic_version" >
			<column name="version_num" type="varchar" length="32" decimal="0" jt="12" mandatory="y" />
			<index name="alembic_version_pkc" unique="PRIMARY_KEY" >
				<column name="version_num" />
			</index>
		</table>
		<table name="bioobject" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" autoincrement="y" />
			<column name="object_collection_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="type" type="varchar" length="32" decimal="0" jt="12" />
			<column name="oid" type="varchar" length="50" decimal="0" jt="12" />
			<column name="areas" type="geometry" decimal="0" jt="1111" />
			<index name="bioobject_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="bioobject_object_collection_id" unique="NORMAL" >
				<column name="object_collection_id" />
			</index>
			<index name="synapse_areas_gix" unique="NORMAL" >
				<column name="areas" />
			</index>
			<fk name="bioobject_object_collection_id_fkey" to_schema="public" to_table="bioobjectcollection" >
				<fk_column name="object_collection_id" pk="id" />
			</fk>
		</table>
		<table name="bioobjectcollection" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" autoincrement="y" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" mandatory="y" />
			<column name="volume_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="type" type="varchar" length="32" decimal="0" jt="12" />
			<column name="synapse_collection_type" type="varchar" length="100" decimal="0" jt="12" />
			<column name="link_id" type="integer" length="10" decimal="0" jt="4" />
			<index name="bioobjectcollection_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<fk name="bioobjectcollection_volume_id_fkey" to_schema="public" to_table="volume" >
				<fk_column name="volume_id" pk="id" />
			</fk>
			<fk name="bioobjectcollection_link_id_fkey" to_schema="public" to_table="link" >
				<fk_column name="link_id" pk="id" />
			</fk>
		</table>
		<table name="classificationtype" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" autoincrement="y" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" mandatory="y" />
			<column name="rating_type" type="varchar" length="40" decimal="0" jt="12" />
			<index name="classificationtype_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="data_set" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" autoincrement="y" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" mandatory="y" />
			<column name="render_project" type="varchar" length="50" decimal="0" jt="12" />
			<column name="render_owner" type="varchar" length="50" decimal="0" jt="12" />
			<index name="data_set_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="link" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" autoincrement="y" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" mandatory="y" />
			<column name="type" type="varchar" length="32" decimal="0" jt="12" />
			<column name="link" type="varchar" length="10000" decimal="0" jt="12" />
			<column name="volume_id" type="integer" length="10" decimal="0" jt="4" />
			<index name="link_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<fk name="link_volume_id_fkey" to_schema="public" to_table="volume" >
				<fk_column name="volume_id" pk="id" />
			</fk>
		</table>
		<table name="rating" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" autoincrement="y" />
			<column name="created" type="timestamp" length="29" decimal="6" jt="93" mandatory="y" />
			<column name="updated" type="timestamp" length="29" decimal="6" jt="93" />
			<column name="type" type="varchar" length="32" decimal="0" jt="12" />
			<column name="object_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="rating_source_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="classificationtype_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="confidence" type="float8" length="17" decimal="17" jt="6" />
			<column name="bool_rating" type="bool" length="1" decimal="0" jt="-7" />
			<column name="tert_rating" type="integer" length="10" decimal="0" jt="4" />
			<index name="rating_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<fk name="rating_object_id_fkey" to_schema="public" to_table="bioobject" >
				<fk_column name="object_id" pk="id" />
			</fk>
			<fk name="rating_classificationtype_id_fkey" to_schema="public" to_table="classificationtype" >
				<fk_column name="classificationtype_id" pk="id" />
			</fk>
			<fk name="rating_rating_source_id_fkey" to_schema="public" to_table="ratingsource" >
				<fk_column name="rating_source_id" pk="id" />
			</fk>
		</table>
		<table name="ratingsource" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" autoincrement="y" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" mandatory="y" />
			<column name="type" type="varchar" length="32" decimal="0" jt="12" />
			<column name="rating_sources" type="integer[]" length="10" decimal="0" jt="2003" />
			<column name="algorithm" type="varchar" length="100" decimal="0" jt="12" />
			<column name="user_id" type="integer" length="10" decimal="0" jt="4" />
			<index name="ratingsource_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="sourcechannel" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" autoincrement="y" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" mandatory="y" />
			<column name="volume_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="source_url" type="varchar" length="250" decimal="0" jt="12" mandatory="y" />
			<column name="default_channel" type="bool" length="1" decimal="0" jt="-7" mandatory="y" />
			<column name="type" type="varchar" length="32" decimal="0" jt="12" />
			<column name="default_color" type="varchar" length="1" decimal="0" jt="12" />
			<index name="sourcechannel_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<fk name="sourcechannel_volume_id_fkey" to_schema="public" to_table="volume" >
				<fk_column name="volume_id" pk="id" />
			</fk>
		</table>
		<table name="spatial_ref_sys" >
			<column name="srid" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="auth_name" type="varchar" length="256" decimal="0" jt="12" />
			<column name="auth_srid" type="integer" length="10" decimal="0" jt="4" />
			<column name="srtext" type="varchar" length="2048" decimal="0" jt="12" />
			<column name="proj4text" type="varchar" length="2048" decimal="0" jt="12" />
			<index name="spatial_ref_sys_pkey" unique="PRIMARY_KEY" >
				<column name="srid" />
			</index>
			<constraint name="spatial_ref_sys_srid_check" >
				<string>(srid &gt; 0) AND (srid &lt;= 998999)</string>
			</constraint>
		</table>
		<table name="volume" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" autoincrement="y" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" mandatory="y" />
			<column name="dataset_id" type="integer" length="10" decimal="0" jt="4" />
			<index name="volume_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<fk name="volume_dataset_id_fkey" to_schema="public" to_table="data_set" >
				<fk_column name="dataset_id" pk="id" />
			</fk>
		</table>
		<view name="geography_columns" >
			<view_script><![CDATA[ SELECT current_database() AS f_table_catalog,
    n.nspname AS f_table_schema,
    c.relname AS f_table_name,
    a.attname AS f_geography_column,
    postgis_typmod_dims(a.atttypmod) AS coord_dimension,
    postgis_typmod_srid(a.atttypmod) AS srid,
    postgis_typmod_type(a.atttypmod) AS type
   FROM pg_class c,
    pg_attribute a,
    pg_type t,
    pg_namespace n
  WHERE ((t.typname = 'geography'::name) AND (a.attisdropped = false) AND (a.atttypid = t.oid) AND (a.attrelid = c.oid) AND (c.relnamespace = n.oid) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'm'::"char", 'f'::"char", 'p'::"char"])) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));]]></view_script>
			<column name="f_table_catalog" type="name" />
			<column name="f_table_schema" type="name" />
			<column name="f_table_name" type="name" />
			<column name="f_geography_column" type="name" />
			<column name="coord_dimension" type="integer" />
			<column name="srid" type="integer" />
			<column name="type" type="text" />
		</view>
		<view name="geometry_columns" >
			<view_script><![CDATA[ SELECT (current_database())::character varying(256) AS f_table_catalog,
    n.nspname AS f_table_schema,
    c.relname AS f_table_name,
    a.attname AS f_geometry_column,
    COALESCE(postgis_typmod_dims(a.atttypmod), sn.ndims, 2) AS coord_dimension,
    COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), sr.srid, 0) AS srid,
    (replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), st.type, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text))::character varying(30) AS type
   FROM ((((((pg_class c
     JOIN pg_attribute a ON (((a.attrelid = c.oid) AND (NOT a.attisdropped))))
     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))
     JOIN pg_type t ON ((a.atttypid = t.oid)))
     LEFT JOIN ( SELECT s.connamespace,
            s.conrelid,
            s.conkey,
            replace(split_part(s.consrc, ''''::text, 2), ')'::text, ''::text) AS type
           FROM pg_constraint s
          WHERE (s.consrc ~~* '%geometrytype(% = %'::text)) st ON (((st.connamespace = n.oid) AND (st.conrelid = c.oid) AND (a.attnum = ANY (st.conkey)))))
     LEFT JOIN ( SELECT s.connamespace,
            s.conrelid,
            s.conkey,
            (replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text))::integer AS ndims
           FROM pg_constraint s
          WHERE (s.consrc ~~* '%ndims(% = %'::text)) sn ON (((sn.connamespace = n.oid) AND (sn.conrelid = c.oid) AND (a.attnum = ANY (sn.conkey)))))
     LEFT JOIN ( SELECT s.connamespace,
            s.conrelid,
            s.conkey,
            (replace(replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text), '('::text, ''::text))::integer AS srid
           FROM pg_constraint s
          WHERE (s.consrc ~~* '%srid(% = %'::text)) sr ON (((sr.connamespace = n.oid) AND (sr.conrelid = c.oid) AND (a.attnum = ANY (sr.conkey)))))
  WHERE ((c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'm'::"char", 'f'::"char", 'p'::"char"])) AND (NOT (c.relname = 'raster_columns'::name)) AND (t.typname = 'geometry'::name) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));]]></view_script>
			<column name="f_table_catalog" type="varchar" />
			<column name="f_table_schema" type="name" />
			<column name="f_table_name" type="name" />
			<column name="f_geometry_column" type="name" />
			<column name="coord_dimension" type="integer" />
			<column name="srid" type="integer" />
			<column name="type" type="varchar" />
		</view>
		<view name="raster_columns" >
			<view_script><![CDATA[ SELECT current_database() AS r_table_catalog,
    n.nspname AS r_table_schema,
    c.relname AS r_table_name,
    a.attname AS r_raster_column,
    COALESCE(_raster_constraint_info_srid(n.nspname, c.relname, a.attname), ( SELECT st_srid('010100000000000000000000000000000000000000'::geometry) AS st_srid)) AS srid,
    _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'x'::bpchar) AS scale_x,
    _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'y'::bpchar) AS scale_y,
    _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'width'::text) AS blocksize_x,
    _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'height'::text) AS blocksize_y,
    COALESCE(_raster_constraint_info_alignment(n.nspname, c.relname, a.attname), false) AS same_alignment,
    COALESCE(_raster_constraint_info_regular_blocking(n.nspname, c.relname, a.attname), false) AS regular_blocking,
    _raster_constraint_info_num_bands(n.nspname, c.relname, a.attname) AS num_bands,
    _raster_constraint_info_pixel_types(n.nspname, c.relname, a.attname) AS pixel_types,
    _raster_constraint_info_nodata_values(n.nspname, c.relname, a.attname) AS nodata_values,
    _raster_constraint_info_out_db(n.nspname, c.relname, a.attname) AS out_db,
    _raster_constraint_info_extent(n.nspname, c.relname, a.attname) AS extent,
    COALESCE(_raster_constraint_info_index(n.nspname, c.relname, a.attname), false) AS spatial_index
   FROM pg_class c,
    pg_attribute a,
    pg_type t,
    pg_namespace n
  WHERE ((t.typname = 'raster'::name) AND (a.attisdropped = false) AND (a.atttypid = t.oid) AND (a.attrelid = c.oid) AND (c.relnamespace = n.oid) AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'm'::"char", 'f'::"char", 'p'::"char"])) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));]]></view_script>
			<column name="r_table_catalog" type="name" />
			<column name="r_table_schema" type="name" />
			<column name="r_table_name" type="name" />
			<column name="r_raster_column" type="name" />
			<column name="srid" type="integer" />
			<column name="scale_x" type="float8" />
			<column name="scale_y" type="float8" />
			<column name="blocksize_x" type="integer" />
			<column name="blocksize_y" type="integer" />
			<column name="same_alignment" type="bool" />
			<column name="regular_blocking" type="bool" />
			<column name="num_bands" type="integer" />
			<column name="pixel_types" type="_text" />
			<column name="nodata_values" type="_float8" />
			<column name="out_db" type="_bool" />
			<column name="extent" type="geometry" />
			<column name="spatial_index" type="bool" />
		</view>
		<view name="raster_overviews" >
			<view_script><![CDATA[ SELECT current_database() AS o_table_catalog,
    n.nspname AS o_table_schema,
    c.relname AS o_table_name,
    a.attname AS o_raster_column,
    current_database() AS r_table_catalog,
    (split_part(split_part(s.consrc, '''::name'::text, 1), ''''::text, 2))::name AS r_table_schema,
    (split_part(split_part(s.consrc, '''::name'::text, 2), ''''::text, 2))::name AS r_table_name,
    (split_part(split_part(s.consrc, '''::name'::text, 3), ''''::text, 2))::name AS r_raster_column,
    (btrim(split_part(s.consrc, ','::text, 2)))::integer AS overview_factor
   FROM pg_class c,
    pg_attribute a,
    pg_type t,
    pg_namespace n,
    pg_constraint s
  WHERE ((t.typname = 'raster'::name) AND (a.attisdropped = false) AND (a.atttypid = t.oid) AND (a.attrelid = c.oid) AND (c.relnamespace = n.oid) AND ((c.relkind)::text = ANY ((ARRAY['r'::character(1), 'v'::character(1), 'm'::character(1), 'f'::character(1)])::text[])) AND (s.connamespace = n.oid) AND (s.conrelid = c.oid) AND (s.consrc ~~ '%_overview_constraint(%'::text) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));]]></view_script>
			<column name="o_table_catalog" type="name" />
			<column name="o_table_schema" type="name" />
			<column name="o_table_name" type="name" />
			<column name="o_raster_column" type="name" />
			<column name="r_table_catalog" type="name" />
			<column name="r_table_schema" type="name" />
			<column name="r_table_name" type="name" />
			<column name="r_raster_column" type="name" />
			<column name="overview_factor" type="integer" />
		</view>
		<sequence name="bioobject_id_seq" start="1" />
		<sequence name="bioobjectcollection_id_seq" start="1" />
		<sequence name="classificationtype_id_seq" start="1" />
		<sequence name="data_set_id_seq" start="1" />
		<sequence name="link_id_seq" start="1" />
		<sequence name="rating_id_seq" start="1" />
		<sequence name="ratingsource_id_seq" start="1" />
		<sequence name="sourcechannel_id_seq" start="1" />
		<sequence name="volume_id_seq" start="1" />
		<procedure name="__st_countagg_transfn" id="Procedure_3e7505e" isSystem="false" params_known="y" >
			<string><![CDATA[create function __st_countagg_transfn 
 DECLARE
  _count bigint;
  rtn_agg agg_count;
 BEGIN
  -- only process parameter args once
  IF agg IS NULL THEN
   rtn_agg.count := 0;
   IF nband < 1 THEN
    RAISE EXCEPTION 'Band index must be greater than zero (1-based)';
   ELSE
    rtn_agg.nband := nband;
   END IF;
   IF exclude_nodata_value IS FALSE THEN
    rtn_agg.exclude_nodata_value := FALSE;
   ELSE
    rtn_agg.exclude_nodata_value := TRUE;
   END IF;
   IF sample_percent < 0. OR sample_percent > 1. THEN
    RAISE EXCEPTION 'Sample percent must be between zero and one';
   ELSE
    rtn_agg.sample_percent := sample_percent;
   END IF;
  ELSE
   rtn_agg := agg;
  END IF;
  IF rast IS NOT NULL THEN
   IF rtn_agg.exclude_nodata_value IS FALSE THEN
    SELECT width * height INTO _count FROM public.ST_Metadata(rast);
   ELSE
    SELECT count INTO _count FROM public._ST_summarystats(
     rast,
      rtn_agg.nband, rtn_agg.exclude_nodata_value,
     rtn_agg.sample_percent
    );
   END IF;
  END IF;
  rtn_agg.count := rtn_agg.count + _count;
  RETURN rtn_agg;
 END;
 ]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="agg" jt="2002" type="agg_count" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
		</procedure>
		<procedure name="_add_overview_constraint" id="Procedure_4cb006" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_overview_constraint 
 DECLARE
  fqtn text;
  cn name;
  sql text;
 BEGIN
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  cn := 'enforce_overview_' || $3;
  sql := 'ALTER TABLE ' || fqtn
   || ' ADD CONSTRAINT ' || quote_ident(cn)
   || ' CHECK ( public._overview_constraint(' || quote_ident($3)
   || ',' || $7
   || ',' || quote_literal($4)
   || ',' || quote_literal($5)
   || ',' || quote_literal($6)
   || '))';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="ovschema" jt="12" type="name" />
			<input_param name="ovtable" jt="12" type="name" />
			<input_param name="ovcolumn" jt="12" type="name" />
			<input_param name="refschema" jt="12" type="name" />
			<input_param name="reftable" jt="12" type="name" />
			<input_param name="refcolumn" jt="12" type="name" />
			<input_param name="factor" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint" id="Procedure_14cb31e" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint 
 BEGIN
  BEGIN
   EXECUTE sql;
  EXCEPTION
   WHEN duplicate_object THEN
    RAISE NOTICE 'The constraint "%" already exists.  To replace the existing constraint, delete the constraint and call ApplyRasterConstraints again', cn;
   WHEN OTHERS THEN
    RAISE NOTICE 'Unable to add constraint: %', cn;
    RAISE NOTICE 'SQL used for failed constraint: %', sql;
    RAISE NOTICE 'Returned error message: % (%)', SQLERRM, SQLSTATE;
    RETURN FALSE;
  END;
  RETURN TRUE;
 END;
 ]]></string>
			<input_param name="cn" jt="12" type="name" />
			<input_param name="sql" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint_alignment" id="Procedure_476c40b" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint_alignment 
 DECLARE
  fqtn text;
  cn name;
  sql text;
  attr text;
 BEGIN
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  cn := 'enforce_same_alignment_' || $3;
  sql := 'SELECT public.st_makeemptyraster(1, 1, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid) FROM public.st_metadata((SELECT '
   || quote_ident($3)
   || ' FROM ' || fqtn || ' LIMIT 1))';
  BEGIN
   EXECUTE sql INTO attr;
  EXCEPTION WHEN OTHERS THEN
   RAISE NOTICE 'Unable to get the alignment of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
   RETURN FALSE;
  END;
  sql := 'ALTER TABLE ' || fqtn ||
   ' ADD CONSTRAINT ' || quote_ident(cn) ||
   ' CHECK (st_samealignment(' || quote_ident($3) || ', ''' || attr || '''::raster))';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint_blocksize" id="Procedure_3554a8f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint_blocksize 
 DECLARE
  fqtn text;
  cn name;
  sql text;
  attrset integer[];
  attr integer;
 BEGIN
  IF lower($4) != 'width' AND lower($4) != 'height' THEN
   RAISE EXCEPTION 'axis must be either "width" or "height"';
   RETURN FALSE;
  END IF;
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  cn := 'enforce_' || $4 || '_' || $3;
  sql := 'SELECT st_' || $4 || '('
   || quote_ident($3)
   || ') FROM ' || fqtn
   || ' GROUP BY 1 ORDER BY count(*) DESC';
  BEGIN
   attrset := ARRAY[]::integer[];
   FOR attr IN EXECUTE sql LOOP
    attrset := attrset || attr;
   END LOOP;
  EXCEPTION WHEN OTHERS THEN
   RAISE NOTICE 'Unable to get the % of a sample raster: % (%)',
        $4, SQLERRM, SQLSTATE;
   RETURN FALSE;
  END;
  sql := 'ALTER TABLE ' || fqtn
   || ' ADD CONSTRAINT ' || quote_ident(cn)
   || ' CHECK (st_' || $4 || '('
   || quote_ident($3)
   || ') IN (' || array_to_string(attrset, ',') || '))';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="axis" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint_coverage_tile" id="Procedure_2909ecd" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint_coverage_tile 
 DECLARE
  fqtn text;
  cn name;
  sql text;
  _scalex double precision;
  _scaley double precision;
  _skewx double precision;
  _skewy double precision;
  _tilewidth integer;
  _tileheight integer;
  _alignment boolean;
  _covextent geometry;
  _covrast raster;
 BEGIN
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  cn := 'enforce_coverage_tile_' || $3;
  -- metadata
  BEGIN
   sql := 'WITH foo AS (SELECT public.ST_Metadata(' || quote_ident($3) || ') AS meta, public.ST_ConvexHull(' || quote_ident($3) || ') AS hull FROM ' || fqtn || ') SELECT max((meta).scalex), max((meta).scaley), max((meta).skewx), max((meta).skewy), max((meta).width), max((meta).height), public.ST_Union(hull) FROM foo';
   EXECUTE sql INTO _scalex, _scaley, _skewx, _skewy, _tilewidth, _tileheight, _covextent;
  EXCEPTION WHEN OTHERS THEN
   RAISE DEBUG 'Unable to get coverage metadata for %.%: % (%)',
        fqtn, quote_ident($3), SQLERRM, SQLSTATE;
      -- TODO: Why not return false here ?
  END;
  -- rasterize extent
  BEGIN
   _covrast := public.ST_AsRaster(_covextent, _scalex, _scaley, '8BUI', 1, 0, NULL, NULL, _skewx, _skewy);
   IF _covrast IS NULL THEN
    RAISE NOTICE 'Unable to create coverage raster. Cannot add coverage tile constraint: % (%)',
          SQLERRM, SQLSTATE;
    RETURN FALSE;
   END IF;
   -- remove band
   _covrast := ST_MakeEmptyRaster(_covrast);
  EXCEPTION WHEN OTHERS THEN
   RAISE NOTICE 'Unable to create coverage raster. Cannot add coverage tile constraint: % (%)',
        SQLERRM, SQLSTATE;
   RETURN FALSE;
  END;
  sql := 'ALTER TABLE ' || fqtn ||
   ' ADD CONSTRAINT ' || quote_ident(cn) ||
   ' CHECK (st_iscoveragetile(' || quote_ident($3) || ', ''' || _covrast || '''::raster, ' || _tilewidth || ', ' || _tileheight || '))';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint_extent" id="Procedure_181bf0b" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint_extent 
 DECLARE
  fqtn text;
  cn name;
  sql text;
  attr text; srid integer;
 BEGIN
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  sql := 'SELECT public.ST_SRID('
            || quote_ident($3)
      || ') FROM '
            || fqtn
            || ' LIMIT 1;';
    EXECUTE sql INTO srid;
  cn := 'enforce_max_extent_' || $3;
  sql := 'SELECT public.st_ashexewkb( public.st_setsrid( public.st_extent( public.st_envelope('
   || quote_ident($3)
   || ')), ' || srid || ')) FROM '
   || fqtn;
  EXECUTE sql INTO attr;
  -- NOTE: I put NOT VALID to prevent the costly step of validating the constraint
  sql := 'ALTER TABLE ' || fqtn
   || ' ADD CONSTRAINT ' || quote_ident(cn)
   || ' CHECK ( public.st_envelope('
   || quote_ident($3)
   || ') @ ''' || attr || '''::geometry) NOT VALID';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint_nodata_values" id="Procedure_358b691" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint_nodata_values 
 DECLARE
  fqtn text;
  cn name;
  sql text;
  attr numeric[];
  max int;
 BEGIN
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  cn := 'enforce_nodata_values_' || $3;
  sql := 'SELECT public._raster_constraint_nodata_values(' || quote_ident($3)
   || ') FROM ' || fqtn
   || ' LIMIT 1';
  BEGIN
   EXECUTE sql INTO attr;
  EXCEPTION WHEN OTHERS THEN
   RAISE NOTICE 'Unable to get the nodata values of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
   RETURN FALSE;
  END;
  max := array_length(attr, 1);
  IF max < 1 OR max IS NULL THEN
   RAISE NOTICE 'Unable to get the nodata values of a sample raster (max < 1 or null)';
   RETURN FALSE;
  END IF;
  sql := 'ALTER TABLE ' || fqtn
   || ' ADD CONSTRAINT ' || quote_ident(cn)
   || ' CHECK (_raster_constraint_nodata_values(' || quote_ident($3)
   || ')::numeric[] = ''{';
  FOR x in 1..max LOOP
   IF attr[x] IS NULL THEN
    sql := sql || 'NULL';
   ELSE
    sql := sql || attr[x];
   END IF;
   IF x < max THEN
    sql := sql || ',';
   END IF;
  END LOOP;
  sql := sql || '}''::numeric[])';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint_num_bands" id="Procedure_49fb77e" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint_num_bands 
 DECLARE
  fqtn text;
  cn name;
  sql text;
  attr int;
 BEGIN
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  cn := 'enforce_num_bands_' || $3;
  sql := 'SELECT public.st_numbands(' || quote_ident($3)
   || ') FROM ' || fqtn
   || ' LIMIT 1';
  BEGIN
   EXECUTE sql INTO attr;
  EXCEPTION WHEN OTHERS THEN
   RAISE NOTICE 'Unable to get the number of bands of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
   RETURN FALSE;
  END;
  sql := 'ALTER TABLE ' || fqtn
   || ' ADD CONSTRAINT ' || quote_ident(cn)
   || ' CHECK (public.st_numbands(' || quote_ident($3)
   || ') = ' || attr
   || ')';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint_out_db" id="Procedure_1549195" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint_out_db 
 DECLARE
  fqtn text;
  cn name;
  sql text;
  attr boolean[];
  max int;
 BEGIN
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  cn := 'enforce_out_db_' || $3;
  sql := 'SELECT public._raster_constraint_out_db(' || quote_ident($3)
   || ') FROM ' || fqtn
   || ' LIMIT 1';
  BEGIN
   EXECUTE sql INTO attr;
  EXCEPTION WHEN OTHERS THEN
   RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
   RETURN FALSE;
  END;
  max := array_length(attr, 1);
  IF max < 1 OR max IS NULL THEN
   RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster (max < 1 or null)';
   RETURN FALSE;
  END IF;
  sql := 'ALTER TABLE ' || fqtn
   || ' ADD CONSTRAINT ' || quote_ident(cn)
   || ' CHECK ( public._raster_constraint_out_db(' || quote_ident($3)
   || ') = ''{';
  FOR x in 1..max LOOP
   IF attr[x] IS FALSE THEN
    sql := sql || 'FALSE';
   ELSE
    sql := sql || 'TRUE';
   END IF;
   IF x < max THEN
    sql := sql || ',';
   END IF;
  END LOOP;
  sql := sql || '}''::boolean[])';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint_pixel_types" id="Procedure_3ca1ffe" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint_pixel_types 
 DECLARE
  fqtn text;
  cn name;
  sql text;
  attr text[];
  max int;
 BEGIN
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  cn := 'enforce_pixel_types_' || $3;
  sql := 'SELECT public._raster_constraint_pixel_types(' || quote_ident($3)
   || ') FROM ' || fqtn
   || ' LIMIT 1';
  BEGIN
   EXECUTE sql INTO attr;
  EXCEPTION WHEN OTHERS THEN
   RAISE NOTICE 'Unable to get the pixel types of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
   RETURN FALSE;
  END;
  max := array_length(attr, 1);
  IF max < 1 OR max IS NULL THEN
   RAISE NOTICE 'Unable to get the pixel types of a sample raster (max < 1 or null)';
   RETURN FALSE;
  END IF;
  sql := 'ALTER TABLE ' || fqtn
   || ' ADD CONSTRAINT ' || quote_ident(cn)
   || ' CHECK (_raster_constraint_pixel_types(' || quote_ident($3)
   || ') = ''{';
  FOR x in 1..max LOOP
   sql := sql || '"' || attr[x] || '"';
   IF x < max THEN
    sql := sql || ',';
   END IF;
  END LOOP;
  sql := sql || '}''::text[])';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint_scale" id="Procedure_166d1bb" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint_scale 
 DECLARE
  fqtn text;
  cn name;
  sql text;
  attr double precision;
 BEGIN
  IF lower($4) != 'x' AND lower($4) != 'y' THEN
   RAISE EXCEPTION 'axis must be either "x" or "y"';
   RETURN FALSE;
  END IF;
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  cn := 'enforce_scale' || $4 || '_' || $3;
  sql := 'SELECT st_scale' || $4 || '('
   || quote_ident($3)
   || ') FROM '
   || fqtn
   || ' LIMIT 1';
  BEGIN
   EXECUTE sql INTO attr;
  EXCEPTION WHEN OTHERS THEN
   RAISE NOTICE 'Unable to get the %-scale of a sample raster: % (%)',
        upper($4), SQLERRM, SQLSTATE;
   RETURN FALSE;
  END;
  sql := 'ALTER TABLE ' || fqtn
   || ' ADD CONSTRAINT ' || quote_ident(cn)
   || ' CHECK (round(st_scale' || $4 || '('
   || quote_ident($3)
   || ')::numeric, 10) = round(' || text(attr) || '::numeric, 10))';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="axis" jt="1" type="bpchar" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint_spatially_unique" id="Procedure_1a71908" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint_spatially_unique 
 DECLARE
  fqtn text;
  cn name;
  sql text;
  attr text;
  meta record;
 BEGIN
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  cn := 'enforce_spatially_unique_' || quote_ident($2) || '_'|| $3;
  sql := 'ALTER TABLE ' || fqtn ||
   ' ADD CONSTRAINT ' || quote_ident(cn) ||
   ' EXCLUDE ((' || quote_ident($3) || '::geometry) WITH =)';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_add_raster_constraint_srid" id="Procedure_f1e4cd" isSystem="false" params_known="y" >
			<string><![CDATA[create function _add_raster_constraint_srid 
 DECLARE
  fqtn text;
  cn name;
  sql text;
  attr int;
 BEGIN
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  cn := 'enforce_srid_' || $3;
  sql := 'SELECT st_srid('
   || quote_ident($3)
   || ') FROM ' || fqtn
   || ' LIMIT 1';
  BEGIN
   EXECUTE sql INTO attr;
  EXCEPTION WHEN OTHERS THEN
   RAISE NOTICE 'Unable to get the SRID of a sample raster: % (%)',
        SQLERRM, SQLSTATE;
   RETURN FALSE;
  END;
  sql := 'ALTER TABLE ' || fqtn
   || ' ADD CONSTRAINT ' || quote_ident(cn)
   || ' CHECK (st_srid('
   || quote_ident($3)
   || ') = ' || attr || ')';
  RETURN  public._add_raster_constraint(cn, sql);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_overview_constraint" id="Procedure_2f001ab" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_overview_constraint  SELECT  public._drop_raster_constraint($1, $2, 'enforce_overview_' || $3) ]]></string>
			<input_param name="ovschema" jt="12" type="name" />
			<input_param name="ovtable" jt="12" type="name" />
			<input_param name="ovcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint" id="Procedure_4bd8d1c" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint 
 DECLARE
  fqtn text;
 BEGIN
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  BEGIN
   EXECUTE 'ALTER TABLE '
    || fqtn
    || ' DROP CONSTRAINT '
    || quote_ident(cn);
   RETURN TRUE;
  EXCEPTION
   WHEN undefined_object THEN
    RAISE NOTICE 'The constraint "%" does not exist.  Skipping', cn;
   WHEN OTHERS THEN
    RAISE NOTICE 'Unable to drop constraint "%": % (%)',
          cn, SQLERRM, SQLSTATE;
    RETURN FALSE;
  END;
  RETURN TRUE;
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="cn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_alignment" id="Procedure_5c3cab5" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_alignment  SELECT  public._drop_raster_constraint($1, $2, 'enforce_same_alignment_' || $3) ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_blocksize" id="Procedure_5b04023" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_blocksize 
 BEGIN
  IF lower($4) != 'width' AND lower($4) != 'height' THEN
   RAISE EXCEPTION 'axis must be either "width" or "height"';
   RETURN FALSE;
  END IF;
  RETURN  public._drop_raster_constraint($1, $2, 'enforce_' || $4 || '_' || $3);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="axis" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_coverage_tile" id="Procedure_3668e4e" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_coverage_tile  SELECT  public._drop_raster_constraint($1, $2, 'enforce_coverage_tile_' || $3) ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_extent" id="Procedure_3e529e1" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_extent  SELECT  public._drop_raster_constraint($1, $2, 'enforce_max_extent_' || $3) ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_nodata_values" id="Procedure_5bc07fa" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_nodata_values  SELECT  public._drop_raster_constraint($1, $2, 'enforce_nodata_values_' || $3) ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_num_bands" id="Procedure_4e2beb9" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_num_bands  SELECT  public._drop_raster_constraint($1, $2, 'enforce_num_bands_' || $3) ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_out_db" id="Procedure_26a6e30" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_out_db  SELECT  public._drop_raster_constraint($1, $2, 'enforce_out_db_' || $3) ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_pixel_types" id="Procedure_5489b6b" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_pixel_types  SELECT  public._drop_raster_constraint($1, $2, 'enforce_pixel_types_' || $3) ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_regular_blocking" id="Procedure_4333d5d" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_regular_blocking  SELECT public._drop_raster_constraint($1, $2, 'enforce_regular_blocking_' || $3) ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_scale" id="Procedure_237543c" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_scale 
 BEGIN
  IF lower($4) != 'x' AND lower($4) != 'y' THEN
   RAISE EXCEPTION 'axis must be either "x" or "y"';
   RETURN FALSE;
  END IF;
  RETURN  public._drop_raster_constraint($1, $2, 'enforce_scale' || $4 || '_' || $3);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="axis" jt="1" type="bpchar" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_spatially_unique" id="Procedure_12e4b15" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_spatially_unique 
 DECLARE
  cn text;
 BEGIN
  SELECT
   s.conname INTO cn
  FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s, pg_index idx, pg_operator op
  WHERE n.nspname = $1
   AND c.relname = $2
   AND a.attname = $3
   AND a.attrelid = c.oid
   AND s.connamespace = n.oid
   AND s.conrelid = c.oid
   AND s.contype = 'x'
   AND 0::smallint = ANY (s.conkey)
   AND idx.indexrelid = s.conindid
   AND pg_get_indexdef(idx.indexrelid, 1, true) LIKE '(' || quote_ident($3) || '::geometry)'
   AND s.conexclop[1] = op.oid
   AND op.oprname = '=';
  RETURN  public._drop_raster_constraint($1, $2, cn);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_drop_raster_constraint_srid" id="Procedure_3ed282a" isSystem="false" params_known="y" >
			<string><![CDATA[create function _drop_raster_constraint_srid  SELECT  public._drop_raster_constraint($1, $2, 'enforce_srid_' || $3) ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_overview_constraint" id="Procedure_2b69cb4" isSystem="false" params_known="y" >
			<string><![CDATA[create function _overview_constraint  SELECT COALESCE((SELECT TRUE FROM public.raster_columns WHERE r_table_catalog = current_database() AND r_table_schema = $3 AND r_table_name = $4 AND r_raster_column = $5), FALSE) ]]></string>
			<input_param name="ov" jt="1111" type="raster" />
			<input_param name="factor" jt="4" type="int4" />
			<input_param name="refschema" jt="12" type="name" />
			<input_param name="reftable" jt="12" type="name" />
			<input_param name="refcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_overview_constraint_info" id="Procedure_2189b88" isSystem="false" params_known="y" >
			<string><![CDATA[create function _overview_constraint_info 
 SELECT
  split_part(split_part(s.consrc, '''::name', 1), '''', 2)::name,
  split_part(split_part(s.consrc, '''::name', 2), '''', 2)::name,
  split_part(split_part(s.consrc, '''::name', 3), '''', 2)::name,
  trim(both from split_part(s.consrc, ',', 2))::integer
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND a.attnum = ANY (s.conkey)
  AND s.consrc LIKE '%_overview_constraint(%'
 ]]></string>
			<input_param name="ovschema" jt="12" type="name" />
			<input_param name="ovtable" jt="12" type="name" />
			<input_param name="ovcolumn" jt="12" type="name" />
			<input_param name="refschema" jt="12" type="name" />
			<input_param name="reftable" jt="12" type="name" />
			<input_param name="refcolumn" jt="12" type="name" />
			<input_param name="factor" jt="4" type="int4" />
		</procedure>
		<procedure name="_postgis_deprecate" id="Procedure_5f0b4f7" isSystem="false" params_known="y" >
			<string><![CDATA[create function _postgis_deprecate 
DECLARE
  curver_text text;
BEGIN
  --
  -- Raises a NOTICE if it was deprecated in this version,
  -- a WARNING if in a previous version (only up to minor version checked)
  --
    curver_text := '2.4.4';
    IF split_part(curver_text,'.',1)::int > split_part(version,'.',1)::int OR
       ( split_part(curver_text,'.',1) = split_part(version,'.',1) AND
         split_part(curver_text,'.',2) != split_part(version,'.',2) )
    THEN
      RAISE WARNING '% signature was deprecated in %. Please use %', oldname, version, newname;
    ELSE
      RAISE DEBUG '% signature was deprecated in %. Please use %', oldname, version, newname;
    END IF;
END;
]]></string>
			<input_param name="oldname" jt="12" type="text" />
			<input_param name="newname" jt="12" type="text" />
			<input_param name="version" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="_postgis_join_selectivity" id="Procedure_1071f9" isSystem="false" params_known="y" >
			<string><![CDATA[create function _postgis_join_selectivity _postgis_gserialized_joinsel]]></string>
			<input_param name="$1" jt="1111" type="regclass" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="1111" type="regclass" />
			<input_param name="$4" jt="12" type="text" />
			<input_param name="$5" jt="12" type="text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_postgis_pgsql_version" id="Procedure_432dec" isSystem="false" params_known="y" >
			<string><![CDATA[create function _postgis_pgsql_version 
 SELECT CASE WHEN split_part(s,'.',1)::integer > 9 THEN split_part(s,'.',1) || '0' ELSE split_part(s,'.', 1) || split_part(s,'.', 2) END AS v
 FROM substring(version(), 'PostgreSQL ([0-9\.]+)') AS s;
]]></string>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="_postgis_scripts_pgsql_version" id="Procedure_5e03bc5" isSystem="false" params_known="y" >
			<string><![CDATA[create function _postgis_scripts_pgsql_version SELECT '100'::text AS version]]></string>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="_postgis_selectivity" id="Procedure_12dbf18" isSystem="false" params_known="y" >
			<string><![CDATA[create function _postgis_selectivity _postgis_gserialized_sel]]></string>
			<input_param name="tbl" jt="1111" type="regclass" />
			<input_param name="att_name" jt="12" type="text" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="mode" jt="12" type="text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_postgis_stats" id="Procedure_5609571" isSystem="false" params_known="y" >
			<string><![CDATA[create function _postgis_stats _postgis_gserialized_stats]]></string>
			<input_param name="tbl" jt="1111" type="regclass" />
			<input_param name="att_name" jt="12" type="text" />
			<input_param name="" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="_raster_constraint_info_alignment" id="Procedure_3030e53" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_alignment 
 SELECT
  TRUE
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND a.attnum = ANY (s.conkey)
  AND s.consrc LIKE '%st_samealignment(%';
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_raster_constraint_info_blocksize" id="Procedure_5c1a974" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_blocksize 
 SELECT
  CASE
   WHEN strpos(s.consrc, 'ANY (ARRAY[') > 0 THEN
    split_part((substring(s.consrc FROM E'ARRAY\\[(.*?){1}\\]')), ',', 1)::integer
   ELSE
    regexp_replace(
     split_part(s.consrc, '= ', 2),
     '[\(\)]', '', 'g'
    )::integer
   END
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND a.attnum = ANY (s.conkey)
  AND s.consrc LIKE '%st_' || $4 || '(%= %';
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="axis" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="_raster_constraint_info_coverage_tile" id="Procedure_42e6b17" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_coverage_tile 
 SELECT
  TRUE
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND a.attnum = ANY (s.conkey)
  AND s.consrc LIKE '%st_iscoveragetile(%';
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_raster_constraint_info_extent" id="Procedure_158f764" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_extent 
 SELECT
  trim(both '''' from split_part(trim(split_part(s.consrc, ' @ ', 2)), '::', 1))::geometry
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND a.attnum = ANY (s.conkey)
  AND s.consrc LIKE '%st_envelope(% @ %';
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="_raster_constraint_info_index" id="Procedure_224704d" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_index 
  SELECT
   TRUE
  FROM pg_catalog.pg_class c
  JOIN pg_catalog.pg_index i
   ON i.indexrelid = c.oid
  JOIN pg_catalog.pg_class c2
   ON i.indrelid = c2.oid
  JOIN pg_catalog.pg_namespace n
   ON n.oid = c.relnamespace
  JOIN pg_am am
   ON c.relam = am.oid
  JOIN pg_attribute att
   ON att.attrelid = c2.oid
    AND pg_catalog.format_type(att.atttypid, att.atttypmod) = 'raster'
  WHERE c.relkind IN ('i')
   AND n.nspname = $1
   AND c2.relname = $2
   AND att.attname = $3
   AND am.amname = 'gist'
   AND strpos(pg_catalog.pg_get_expr(i.indexprs, i.indrelid), att.attname) > 0;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_raster_constraint_info_nodata_values" id="Procedure_4bbee2d" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_nodata_values 
 SELECT
  trim(both '''' from
   split_part(
    regexp_replace(
     split_part(s.consrc, ' = ', 2),
     '[\(\)]', '', 'g'
    ),
    '::', 1
   )
  )::double precision[]
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND a.attnum = ANY (s.conkey)
  AND s.consrc LIKE '%_raster_constraint_nodata_values(%';
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="2003" type="_float8" />
		</procedure>
		<procedure name="_raster_constraint_info_num_bands" id="Procedure_19b8090" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_num_bands 
 SELECT
  regexp_replace(
   split_part(s.consrc, ' = ', 2),
   '[\(\)]', '', 'g'
  )::integer
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND a.attnum = ANY (s.conkey)
  AND s.consrc LIKE '%st_numbands(%';
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="_raster_constraint_info_out_db" id="Procedure_2ee2781" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_out_db 
 SELECT
  trim(
   both '''' from split_part(
    regexp_replace(
     split_part(s.consrc, ' = ', 2),
     '[\(\)]', '', 'g'
    ),
    '::', 1
   )
  )::boolean[]
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND a.attnum = ANY (s.conkey)
  AND s.consrc LIKE '%_raster_constraint_out_db(%';
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="2003" type="_bool" />
		</procedure>
		<procedure name="_raster_constraint_info_pixel_types" id="Procedure_5224cfb" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_pixel_types 
 SELECT
  trim(
   both '''' from split_part(
    regexp_replace(
     split_part(s.consrc, ' = ', 2),
     '[\(\)]', '', 'g'
    ),
    '::', 1
   )
  )::text[]
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND a.attnum = ANY (s.conkey)
  AND s.consrc LIKE '%_raster_constraint_pixel_types(%';
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="2003" type="_text" />
		</procedure>
		<procedure name="_raster_constraint_info_regular_blocking" id="Procedure_4100d2f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_regular_blocking 
 DECLARE
  covtile boolean;
  spunique boolean;
 BEGIN
  -- check existance of constraints
  -- coverage tile constraint
  covtile := COALESCE( public._raster_constraint_info_coverage_tile($1, $2, $3), FALSE);
  -- spatially unique constraint
  spunique := COALESCE( public._raster_constraint_info_spatially_unique($1, $2, $3), FALSE);
  RETURN (covtile AND spunique);
 END;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_raster_constraint_info_scale" id="Procedure_49cc7ac" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_scale 
 WITH c AS (SELECT
  regexp_replace(
   replace(
    split_part(
     split_part(s.consrc, ' = ', 2),
     '::', 1
    ),
    'round(', ''
   ),
   '[ ''''\(\)]', '', 'g'
  )::text AS val
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND a.attnum = ANY (s.conkey)
  AND s.consrc LIKE '%st_scale' || $4 || '(% = %')
-- if it is a comma separated list of two numbers then need to use round
   SELECT CASE WHEN split_part(c.val,',', 2) > ''
        THEN round( split_part(c.val, ',',1)::numeric, split_part(c.val,',',2)::integer )::float8
        ELSE c.val::float8 END
        FROM c;
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="axis" jt="1" type="bpchar" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_raster_constraint_info_spatially_unique" id="Procedure_d1af0" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_spatially_unique 
 SELECT
  TRUE
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s, pg_index idx, pg_operator op
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND s.contype = 'x'
  AND 0::smallint = ANY (s.conkey)
  AND idx.indexrelid = s.conindid
  AND pg_get_indexdef(idx.indexrelid, 1, true) LIKE '(' || quote_ident($3) || '::geometry)'
  AND s.conexclop[1] = op.oid
  AND op.oprname = '=';
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_raster_constraint_info_srid" id="Procedure_2eec3c8" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_info_srid 
 SELECT
  regexp_replace(
   split_part(s.consrc, ' = ', 2),
   '[\(\)]', '', 'g'
  )::integer
 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
 WHERE n.nspname = $1
  AND c.relname = $2
  AND a.attname = $3
  AND a.attrelid = c.oid
  AND s.connamespace = n.oid
  AND s.conrelid = c.oid
  AND a.attnum = ANY (s.conkey)
  AND s.consrc LIKE '%st_srid(% = %';
 ]]></string>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="_raster_constraint_nodata_values" id="Procedure_1982038" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_nodata_values  SELECT array_agg(round(nodatavalue::numeric, 10))::numeric[] FROM public.ST_BandMetaData($1, ARRAY[]::int[]); ]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<result_param name="returnValue" jt="2003" type="_numeric" />
		</procedure>
		<procedure name="_raster_constraint_out_db" id="Procedure_501344" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_out_db  SELECT array_agg(isoutdb)::boolean[] FROM public.ST_BandMetaData($1, ARRAY[]::int[]); ]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<result_param name="returnValue" jt="2003" type="_bool" />
		</procedure>
		<procedure name="_raster_constraint_pixel_types" id="Procedure_4315391" isSystem="false" params_known="y" >
			<string><![CDATA[create function _raster_constraint_pixel_types  SELECT array_agg(pixeltype)::text[] FROM  public.ST_BandMetaData($1, ARRAY[]::int[]); ]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<result_param name="returnValue" jt="2003" type="_text" />
		</procedure>
		<procedure name="_st_3ddfullywithin" id="Procedure_1fbfd66" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_3ddfullywithin LWGEOM_dfullywithin3d]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_3ddwithin" id="Procedure_120309f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_3ddwithin LWGEOM_dwithin3d]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_3dintersects" id="Procedure_3d0293" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_3dintersects intersects3d]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_asgeojson" id="Procedure_dd3259" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_asgeojson  SELECT public.ST_AsGeoJson($2::public.geometry, $3::int4, $4::int4); 
create function _st_asgeojson geography_as_geojson]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="_st_asgeojson" id="Procedure_4613134" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_asgeojson  SELECT public.ST_AsGeoJson($2::public.geometry, $3::int4, $4::int4); 
create function _st_asgeojson geography_as_geojson]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="_st_asgml" id="Procedure_57bd6a2" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_asgml LWGEOM_asGML
create function _st_asgml geography_as_gml]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<input_param name="$5" jt="12" type="text" />
			<input_param name="$6" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="_st_asgml" id="Procedure_40b2b78" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_asgml LWGEOM_asGML
create function _st_asgml geography_as_gml]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<input_param name="$5" jt="12" type="text" />
			<input_param name="$6" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="_st_askml" id="Procedure_5c111df" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_askml LWGEOM_asKML
create function _st_askml geography_as_kml]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="_st_askml" id="Procedure_52d60f7" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_askml LWGEOM_asKML
create function _st_askml geography_as_kml]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="_st_aspect4ma" id="Procedure_231d46c" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_aspect4ma 
 DECLARE
  x integer;
  y integer;
  z integer;
  _width double precision;
  _height double precision;
  _units text;
  dz_dx double precision;
  dz_dy double precision;
  aspect double precision;
  halfpi double precision;
  _value double precision[][][];
  ndims int;
 BEGIN
  ndims := array_ndims(value);
  -- add a third dimension if 2-dimension
  IF ndims = 2 THEN
   _value := public._ST_convertarray4ma(value);
  ELSEIF ndims != 3 THEN
   RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
  ELSE
   _value := value;
  END IF;
  IF (
   array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
   array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
  ) THEN
   RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
  END IF;
  IF array_length(userargs, 1) < 3 THEN
   RAISE EXCEPTION 'At least three elements must be provided for the third parameter';
  END IF;
  -- only use the first raster passed to this function
  IF array_length(_value, 1) > 1 THEN
   RAISE NOTICE 'Only using the values from the first raster';
  END IF;
  z := array_lower(_value, 1);
  _width := userargs[1]::double precision;
  _height := userargs[2]::double precision;
  _units := userargs[3];
  
  -- check that center pixel isn't NODATA
  IF _value[z][2][2] IS NULL THEN
   RETURN NULL;
  -- substitute center pixel for any neighbor pixels that are NODATA
  ELSE
   FOR y IN 1..3 LOOP
    FOR x IN 1..3 LOOP
     IF _value[z][y][x] IS NULL THEN
      _value[z][y][x] = _value[z][2][2];
     END IF;
    END LOOP;
   END LOOP;
  END IF;
  dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
   (_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3]));
  dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
   (_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1]));
  -- aspect is flat
  IF abs(dz_dx) = 0::double precision AND abs(dz_dy) = 0::double precision THEN
   RETURN -1;
  END IF;
  -- aspect is in radians
  aspect := atan2(dz_dy, -dz_dx);
  -- north = 0, pi/2 = east, 3pi/2 = west
  halfpi := pi() / 2.0;
  IF aspect > halfpi THEN
   aspect := (5.0 * halfpi) - aspect;
  ELSE
   aspect := halfpi - aspect;
  END IF;
  IF aspect = 2 * pi() THEN
   aspect := 0.;
  END IF;
  -- output depends on user preference
  CASE substring(upper(trim(leading from _units)) for 3)
   -- radians
   WHEN 'rad' THEN
    RETURN aspect;
   -- degrees (default)
   ELSE
    RETURN degrees(aspect);
  END CASE;
 END;
 ]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_asraster" id="Procedure_53c0cd1" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_asraster RASTER_asRaster]]></string>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="pixeltype" jt="2003" type="_text" />
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<input_param name="upperleftx" jt="8" type="float8" />
			<input_param name="upperlefty" jt="8" type="float8" />
			<input_param name="gridx" jt="8" type="float8" />
			<input_param name="gridy" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="touched" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="_st_asx3d" id="Procedure_3b8273a" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_asx3d LWGEOM_asX3D]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<input_param name="$5" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="_st_bestsrid" id="Procedure_1f68b78" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_bestsrid SELECT public._ST_BestSRID($1,$1)
create function _st_bestsrid geography_bestsrid]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="_st_bestsrid" id="Procedure_28a2be3" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_bestsrid SELECT public._ST_BestSRID($1,$1)
create function _st_bestsrid geography_bestsrid]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="_st_buffer" id="Procedure_2b65bb9" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_buffer buffer]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="1111" type="cstring" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="_st_clip" id="Procedure_24544e8" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_clip RASTER_clip]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="2003" type="_int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<input_param name="crop" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="_st_colormap" id="Procedure_5add136" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_colormap RASTER_colorMap]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="colormap" jt="12" type="text" />
			<input_param name="method" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="_st_concavehull" id="Procedure_50e8e1" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_concavehull 
 DECLARE
 vexhull GEOMETRY;
 var_resultgeom geometry;
 var_inputgeom geometry;
 vexring GEOMETRY;
 cavering GEOMETRY;
 cavept geometry[];
 seglength double precision;
 var_tempgeom geometry;
 scale_factor float := 1;
 i integer;
 BEGIN
  -- First compute the ConvexHull of the geometry
  vexhull := public.ST_ConvexHull(param_inputgeom);
  var_inputgeom := param_inputgeom;
  --A point really has no concave hull
  IF public.ST_GeometryType(vexhull) = 'ST_Point' OR public.ST_GeometryType(vexHull) = 'ST_LineString' THEN
   RETURN vexhull;
  END IF;
  -- convert the hull perimeter to a linestring so we can manipulate individual points
  vexring := CASE WHEN public.ST_GeometryType(vexhull) = 'ST_LineString' THEN vexhull ELSE public.ST_ExteriorRing(vexhull) END;
  IF abs(public.ST_X(public.ST_PointN(vexring,1))) < 1 THEN --scale the geometry to prevent stupid precision errors - not sure it works so make low for now
   scale_factor := 100;
   vexring := public.ST_Scale(vexring, scale_factor,scale_factor);
   var_inputgeom := public.ST_Scale(var_inputgeom, scale_factor, scale_factor);
   --RAISE NOTICE 'Scaling';
  END IF;
  seglength := public.ST_Length(vexring)/least(public.ST_NPoints(vexring)*2,1000) ;
  vexring := public.ST_Segmentize(vexring, seglength);
  -- find the point on the original geom that is closest to each point of the convex hull and make a new linestring out of it.
  cavering := public.ST_Collect(
   ARRAY(
    SELECT
     public.ST_ClosestPoint(var_inputgeom, pt ) As the_geom
     FROM (
      SELECT  public.ST_PointN(vexring, n ) As pt, n
       FROM
       generate_series(1, public.ST_NPoints(vexring) ) As n
      ) As pt
    )
   )
  ;

  var_resultgeom := public.ST_MakeLine(geom)
   FROM public.ST_Dump(cavering) As foo;
  IF public.ST_IsSimple(var_resultgeom) THEN
   var_resultgeom := public.ST_MakePolygon(var_resultgeom);
   --RAISE NOTICE 'is Simple: %', var_resultgeom;
  ELSE 
   --RAISE NOTICE 'is not Simple: %', var_resultgeom;
   var_resultgeom := public.ST_ConvexHull(var_resultgeom);
  END IF;
  IF scale_factor > 1 THEN -- scale the result back
   var_resultgeom := public.ST_Scale(var_resultgeom, 1/scale_factor, 1/scale_factor);
  END IF;
  RETURN var_resultgeom;
 END;
]]></string>
			<input_param name="param_inputgeom" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="_st_contains" id="Procedure_333a352" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_contains contains
create function _st_contains RASTER_contains]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_contains" id="Procedure_285112f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_contains contains
create function _st_contains RASTER_contains]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_containsproperly" id="Procedure_2635eb8" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_containsproperly containsproperly
create function _st_containsproperly RASTER_containsProperly]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_containsproperly" id="Procedure_2e54095" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_containsproperly containsproperly
create function _st_containsproperly RASTER_containsProperly]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_convertarray4ma" id="Procedure_273e399" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_convertarray4ma 
 DECLARE
  _value double precision[][][];
  x int;
  y int;
 BEGIN
  IF array_ndims(value) != 2 THEN
   RAISE EXCEPTION 'Function parameter must be a 2-dimension array';
  END IF;
  _value := array_fill(NULL::double precision, ARRAY[1, array_length(value, 1), array_length(value, 2)]::int[], ARRAY[1, array_lower(value, 1), array_lower(value, 2)]::int[]);
  -- row
  FOR y IN array_lower(value, 1)..array_upper(value, 1) LOOP
   -- column
   FOR x IN array_lower(value, 2)..array_upper(value, 2) LOOP
    _value[1][y][x] = value[y][x];
   END LOOP;
  END LOOP;
  RETURN _value;
 END;
 ]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<result_param name="returnValue" jt="2003" type="_float8" />
		</procedure>
		<procedure name="_st_count" id="Procedure_1de1d3f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_count 
 DECLARE
  rtn bigint;
 BEGIN
  IF exclude_nodata_value IS FALSE THEN
   SELECT width * height INTO rtn FROM public.ST_Metadata(rast);
  ELSE
   SELECT count INTO rtn FROM public._ST_summarystats($1, $2, $3, $4);
  END IF;
  RETURN rtn;
 END;
 create function _st_count 
 DECLARE
  count bigint;
 BEGIN
  EXECUTE 'SELECT public.ST_CountAgg('
   || quote_ident($2) || ', '
   || $3 || ', '
   || $4 || ', '
   || $5 || ') '
   || 'FROM ' || quote_ident($1)
   INTO count;
  RETURN count;
 END;
  ]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="_st_count" id="Procedure_532919e" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_count 
 DECLARE
  rtn bigint;
 BEGIN
  IF exclude_nodata_value IS FALSE THEN
   SELECT width * height INTO rtn FROM public.ST_Metadata(rast);
  ELSE
   SELECT count INTO rtn FROM public._ST_summarystats($1, $2, $3, $4);
  END IF;
  RETURN rtn;
 END;
 create function _st_count 
 DECLARE
  count bigint;
 BEGIN
  EXECUTE 'SELECT public.ST_CountAgg('
   || quote_ident($2) || ', '
   || $3 || ', '
   || $4 || ', '
   || $5 || ') '
   || 'FROM ' || quote_ident($1)
   INTO count;
  RETURN count;
 END;
  ]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="_st_countagg_finalfn" id="Procedure_5270891" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_countagg_finalfn 
 BEGIN
  IF agg IS NULL THEN
   RAISE EXCEPTION 'Cannot count coverage';
  END IF;
  RETURN agg.count;
 END;
 ]]></string>
			<input_param name="agg" jt="2002" type="agg_count" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="_st_countagg_transfn" id="Procedure_ef2e71" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_countagg_transfn 
 DECLARE
  rtn_agg agg_count;
 BEGIN
  rtn_agg :=  public.__ST_countagg_transfn(
   agg,
   rast,
   1, exclude_nodata_value,
   1
  );
  RETURN rtn_agg;
 END;
 create function _st_countagg_transfn 
 DECLARE
  rtn_agg agg_count;
 BEGIN
  rtn_agg :=  public.__ST_countagg_transfn(
   agg,
   rast,
   nband, exclude_nodata_value,
   1
  );
  RETURN rtn_agg;
 END;
 create function _st_countagg_transfn 
 DECLARE
  rtn_agg agg_count;
 BEGIN
  rtn_agg :=  public.__st_countagg_transfn(
   agg,
   rast,
   nband, exclude_nodata_value,
   sample_percent
  );
  RETURN rtn_agg;
 END;
 ]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="agg" jt="2002" type="agg_count" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_countagg_transfn" id="Procedure_1f9c626" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_countagg_transfn 
 DECLARE
  rtn_agg agg_count;
 BEGIN
  rtn_agg :=  public.__ST_countagg_transfn(
   agg,
   rast,
   1, exclude_nodata_value,
   1
  );
  RETURN rtn_agg;
 END;
 create function _st_countagg_transfn 
 DECLARE
  rtn_agg agg_count;
 BEGIN
  rtn_agg :=  public.__ST_countagg_transfn(
   agg,
   rast,
   nband, exclude_nodata_value,
   1
  );
  RETURN rtn_agg;
 END;
 create function _st_countagg_transfn 
 DECLARE
  rtn_agg agg_count;
 BEGIN
  rtn_agg :=  public.__st_countagg_transfn(
   agg,
   rast,
   nband, exclude_nodata_value,
   sample_percent
  );
  RETURN rtn_agg;
 END;
 ]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="agg" jt="2002" type="agg_count" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_countagg_transfn" id="Procedure_302fab8" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_countagg_transfn 
 DECLARE
  rtn_agg agg_count;
 BEGIN
  rtn_agg :=  public.__ST_countagg_transfn(
   agg,
   rast,
   1, exclude_nodata_value,
   1
  );
  RETURN rtn_agg;
 END;
 create function _st_countagg_transfn 
 DECLARE
  rtn_agg agg_count;
 BEGIN
  rtn_agg :=  public.__ST_countagg_transfn(
   agg,
   rast,
   nband, exclude_nodata_value,
   1
  );
  RETURN rtn_agg;
 END;
 create function _st_countagg_transfn 
 DECLARE
  rtn_agg agg_count;
 BEGIN
  rtn_agg :=  public.__st_countagg_transfn(
   agg,
   rast,
   nband, exclude_nodata_value,
   sample_percent
  );
  RETURN rtn_agg;
 END;
 ]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="agg" jt="2002" type="agg_count" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_coveredby" id="Procedure_55bfb6e" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_coveredby coveredby
create function _st_coveredby RASTER_coveredby]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_coveredby" id="Procedure_4280aa6" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_coveredby coveredby
create function _st_coveredby RASTER_coveredby]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_covers" id="Procedure_4c4a829" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_covers covers
create function _st_covers geography_coverscreate function _st_covers RASTER_covers]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_covers" id="Procedure_3e248c1" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_covers covers
create function _st_covers geography_coverscreate function _st_covers RASTER_covers]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_covers" id="Procedure_1330d2a" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_covers covers
create function _st_covers geography_coverscreate function _st_covers RASTER_covers]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_crosses" id="Procedure_a0197f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_crosses crosses]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_dfullywithin" id="Procedure_14379d9" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_dfullywithin LWGEOM_dfullywithin
create function _st_dfullywithin RASTER_dfullywithin]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_dfullywithin" id="Procedure_14df439" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_dfullywithin LWGEOM_dfullywithin
create function _st_dfullywithin RASTER_dfullywithin]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<input_param name="distance" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_distance" id="Procedure_34f04d3" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_distance geography_distance]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_distancetree" id="Procedure_6f2a50" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_distancetree SELECT public._ST_DistanceTree($1, $2, 0.0, true)
create function _st_distancetree geography_distance_tree]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_distancetree" id="Procedure_4dd2058" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_distancetree SELECT public._ST_DistanceTree($1, $2, 0.0, true)
create function _st_distancetree geography_distance_tree]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_distanceuncached" id="Procedure_440675a" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_distanceuncached SELECT public._ST_DistanceUnCached($1, $2, 0.0, true)
create function _st_distanceuncached SELECT public._ST_DistanceUnCached($1, $2, 0.0, $3)create function _st_distanceuncached geography_distance_uncached]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_distanceuncached" id="Procedure_445fe12" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_distanceuncached SELECT public._ST_DistanceUnCached($1, $2, 0.0, true)
create function _st_distanceuncached SELECT public._ST_DistanceUnCached($1, $2, 0.0, $3)create function _st_distanceuncached geography_distance_uncached]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_distanceuncached" id="Procedure_2f0b78a" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_distanceuncached SELECT public._ST_DistanceUnCached($1, $2, 0.0, true)
create function _st_distanceuncached SELECT public._ST_DistanceUnCached($1, $2, 0.0, $3)create function _st_distanceuncached geography_distance_uncached]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_dwithin" id="Procedure_1fdcf30" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_dwithin LWGEOM_dwithin
create function _st_dwithin geography_dwithincreate function _st_dwithin RASTER_dwithin]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_dwithin" id="Procedure_29e0060" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_dwithin LWGEOM_dwithin
create function _st_dwithin geography_dwithincreate function _st_dwithin RASTER_dwithin]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_dwithin" id="Procedure_1be084e" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_dwithin LWGEOM_dwithin
create function _st_dwithin geography_dwithincreate function _st_dwithin RASTER_dwithin]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<input_param name="distance" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_dwithinuncached" id="Procedure_5d53788" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_dwithinuncached SELECT $1 OPERATOR(public.&&) public._ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public._ST_Expand($1,$3) AND public._ST_DWithinUnCached($1, $2, $3, true)
create function _st_dwithinuncached geography_dwithin_uncached]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_dwithinuncached" id="Procedure_3ea846a" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_dwithinuncached SELECT $1 OPERATOR(public.&&) public._ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public._ST_Expand($1,$3) AND public._ST_DWithinUnCached($1, $2, $3, true)
create function _st_dwithinuncached geography_dwithin_uncached]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_equals" id="Procedure_34e0cef" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_equals ST_Equals]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_expand" id="Procedure_529d0ef" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_expand geography_expand]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="_st_gdalwarp" id="Procedure_5df49a2" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_gdalwarp RASTER_GDALWarp]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<input_param name="srid" jt="4" type="int4" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="gridx" jt="8" type="float8" />
			<input_param name="gridy" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="_st_geomfromgml" id="Procedure_414271e" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_geomfromgml geom_from_gml]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="_st_hillshade4ma" id="Procedure_1f6667f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_hillshade4ma 
 DECLARE
  _pixwidth double precision;
  _pixheight double precision;
  _width double precision;
  _height double precision;
  _azimuth double precision;
  _altitude double precision;
  _bright double precision;
  _scale double precision;
  dz_dx double precision;
  dz_dy double precision;
  azimuth double precision;
  zenith double precision;
  slope double precision;
  aspect double precision;
  shade double precision;
  _value double precision[][][];
  ndims int;
  z int;
 BEGIN
  ndims := array_ndims(value);
  -- add a third dimension if 2-dimension
  IF ndims = 2 THEN
   _value := public._ST_convertarray4ma(value);
  ELSEIF ndims != 3 THEN
   RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
  ELSE
   _value := value;
  END IF;
  IF (
   array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
   array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
  ) THEN
   RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
  END IF;
  IF array_length(userargs, 1) < 8 THEN
   RAISE EXCEPTION 'At least eight elements must be provided for the third parameter';
  END IF;
  -- only use the first raster passed to this function
  IF array_length(_value, 1) > 1 THEN
   RAISE NOTICE 'Only using the values from the first raster';
  END IF;
  z := array_lower(_value, 1);
  _pixwidth := userargs[1]::double precision;
  _pixheight := userargs[2]::double precision;
  _width := userargs[3]::double precision;
  _height := userargs[4]::double precision;
  _azimuth := userargs[5]::double precision;
  _altitude := userargs[6]::double precision;
  _bright := userargs[7]::double precision;
  _scale := userargs[8]::double precision;
  -- check that pixel is not edge pixel
  IF (pos[1][1] = 1 OR pos[1][2] = 1) OR (pos[1][1] = _width OR pos[1][2] = _height) THEN
   RETURN NULL;
  END IF;
  -- clamp azimuth
  IF _azimuth < 0. THEN
   RAISE NOTICE 'Clamping provided azimuth value % to 0', _azimuth;
   _azimuth := 0.;
  ELSEIF _azimuth >= 360. THEN
   RAISE NOTICE 'Converting provided azimuth value % to be between 0 and 360', _azimuth;
   _azimuth := _azimuth - (360. * floor(_azimuth / 360.));
  END IF;
  azimuth := 360. - _azimuth + 90.;
  IF azimuth >= 360. THEN
   azimuth := azimuth - 360.;
  END IF;
  azimuth := radians(azimuth);
  --RAISE NOTICE 'azimuth = %', azimuth;
  -- clamp altitude
  IF _altitude < 0. THEN
   RAISE NOTICE 'Clamping provided altitude value % to 0', _altitude;
   _altitude := 0.;
  ELSEIF _altitude > 90. THEN
   RAISE NOTICE 'Clamping provided altitude value % to 90', _altitude;
   _altitude := 90.;
  END IF;
  zenith := radians(90. - _altitude);
  --RAISE NOTICE 'zenith = %', zenith;
  -- clamp bright
  IF _bright < 0. THEN
   RAISE NOTICE 'Clamping provided bright value % to 0', _bright;
   _bright := 0.;
  ELSEIF _bright > 255. THEN
   RAISE NOTICE 'Clamping provided bright value % to 255', _bright;
   _bright := 255.;
  END IF;
  dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
   (_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3])) / (8 * _pixheight);
  dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
   (_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1])) / (8 * _pixwidth);
  slope := atan(sqrt(dz_dx * dz_dx + dz_dy * dz_dy) / _scale);
  IF dz_dx != 0. THEN
   aspect := atan2(dz_dy, -dz_dx);
   IF aspect < 0. THEN
    aspect := aspect + (2.0 * pi());
   END IF;
  ELSE
   IF dz_dy > 0. THEN
    aspect := pi() / 2.;
   ELSEIF dz_dy < 0. THEN
    aspect := (2. * pi()) - (pi() / 2.);
   -- set to pi as that is the expected PostgreSQL answer in Linux
   ELSE
    aspect := pi();
   END IF;
  END IF;
  shade := _bright * ((cos(zenith) * cos(slope)) + (sin(zenith) * sin(slope) * cos(azimuth - aspect)));
  IF shade < 0. THEN
   shade := 0;
  END IF;
  RETURN shade;
 END;
 ]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_histogram" id="Procedure_4fffc9f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_histogram RASTER_histogramCoverage
create function _st_histogram RASTER_histogram]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="width" jt="2003" type="_float8" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_histogram" id="Procedure_57fbf48" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_histogram RASTER_histogramCoverage
create function _st_histogram RASTER_histogram]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="width" jt="2003" type="_float8" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_intersects" id="Procedure_5b8eb1c" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_intersects intersects
create function _st_intersects 
 DECLARE
  hasnodata boolean := TRUE;
  _geom geometry;
 BEGIN
  IF ST_SRID(rast) != ST_SRID(geom) THEN
   RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
  END IF;
  _geom := ST_ConvexHull(rast);
  IF nband IS NOT NULL THEN
   SELECT CASE WHEN bmd.nodatavalue IS NULL THEN FALSE ELSE NULL END INTO hasnodata FROM public.ST_BandMetaData(rast, nband) AS bmd;
  END IF;
  IF ST_Intersects(geom, _geom) IS NOT TRUE THEN
   RETURN FALSE;
  ELSEIF nband IS NULL OR hasnodata IS FALSE THEN
   RETURN TRUE;
  END IF;
  SELECT public.ST_Collect(t.geom) INTO _geom FROM public.ST_PixelAsPolygons(rast, nband) AS t;
  RETURN public.ST_Intersects(geom, _geom);
 END;
 create function _st_intersects RASTER_intersects]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_intersects" id="Procedure_5ad8" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_intersects intersects
create function _st_intersects 
 DECLARE
  hasnodata boolean := TRUE;
  _geom geometry;
 BEGIN
  IF ST_SRID(rast) != ST_SRID(geom) THEN
   RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
  END IF;
  _geom := ST_ConvexHull(rast);
  IF nband IS NOT NULL THEN
   SELECT CASE WHEN bmd.nodatavalue IS NULL THEN FALSE ELSE NULL END INTO hasnodata FROM public.ST_BandMetaData(rast, nband) AS bmd;
  END IF;
  IF ST_Intersects(geom, _geom) IS NOT TRUE THEN
   RETURN FALSE;
  ELSEIF nband IS NULL OR hasnodata IS FALSE THEN
   RETURN TRUE;
  END IF;
  SELECT public.ST_Collect(t.geom) INTO _geom FROM public.ST_PixelAsPolygons(rast, nband) AS t;
  RETURN public.ST_Intersects(geom, _geom);
 END;
 create function _st_intersects RASTER_intersects]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_intersects" id="Procedure_2199131" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_intersects intersects
create function _st_intersects 
 DECLARE
  hasnodata boolean := TRUE;
  _geom geometry;
 BEGIN
  IF ST_SRID(rast) != ST_SRID(geom) THEN
   RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
  END IF;
  _geom := ST_ConvexHull(rast);
  IF nband IS NOT NULL THEN
   SELECT CASE WHEN bmd.nodatavalue IS NULL THEN FALSE ELSE NULL END INTO hasnodata FROM public.ST_BandMetaData(rast, nband) AS bmd;
  END IF;
  IF ST_Intersects(geom, _geom) IS NOT TRUE THEN
   RETURN FALSE;
  ELSEIF nband IS NULL OR hasnodata IS FALSE THEN
   RETURN TRUE;
  END IF;
  SELECT public.ST_Collect(t.geom) INTO _geom FROM public.ST_PixelAsPolygons(rast, nband) AS t;
  RETURN public.ST_Intersects(geom, _geom);
 END;
 create function _st_intersects RASTER_intersects]]></string>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_linecrossingdirection" id="Procedure_18b79a7" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_linecrossingdirection ST_LineCrossingDirection]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="_st_longestline" id="Procedure_2557832" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_longestline LWGEOM_longestline2d]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="_st_mapalgebra" id="Procedure_780ac0" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_mapalgebra RASTER_nMapAlgebraExpr
create function _st_mapalgebra RASTER_nMapAlgebra]]></string>
			<input_param name="rastbandargset" jt="2003" type="_rastbandarg" />
			<input_param name="callbackfunc" jt="1111" type="regprocedure" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="distancex" jt="4" type="int4" />
			<input_param name="distancey" jt="4" type="int4" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="mask" jt="2003" type="_float8" />
			<input_param name="weighted" jt="-7" type="bool" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="_st_mapalgebra" id="Procedure_1b7561d" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_mapalgebra RASTER_nMapAlgebraExpr
create function _st_mapalgebra RASTER_nMapAlgebra]]></string>
			<input_param name="rastbandargset" jt="2003" type="_rastbandarg" />
			<input_param name="expression" jt="12" type="text" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="nodata1expr" jt="12" type="text" />
			<input_param name="nodata2expr" jt="12" type="text" />
			<input_param name="nodatanodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="_st_maxdistance" id="Procedure_108d251" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_maxdistance LWGEOM_maxdistance2d_linestring]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_neighborhood" id="Procedure_caac47" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_neighborhood RASTER_neighborhood]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="columnx" jt="4" type="int4" />
			<input_param name="rowy" jt="4" type="int4" />
			<input_param name="distancex" jt="4" type="int4" />
			<input_param name="distancey" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="2003" type="_float8" />
		</procedure>
		<procedure name="_st_orderingequals" id="Procedure_4f077fd" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_orderingequals LWGEOM_same]]></string>
			<input_param name="geometrya" jt="1111" type="geometry" />
			<input_param name="geometryb" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_overlaps" id="Procedure_3528606" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_overlaps overlaps
create function _st_overlaps RASTER_overlaps]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_overlaps" id="Procedure_46b7961" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_overlaps overlaps
create function _st_overlaps RASTER_overlaps]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_pixelaspolygons" id="Procedure_3f653d5" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_pixelaspolygons RASTER_getPixelPolygons]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="columnx" jt="4" type="int4" />
			<input_param name="rowy" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="val" jt="8" type="float8" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
		</procedure>
		<procedure name="_st_pointoutside" id="Procedure_565d985" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_pointoutside geography_point_outside]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="_st_quantile" id="Procedure_4dde488" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_quantile RASTER_quantile
create function _st_quantile RASTER_quantileCoverage]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_quantile" id="Procedure_5f37dba" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_quantile RASTER_quantile
create function _st_quantile RASTER_quantileCoverage]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_rastertoworldcoord" id="Procedure_140f61b" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_rastertoworldcoord RASTER_rasterToWorldCoord]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="columnx" jt="4" type="int4" />
			<input_param name="rowy" jt="4" type="int4" />
			<input_param name="longitude" jt="8" type="float8" />
			<input_param name="latitude" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_reclass" id="Procedure_4e3b9a4" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_reclass RASTER_reclass]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="reclassargset" jt="2003" type="_reclassarg" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="_st_roughness4ma" id="Procedure_1b8fa9b" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_roughness4ma 
 DECLARE
  x integer;
  y integer;
  z integer;
  minimum double precision;
  maximum double precision;
  _value double precision[][][];
  ndims int;
 BEGIN
  ndims := array_ndims(value);
  -- add a third dimension if 2-dimension
  IF ndims = 2 THEN
   _value := public._ST_convertarray4ma(value);
  ELSEIF ndims != 3 THEN
   RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
  ELSE
   _value := value;
  END IF;
  -- only use the first raster passed to this function
  IF array_length(_value, 1) > 1 THEN
   RAISE NOTICE 'Only using the values from the first raster';
  END IF;
  z := array_lower(_value, 1);
  IF (
   array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
   array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
  ) THEN
   RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
  END IF;
  -- check that center pixel isn't NODATA
  IF _value[z][2][2] IS NULL THEN
   RETURN NULL;
  -- substitute center pixel for any neighbor pixels that are NODATA
  ELSE
   FOR y IN 1..3 LOOP
    FOR x IN 1..3 LOOP
     IF _value[z][y][x] IS NULL THEN
      _value[z][y][x] = _value[z][2][2];
     END IF;
    END LOOP;
   END LOOP;
  END IF;
  minimum := _value[z][1][1];
  maximum := _value[z][1][1];
  FOR Y IN 1..3 LOOP
      FOR X IN 1..3 LOOP
        IF _value[z][y][x] < minimum THEN
       minimum := _value[z][y][x];
    ELSIF _value[z][y][x] > maximum THEN
       maximum := _value[z][y][x];
    END IF;
      END LOOP;
  END LOOP;
  RETURN maximum - minimum;
 END;
 ]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_samealignment_finalfn" id="Procedure_2ce5654" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_samealignment_finalfn  SELECT $1.aligned ]]></string>
			<input_param name="agg" jt="2002" type="agg_samealignment" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_samealignment_transfn" id="Procedure_547e830" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_samealignment_transfn 
 DECLARE
  m record;
  aligned boolean;
 BEGIN
  IF agg IS NULL THEN
   agg.refraster := NULL;
   agg.aligned := NULL;
  END IF;
  IF rast IS NULL THEN
   agg.aligned := NULL;
  ELSE
   IF agg.refraster IS NULL THEN
    m := ST_Metadata(rast);
    agg.refraster := ST_MakeEmptyRaster(1, 1, m.upperleftx, m.upperlefty, m.scalex, m.scaley, m.skewx, m.skewy, m.srid);
    agg.aligned := TRUE;
   ELSE IF agg.aligned IS TRUE THEN
     agg.aligned := ST_SameAlignment(agg.refraster, rast);
    END IF;
   END IF;
  END IF;
  RETURN agg;
 END;
 ]]></string>
			<input_param name="refraster" jt="1111" type="raster" />
			<input_param name="aligned" jt="-7" type="bool" />
			<input_param name="agg" jt="2002" type="agg_samealignment" />
			<input_param name="rast" jt="1111" type="raster" />
		</procedure>
		<procedure name="_st_setvalues" id="Procedure_5d4fa83" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_setvalues RASTER_setPixelValuesArray]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<input_param name="newvalueset" jt="2003" type="_float8" />
			<input_param name="noset" jt="2003" type="_bool" />
			<input_param name="hasnosetvalue" jt="-7" type="bool" />
			<input_param name="nosetvalue" jt="8" type="float8" />
			<input_param name="keepnodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="_st_slope4ma" id="Procedure_399b398" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_slope4ma 
 DECLARE
  x integer;
  y integer;
  z integer;
  _pixwidth double precision;
  _pixheight double precision;
  _width double precision;
  _height double precision;
  _units text;
  _scale double precision;
  dz_dx double precision;
  dz_dy double precision;
  slope double precision;
  _value double precision[][][];
  ndims int;
 BEGIN
  ndims := array_ndims(value);
  -- add a third dimension if 2-dimension
  IF ndims = 2 THEN
   _value := public._ST_convertarray4ma(value);
  ELSEIF ndims != 3 THEN
   RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
  ELSE
   _value := value;
  END IF;
  -- only use the first raster passed to this function
  IF array_length(_value, 1) > 1 THEN
   RAISE NOTICE 'Only using the values from the first raster';
  END IF;
  z := array_lower(_value, 1);
  IF (
   array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
   array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
  ) THEN
   RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
  END IF;
  IF array_length(userargs, 1) < 6 THEN
   RAISE EXCEPTION 'At least six elements must be provided for the third parameter';
  END IF;
  _pixwidth := userargs[1]::double precision;
  _pixheight := userargs[2]::double precision;
  _width := userargs[3]::double precision;
  _height := userargs[4]::double precision;
  _units := userargs[5];
  _scale := userargs[6]::double precision;
  
  -- check that center pixel isn't NODATA
  IF _value[z][2][2] IS NULL THEN
   RETURN NULL;
  -- substitute center pixel for any neighbor pixels that are NODATA
  ELSE
   FOR y IN 1..3 LOOP
    FOR x IN 1..3 LOOP
     IF _value[z][y][x] IS NULL THEN
      _value[z][y][x] = _value[z][2][2];
     END IF;
    END LOOP;
   END LOOP;
  END IF;
  dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
   (_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3])) / _pixheight;
  dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
   (_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1])) / _pixwidth;
  slope := sqrt(dz_dx * dz_dx + dz_dy * dz_dy) / (8 * _scale);
  -- output depends on user preference
  CASE substring(upper(trim(leading from _units)) for 3)
   -- percentages
   WHEN 'PER' THEN
    slope := 100.0 * slope;
   -- radians
   WHEN 'rad' THEN
    slope := atan(slope);
   -- degrees (default)
   ELSE
    slope := degrees(atan(slope));
  END CASE;
  RETURN slope;
 END;
 ]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_summarystats" id="Procedure_58ea14d" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_summarystats RASTER_summaryStats
create function _st_summarystats 
 DECLARE
  stats summarystats;
 BEGIN
  EXECUTE 'SELECT (stats).* FROM (SELECT public.ST_SummaryStatsAgg('
   || quote_ident($2) || ', '
   || $3 || ', '
   || $4 || ', '
   || $5 || ') AS stats '
   || 'FROM ' || quote_ident($1)
   || ') foo'
   INTO stats;
  RETURN stats;
 END;
 ]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_summarystats" id="Procedure_26f9f34" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_summarystats RASTER_summaryStats
create function _st_summarystats 
 DECLARE
  stats summarystats;
 BEGIN
  EXECUTE 'SELECT (stats).* FROM (SELECT public.ST_SummaryStatsAgg('
   || quote_ident($2) || ', '
   || $3 || ', '
   || $4 || ', '
   || $5 || ') AS stats '
   || 'FROM ' || quote_ident($1)
   || ') foo'
   INTO stats;
  RETURN stats;
 END;
 ]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_summarystats_finalfn" id="Procedure_32c79ee" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_summarystats_finalfn RASTER_summaryStats_finalfn]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="$1" jt="1111" type="internal" />
		</procedure>
		<procedure name="_st_summarystats_transfn" id="Procedure_2853178" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_summarystats_transfn RASTER_summaryStats_transfn
create function _st_summarystats_transfn RASTER_summaryStats_transfncreate function _st_summarystats_transfn RASTER_summaryStats_transfn]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="raster" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="-7" type="bool" />
			<input_param name="$5" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="_st_summarystats_transfn" id="Procedure_13cf88f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_summarystats_transfn RASTER_summaryStats_transfn
create function _st_summarystats_transfn RASTER_summaryStats_transfncreate function _st_summarystats_transfn RASTER_summaryStats_transfn]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="raster" />
			<input_param name="$3" jt="-7" type="bool" />
			<input_param name="$4" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="_st_summarystats_transfn" id="Procedure_47f7ce7" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_summarystats_transfn RASTER_summaryStats_transfn
create function _st_summarystats_transfn RASTER_summaryStats_transfncreate function _st_summarystats_transfn RASTER_summaryStats_transfn]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="raster" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="_st_tile" id="Procedure_113f8f1" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_tile RASTER_tile]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="nband" jt="2003" type="_int4" />
			<input_param name="padwithnodata" jt="-7" type="bool" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="_st_touches" id="Procedure_f152fb" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_touches touches
create function _st_touches RASTER_touches]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_touches" id="Procedure_4e23e93" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_touches touches
create function _st_touches RASTER_touches]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_tpi4ma" id="Procedure_556496f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_tpi4ma 
 DECLARE
  x integer;
  y integer;
  z integer;
  Z1 double precision;
  Z2 double precision;
  Z3 double precision;
  Z4 double precision;
  Z5 double precision;
  Z6 double precision;
  Z7 double precision;
  Z8 double precision;
  Z9 double precision;
  tpi double precision;
  mean double precision;
  _value double precision[][][];
  ndims int;
 BEGIN
  ndims := array_ndims(value);
  -- add a third dimension if 2-dimension
  IF ndims = 2 THEN
   _value := public._ST_convertarray4ma(value);
  ELSEIF ndims != 3 THEN
   RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
  ELSE
   _value := value;
  END IF;
  -- only use the first raster passed to this function
  IF array_length(_value, 1) > 1 THEN
   RAISE NOTICE 'Only using the values from the first raster';
  END IF;
  z := array_lower(_value, 1);
  IF (
   array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
   array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
  ) THEN
   RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
  END IF;
  -- check that center pixel isn't NODATA
  IF _value[z][2][2] IS NULL THEN
   RETURN NULL;
  -- substitute center pixel for any neighbor pixels that are NODATA
  ELSE
   FOR y IN 1..3 LOOP
    FOR x IN 1..3 LOOP
     IF _value[z][y][x] IS NULL THEN
      _value[z][y][x] = _value[z][2][2];
     END IF;
    END LOOP;
   END LOOP;
  END IF;
  -------------------------------------------------
  --|   Z1= Z(-1,1) |  Z2= Z(0,1) | Z3= Z(1,1)  |--
  -------------------------------------------------
  --|   Z4= Z(-1,0) |  Z5= Z(0,0) | Z6= Z(1,0)  |--
  -------------------------------------------------
  --|   Z7= Z(-1,-1)|  Z8= Z(0,-1)|  Z9= Z(1,-1)|--
  -------------------------------------------------
  Z1 := _value[z][1][1];
  Z2 := _value[z][2][1];
  Z3 := _value[z][3][1];
  Z4 := _value[z][1][2];
  Z5 := _value[z][2][2];
  Z6 := _value[z][3][2];
  Z7 := _value[z][1][3];
  Z8 := _value[z][2][3];
  Z9 := _value[z][3][3];
  mean := (Z1 + Z2 + Z3 + Z4 + Z6 + Z7 + Z8 + Z9)/8;
  tpi := Z5-mean;
  return tpi;
 END;
 ]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_tri4ma" id="Procedure_214d212" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_tri4ma 
 DECLARE
  x integer;
  y integer;
  z integer;
  Z1 double precision;
  Z2 double precision;
  Z3 double precision;
  Z4 double precision;
  Z5 double precision;
  Z6 double precision;
  Z7 double precision;
  Z8 double precision;
  Z9 double precision;
  tri double precision;
  _value double precision[][][];
  ndims int;
 BEGIN
  ndims := array_ndims(value);
  -- add a third dimension if 2-dimension
  IF ndims = 2 THEN
   _value := public._ST_convertarray4ma(value);
  ELSEIF ndims != 3 THEN
   RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
  ELSE
   _value := value;
  END IF;
  -- only use the first raster passed to this function
  IF array_length(_value, 1) > 1 THEN
   RAISE NOTICE 'Only using the values from the first raster';
  END IF;
  z := array_lower(_value, 1);
  IF (
   array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
   array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
  ) THEN
   RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
  END IF;
  -- check that center pixel isn't NODATA
  IF _value[z][2][2] IS NULL THEN
   RETURN NULL;
  -- substitute center pixel for any neighbor pixels that are NODATA
  ELSE
   FOR y IN 1..3 LOOP
    FOR x IN 1..3 LOOP
     IF _value[z][y][x] IS NULL THEN
      _value[z][y][x] = _value[z][2][2];
     END IF;
    END LOOP;
   END LOOP;
  END IF;
  -------------------------------------------------
  --|   Z1= Z(-1,1) |  Z2= Z(0,1) | Z3= Z(1,1)  |--
  -------------------------------------------------
  --|   Z4= Z(-1,0) |  Z5= Z(0,0) | Z6= Z(1,0)  |--
  -------------------------------------------------
  --|   Z7= Z(-1,-1)|  Z8= Z(0,-1)|  Z9= Z(1,-1)|--
  -------------------------------------------------
  -- _scale width and height units / z units to make z units equal to height width units
  Z1 := _value[z][1][1];
  Z2 := _value[z][2][1];
  Z3 := _value[z][3][1];
  Z4 := _value[z][1][2];
  Z5 := _value[z][2][2];
  Z6 := _value[z][3][2];
  Z7 := _value[z][1][3];
  Z8 := _value[z][2][3];
  Z9 := _value[z][3][3];
  tri := ( abs(Z1 - Z5 ) + abs( Z2 - Z5 ) + abs( Z3 - Z5 ) + abs( Z4 - Z5 ) + abs( Z6 - Z5 ) + abs( Z7 - Z5 ) + abs( Z8 - Z5 ) + abs ( Z9 - Z5 )) / 8;
  return tri;
 END;
 ]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_union_finalfn" id="Procedure_1a44533" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_union_finalfn RASTER_union_finalfn]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="_st_union_transfn" id="Procedure_eb456e" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_union_transfn RASTER_union_transfn
create function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfn]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="raster" />
			<input_param name="$3" jt="2003" type="_unionarg" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="_st_union_transfn" id="Procedure_3bbec4f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_union_transfn RASTER_union_transfn
create function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfn]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="raster" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="_st_union_transfn" id="Procedure_558ac55" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_union_transfn RASTER_union_transfn
create function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfn]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="raster" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="_st_union_transfn" id="Procedure_301ae5e" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_union_transfn RASTER_union_transfn
create function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfn]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="_st_union_transfn" id="Procedure_3a6a438" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_union_transfn RASTER_union_transfn
create function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfncreate function _st_union_transfn RASTER_union_transfn]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="raster" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="_st_valuecount" id="Procedure_3411aa0" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_valuecount RASTER_valueCount
create function _st_valuecount RASTER_valueCountCoverage]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="count" jt="4" type="int4" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_valuecount" id="Procedure_39fa96f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_valuecount RASTER_valueCount
create function _st_valuecount RASTER_valueCountCoverage]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="count" jt="4" type="int4" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="_st_voronoi" id="Procedure_4b250fc" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_voronoi ST_Voronoi]]></string>
			<input_param name="g1" jt="1111" type="geometry" />
			<input_param name="clip" jt="1111" type="geometry" />
			<input_param name="tolerance" jt="8" type="float8" />
			<input_param name="return_polygons" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="_st_within" id="Procedure_5537f1f" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_within SELECT public._ST_Contains($2,$1)
create function _st_within  SELECT public._st_contains($3, $4, $1, $2) ]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_within" id="Procedure_2a31aca" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_within SELECT public._ST_Contains($2,$1)
create function _st_within  SELECT public._st_contains($3, $4, $1, $2) ]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="_st_worldtorastercoord" id="Procedure_1712da9" isSystem="false" params_known="y" >
			<string><![CDATA[create function _st_worldtorastercoord RASTER_worldToRasterCoord]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="longitude" jt="8" type="float8" />
			<input_param name="latitude" jt="8" type="float8" />
			<input_param name="columnx" jt="4" type="int4" />
			<input_param name="rowy" jt="4" type="int4" />
		</procedure>
		<procedure name="_updaterastersrid" id="Procedure_5a574e9" isSystem="false" params_known="y" >
			<string><![CDATA[create function _updaterastersrid 
 DECLARE
  fqtn text;
  schema name;
  sql text;
  srid integer;
  ct boolean;
 BEGIN
  -- validate schema
  schema := NULL;
  IF length($1) > 0 THEN
   sql := 'SELECT nspname FROM pg_namespace '
    || 'WHERE nspname = ' || quote_literal($1)
    || 'LIMIT 1';
   EXECUTE sql INTO schema;
   IF schema IS NULL THEN
    RAISE EXCEPTION 'The value provided for schema is invalid';
    RETURN FALSE;
   END IF;
  END IF;
  IF schema IS NULL THEN
   sql := 'SELECT n.nspname AS schemaname '
    || 'FROM pg_catalog.pg_class c '
    || 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
    || 'WHERE c.relkind = ' || quote_literal('r')
    || ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
    || ', ' || quote_literal('pg_toast')
    || ') AND pg_catalog.pg_table_is_visible(c.oid)'
    || ' AND c.relname = ' || quote_literal($2);
   EXECUTE sql INTO schema;
   IF schema IS NULL THEN
    RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
    RETURN FALSE;
   END IF;
  END IF;
  -- clamp SRID
  IF new_srid < 0 THEN
   srid :=  public.ST_SRID('POINT EMPTY'::public.geometry);
   RAISE NOTICE 'SRID % converted to the officially unknown SRID %', new_srid, srid;
  ELSE
   srid := new_srid;
  END IF;
  -- drop coverage tile constraint
  -- done separately just in case constraint doesn't exist
  ct := public._raster_constraint_info_coverage_tile(schema, $2, $3);
  IF ct IS TRUE THEN
   PERFORM  public._drop_raster_constraint_coverage_tile(schema, $2, $3);
  END IF;
  -- drop SRID, extent, alignment constraints
  PERFORM  public.DropRasterConstraints(schema, $2, $3, 'extent', 'alignment', 'srid');
  fqtn := '';
  IF length($1) > 0 THEN
   fqtn := quote_ident($1) || '.';
  END IF;
  fqtn := fqtn || quote_ident($2);
  -- update SRID
  sql := 'UPDATE ' || fqtn ||
   ' SET ' || quote_ident($3) ||
   ' =  public.ST_SetSRID(' || quote_ident($3) ||
   '::raster, ' || srid || ')';
  RAISE NOTICE 'sql = %', sql;
  EXECUTE sql;
  -- add SRID constraint
  PERFORM  public.AddRasterConstraints(schema, $2, $3, 'srid', 'extent', 'alignment');
  -- add coverage tile constraint if needed
  IF ct IS TRUE THEN
   PERFORM  public._add_raster_constraint_coverage_tile(schema, $2, $3);
  END IF;
  RETURN TRUE;
 END;
 ]]></string>
			<input_param name="schema_name" jt="12" type="name" />
			<input_param name="table_name" jt="12" type="name" />
			<input_param name="column_name" jt="12" type="name" />
			<input_param name="new_srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="addauth" id="Procedure_104fd18" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addauth(text)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := 'f';
	FOR myrec IN SELECT * FROM pg_class WHERE relname = 'temp_lock_have_table' LOOP
		okay := 't';
	END LOOP; 
	IF (okay <> 't') THEN 
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;
	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE 'INSERT INTO temp_lock_have_table VALUES ( '||
--		quote_literal(getTransactionID()) || ',' ||
--		quote_literal(lockid) ||')';
	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);
	RETURN true::boolean;
END;
$function$
]]></string>
			<comment><![CDATA[args: auth_token - Add an authorization token to be used in current transaction.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="addgeometrycolumn" id="Procedure_43564a2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;
	new_srid integer;
BEGIN
	-- Verify geometry type
	IF (postgis_type_name(new_type,new_dim) IS NULL )
	THEN
		RAISE EXCEPTION 'Invalid type name "%(%)" - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM, TRIANGLE, TRIANGLEM,
	POLYHEDRALSURFACE, POLYHEDRALSURFACEM, TIN, TINM
	or GEOMETRYCOLLECTIONM', new_type, new_dim;
		RETURN 'fail';
	END IF;

	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <2) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;
	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;

	-- Verify SRID
	IF ( new_srid_in > 0 ) THEN
		IF new_srid_in > 998999 THEN
			RAISE EXCEPTION 'AddGeometryColumn() - SRID must be <= %', 998999;
		END IF;
		new_srid := new_srid_in;
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumn() - invalid SRID';
			RETURN 'fail';
		END IF;
	ELSE
		new_srid := public.ST_SRID('POINT EMPTY'::public.geometry);
		IF ( new_srid_in != new_srid ) THEN
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;

	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;
		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;
	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;
		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;

	-- Add geometry column to table
	IF use_typmod THEN
	     sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry(' || public.postgis_type_name(new_type, new_dim) || ', ' || new_srid::text || ')';
        RAISE DEBUG '%', sql;
	ELSE
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry ';
        RAISE DEBUG '%', sql;
    END IF;
	EXECUTE sql;
	IF NOT use_typmod THEN
        -- Add table CHECKs
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_srid_' || column_name)
            || ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_dims_' || column_name)
            || ' CHECK (st_ndims(' || quote_ident(column_name) ||
            ') = ' || new_dim::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;
        IF ( NOT (new_type = 'GEOMETRY')) THEN
            sql := 'ALTER TABLE ' ||
                quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
                quote_ident('enforce_geotype_' || column_name) ||
                ' CHECK (GeometryType(' ||
                quote_ident(column_name) || ')=' ||
                quote_literal(new_type) || ' OR (' ||
                quote_ident(column_name) || ') is null)';
            RAISE DEBUG '%', sql;
            EXECUTE sql;
        END IF;
    END IF;
	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
			<input_param name="catalog_name" jt="12" type="varchar" />
			<input_param name="schema_name" jt="12" type="varchar" />
			<input_param name="table_name" jt="12" type="varchar" />
			<input_param name="column_name" jt="12" type="varchar" />
			<input_param name="new_srid_in" jt="4" type="int4" />
			<input_param name="new_type" jt="12" type="varchar" />
			<input_param name="new_dim" jt="4" type="int4" />
			<input_param name="use_typmod" jt="-7" type="bool" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="addgeometrycolumn" id="Procedure_51611d9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT public.AddGeometryColumn('',$1,$2,$3,$4,$5,$6,$7) into ret;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
			<input_param name="schema_name" jt="12" type="varchar" />
			<input_param name="table_name" jt="12" type="varchar" />
			<input_param name="column_name" jt="12" type="varchar" />
			<input_param name="new_srid" jt="4" type="int4" />
			<input_param name="new_type" jt="12" type="varchar" />
			<input_param name="new_dim" jt="4" type="int4" />
			<input_param name="use_typmod" jt="-7" type="bool" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="addgeometrycolumn" id="Procedure_51636b1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT public.AddGeometryColumn('','',$1,$2,$3,$4,$5, $6) into ret;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
			<input_param name="table_name" jt="12" type="varchar" />
			<input_param name="column_name" jt="12" type="varchar" />
			<input_param name="new_srid" jt="4" type="int4" />
			<input_param name="new_type" jt="12" type="varchar" />
			<input_param name="new_dim" jt="4" type="int4" />
			<input_param name="use_typmod" jt="-7" type="bool" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="addoverviewconstraints" id="Procedure_27c3b51" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		x int;
		s name;
		t name;
		oschema name;
		rschema name;
		sql text;
		rtn boolean;
	BEGIN
		FOR x IN 1..2 LOOP
			s := '';
			IF x = 1 THEN
				s := $1;
				t := $2;
			ELSE
				s := $4;
				t := $5;
			END IF;
			-- validate user-provided schema
			IF length(s) > 0 THEN
				sql := 'SELECT nspname FROM pg_namespace '
					|| 'WHERE nspname = ' || quote_literal(s)
					|| 'LIMIT 1';
				EXECUTE sql INTO s;
				IF s IS NULL THEN
					RAISE EXCEPTION 'The value % is not a valid schema', quote_literal(s);
					RETURN FALSE;
				END IF;
			END IF;
			-- no schema, determine what it could be using the table
			IF length(s) < 1 THEN
				sql := 'SELECT n.nspname AS schemaname '
					|| 'FROM pg_catalog.pg_class c '
					|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
					|| 'WHERE c.relkind = ' || quote_literal('r')
					|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
					|| ', ' || quote_literal('pg_toast')
					|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
					|| ' AND c.relname = ' || quote_literal(t);
				EXECUTE sql INTO s;
				IF s IS NULL THEN
					RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal(t);
					RETURN FALSE;
				END IF;
			END IF;
			IF x = 1 THEN
				oschema := s;
			ELSE
				rschema := s;
			END IF;
		END LOOP;
		-- reference raster
		rtn :=  public._add_overview_constraint(oschema, $2, $3, rschema, $5, $6, $7);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to add the overview constraint.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
]]></string>
			<comment><![CDATA[args: ovschema, ovtable, ovcolumn, refschema, reftable, refcolumn, ovfactor - Tag a raster column as being an overview of another.]]></comment>
			<input_param name="ovschema" jt="12" type="name" />
			<input_param name="ovtable" jt="12" type="name" />
			<input_param name="ovcolumn" jt="12" type="name" />
			<input_param name="refschema" jt="12" type="name" />
			<input_param name="reftable" jt="12" type="name" />
			<input_param name="refcolumn" jt="12" type="name" />
			<input_param name="ovfactor" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="addoverviewconstraints" id="Procedure_5508958" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT  public.AddOverviewConstraints('', $1, $2, '', $3, $4, $5) $function$
]]></string>
			<comment><![CDATA[args: ovtable, ovcolumn, reftable, refcolumn, ovfactor - Tag a raster column as being an overview of another.]]></comment>
			<input_param name="ovtable" jt="12" type="name" />
			<input_param name="ovcolumn" jt="12" type="name" />
			<input_param name="reftable" jt="12" type="name" />
			<input_param name="refcolumn" jt="12" type="name" />
			<input_param name="ovfactor" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="addrasterconstraints" id="Procedure_277dc06" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		max int;
		cnt int;
		sql text;
		schema name;
		x int;
		kw text;
		rtn boolean;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be added.  Doing nothing';
			RETURN TRUE;
		END IF;
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;
		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;
		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));
			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Adding SRID constraint';
						rtn :=  public._add_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn :=  public._add_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn :=  public._add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn :=  public._add_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn :=  public._add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn :=  public._add_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn :=  public._add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn :=  public._add_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn :=  public._add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Adding alignment constraint';
						rtn :=  public._add_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						RAISE NOTICE 'Adding coverage tile constraint required for regular blocking';
						rtn :=  public._add_raster_constraint_coverage_tile(schema, $2, $3);
						IF rtn IS NOT FALSE THEN
							RAISE NOTICE 'Adding spatially unique constraint required for regular blocking';
							rtn :=  public._add_raster_constraint_spatially_unique(schema, $2, $3);
						END IF;
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Adding number of bands constraint';
						rtn :=  public._add_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Adding pixel type constraint';
						rtn :=  public._add_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Adding nodata value constraint';
						rtn :=  public._add_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Adding out-of-database constraint';
						rtn :=  public._add_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Adding maximum extent constraint';
						rtn :=  public._add_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;
			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to add constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;
		END LOOP kwloop;
		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be added.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="constraints" jt="2003" type="_text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="addrasterconstraints" id="Procedure_224032a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT public.AddRasterConstraints('', $1, $2, VARIADIC $3) $function$
]]></string>
			<comment><![CDATA[args: rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="constraints" jt="2003" type="_text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="addrasterconstraints" id="Procedure_33ced0f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT false, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;
		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;
		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;
		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;
		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;
		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;
		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;
		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;
		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;
		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;
		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;
		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;
		RETURN public.AddRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=false, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="srid" jt="-7" type="bool" />
			<input_param name="scale_x" jt="-7" type="bool" />
			<input_param name="scale_y" jt="-7" type="bool" />
			<input_param name="blocksize_x" jt="-7" type="bool" />
			<input_param name="blocksize_y" jt="-7" type="bool" />
			<input_param name="same_alignment" jt="-7" type="bool" />
			<input_param name="regular_blocking" jt="-7" type="bool" />
			<input_param name="num_bands" jt="-7" type="bool" />
			<input_param name="pixel_types" jt="-7" type="bool" />
			<input_param name="nodata_values" jt="-7" type="bool" />
			<input_param name="out_db" jt="-7" type="bool" />
			<input_param name="extent" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="addrasterconstraints" id="Procedure_15d5344" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addrasterconstraints(rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT false, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT public.AddRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) $function$
]]></string>
			<comment><![CDATA[args: rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="srid" jt="-7" type="bool" />
			<input_param name="scale_x" jt="-7" type="bool" />
			<input_param name="scale_y" jt="-7" type="bool" />
			<input_param name="blocksize_x" jt="-7" type="bool" />
			<input_param name="blocksize_y" jt="-7" type="bool" />
			<input_param name="same_alignment" jt="-7" type="bool" />
			<input_param name="regular_blocking" jt="-7" type="bool" />
			<input_param name="num_bands" jt="-7" type="bool" />
			<input_param name="pixel_types" jt="-7" type="bool" />
			<input_param name="nodata_values" jt="-7" type="bool" />
			<input_param name="out_db" jt="-7" type="bool" />
			<input_param name="extent" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="box" id="Procedure_317a7e0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box(geometry)
 RETURNS box
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_to_BOX$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="box" />
		</procedure>
		<procedure name="box" id="Procedure_2338b67" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box(box3d)
 RETURNS box
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_to_BOX$function$
]]></string>
			<input_param name="$1" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="1111" type="box" />
		</procedure>
		<procedure name="box2d" id="Procedure_212385a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box2d(geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_to_BOX2D$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns a BOX2D representing the maximum extents of the geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="box2d" id="Procedure_430ceb6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box2d(box3d)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_to_BOX2D$function$
]]></string>
			<input_param name="$1" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="box2d_in" id="Procedure_8fac0d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box2d_in(cstring)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX2D_in$function$
]]></string>
			<input_param name="$1" jt="1111" type="cstring" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="box2d_out" id="Procedure_137f53d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box2d_out(box2d)
 RETURNS cstring
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX2D_out$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2d" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="box2df_in" id="Procedure_2d27c7d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box2df_in(cstring)
 RETURNS box2df
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$box2df_in$function$
]]></string>
			<input_param name="$1" jt="1111" type="cstring" />
			<result_param name="returnValue" jt="1111" type="box2df" />
		</procedure>
		<procedure name="box2df_out" id="Procedure_1d53014" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box2df_out(box2df)
 RETURNS cstring
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$box2df_out$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2df" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="box3d" id="Procedure_3808301" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box3d(geometry)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_to_BOX3D$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns a BOX3D representing the maximum extents of the geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="box3d" />
		</procedure>
		<procedure name="box3d" id="Procedure_50d74a0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box3d(box2d)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX2D_to_BOX3D$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2d" />
			<result_param name="returnValue" jt="1111" type="box3d" />
		</procedure>
		<procedure name="box3d" id="Procedure_454eeba" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box3d(raster)
 RETURNS box3d
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select box3d( public.ST_convexhull($1))$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="1111" type="box3d" />
		</procedure>
		<procedure name="box3d_in" id="Procedure_1414a5f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box3d_in(cstring)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_in$function$
]]></string>
			<input_param name="$1" jt="1111" type="cstring" />
			<result_param name="returnValue" jt="1111" type="box3d" />
		</procedure>
		<procedure name="box3d_out" id="Procedure_66fb8e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box3d_out(box3d)
 RETURNS cstring
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_out$function$
]]></string>
			<input_param name="$1" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="box3dtobox" id="Procedure_481d7fd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box3dtobox(box3d)
 RETURNS box
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_to_BOX$function$
]]></string>
			<input_param name="$1" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="1111" type="box" />
		</procedure>
		<procedure name="bytea" id="Procedure_b8fd06" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.bytea(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_to_bytea$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="bytea" id="Procedure_530bf2f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.bytea(geography)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_to_bytea$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="bytea" id="Procedure_3173ca" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.bytea(raster)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_to_bytea$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="checkauth" id="Procedure_3f5feb5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.checkauth(text, text, text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;
	if ( $1 != '' ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;
	-- TODO: check for an already existing trigger ?
	EXECUTE 'CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON ' 
		|| quote_ident(schema) || '.' || quote_ident($2)
		||' FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger('
		|| quote_literal($3) || ')';
	RETURN 0;
END;
$function$
]]></string>
			<comment><![CDATA[args: a_schema_name, a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="checkauth" id="Procedure_5d19aed" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.checkauth(text, text)
 RETURNS integer
 LANGUAGE sql
AS $function$ SELECT CheckAuth('', $1, $2) $function$
]]></string>
			<comment><![CDATA[args: a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="checkauthtrigger" id="Procedure_37d6860" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.checkauthtrigger()
 RETURNS trigger
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$check_authorization$function$
]]></string>
			<result_param name="returnValue" jt="1111" type="trigger" />
		</procedure>
		<procedure name="contains_2d" id="Procedure_2f36360" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.contains_2d(box2df, geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_contains_box2df_geom_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2df" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="contains_2d" id="Procedure_142ba4b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.contains_2d(box2df, box2df)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_contains_box2df_box2df_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2df" />
			<input_param name="$2" jt="1111" type="box2df" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="contains_2d" id="Procedure_15ff1f1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.contains_2d(geometry, box2df)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT $2 OPERATOR(public.@) $1;$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="box2df" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="difference" id="Procedure_35d0e59" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.difference(text, text)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/fuzzystrmatch', $function$difference$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="disablelongtransactions" id="Procedure_847993" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.disablelongtransactions()
 RETURNS text
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	rec RECORD;
BEGIN
	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = 'checkauthtrigger' and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE 'DROP TRIGGER ' || quote_ident(rec.tgname) ||
			' ON ' || quote_ident(rec.relname);
	END LOOP;
	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table' LOOP
		DROP TABLE authorization_table;
	END LOOP;
	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables' LOOP
		DROP VIEW authorized_tables;
	END LOOP;
	RETURN 'Long transactions support disabled';
END;
$function$
]]></string>
			<comment><![CDATA[Disable long transaction support. This function removes the long transaction support metadata tables, and drops all triggers attached to lock-checked tables.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="dmetaphone" id="Procedure_1acbf0b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dmetaphone(text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/fuzzystrmatch', $function$dmetaphone$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="dmetaphone_alt" id="Procedure_558dbb1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dmetaphone_alt(text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/fuzzystrmatch', $function$dmetaphone_alt$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="dropgeometrycolumn" id="Procedure_246d102" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	myrec RECORD;
	okay boolean;
	real_schema name;
BEGIN

	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;
		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;
		IF ( okay <>  true ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;
	-- Find out if the column is in the geometry_columns table
	okay = false;
	FOR myrec IN SELECT * from public.geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (okay <> true) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;
	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);
	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
			<input_param name="catalog_name" jt="12" type="varchar" />
			<input_param name="schema_name" jt="12" type="varchar" />
			<input_param name="table_name" jt="12" type="varchar" />
			<input_param name="column_name" jt="12" type="varchar" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="dropgeometrycolumn" id="Procedure_3087a60" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret text;
BEGIN
	SELECT public.DropGeometryColumn('',$1,$2,$3) into ret;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: schema_name, table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
			<input_param name="schema_name" jt="12" type="varchar" />
			<input_param name="table_name" jt="12" type="varchar" />
			<input_param name="column_name" jt="12" type="varchar" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="dropgeometrycolumn" id="Procedure_3f491b2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropgeometrycolumn(table_name character varying, column_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret text;
BEGIN
	SELECT public.DropGeometryColumn('','',$1,$2) into ret;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
			<input_param name="table_name" jt="12" type="varchar" />
			<input_param name="column_name" jt="12" type="varchar" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="dropgeometrytable" id="Procedure_16cae4d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	real_schema name;
BEGIN
	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;
	-- TODO: Should we warn if table doesn't exist probably instead just saying dropped
	-- Remove table
	EXECUTE 'DROP TABLE IF EXISTS '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' RESTRICT';
	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.]]></comment>
			<input_param name="catalog_name" jt="12" type="varchar" />
			<input_param name="schema_name" jt="12" type="varchar" />
			<input_param name="table_name" jt="12" type="varchar" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="dropgeometrytable" id="Procedure_379fc27" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropgeometrytable(schema_name character varying, table_name character varying)
 RETURNS text
 LANGUAGE sql
 STRICT
AS $function$ SELECT public.DropGeometryTable('',$1,$2) $function$
]]></string>
			<comment><![CDATA[args: schema_name, table_name - Drops a table and all its references in geometry_columns.]]></comment>
			<input_param name="schema_name" jt="12" type="varchar" />
			<input_param name="table_name" jt="12" type="varchar" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="dropgeometrytable" id="Procedure_3da5458" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropgeometrytable(table_name character varying)
 RETURNS text
 LANGUAGE sql
 STRICT
AS $function$ SELECT public.DropGeometryTable('','',$1) $function$
]]></string>
			<comment><![CDATA[args: table_name - Drops a table and all its references in geometry_columns.]]></comment>
			<input_param name="table_name" jt="12" type="varchar" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="dropoverviewconstraints" id="Procedure_1b0c1f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		schema name;
		sql text;
		rtn boolean;
	BEGIN
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;
		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;
		rtn :=  public._drop_overview_constraint(schema, $2, $3);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to drop the overview constraint .  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
]]></string>
			<comment><![CDATA[args: ovschema, ovtable, ovcolumn - Untag a raster column from being an overview of another.]]></comment>
			<input_param name="ovschema" jt="12" type="name" />
			<input_param name="ovtable" jt="12" type="name" />
			<input_param name="ovcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="dropoverviewconstraints" id="Procedure_4e5de60" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropoverviewconstraints(ovtable name, ovcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT  public.DropOverviewConstraints('', $1, $2) $function$
]]></string>
			<comment><![CDATA[args: ovtable, ovcolumn - Untag a raster column from being an overview of another.]]></comment>
			<input_param name="ovtable" jt="12" type="name" />
			<input_param name="ovcolumn" jt="12" type="name" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="droprasterconstraints" id="Procedure_1b84067" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		max int;
		x int;
		schema name;
		sql text;
		kw text;
		rtn boolean;
		cnt int;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be dropped.  Doing nothing';
			RETURN TRUE;
		END IF;
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;
		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;
		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));
			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Dropping SRID constraint';
						rtn :=  public._drop_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn :=  public._drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn :=  public._drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Dropping alignment constraint';
						rtn :=  public._drop_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						rtn :=  public._drop_raster_constraint_regular_blocking(schema, $2, $3);
						RAISE NOTICE 'Dropping coverage tile constraint required for regular blocking';
						rtn :=  public._drop_raster_constraint_coverage_tile(schema, $2, $3);
						IF rtn IS NOT FALSE THEN
							RAISE NOTICE 'Dropping spatially unique constraint required for regular blocking';
							rtn :=  public._drop_raster_constraint_spatially_unique(schema, $2, $3);
						END IF;
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Dropping number of bands constraint';
						rtn :=  public._drop_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Dropping pixel type constraint';
						rtn :=  public._drop_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Dropping nodata value constraint';
						rtn :=  public._drop_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Dropping out-of-database constraint';
						rtn :=  public._drop_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Dropping maximum extent constraint';
						rtn :=  public._drop_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;
			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to drop constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;
		END LOOP kwloop;
		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be dropped.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, constraints - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="constraints" jt="2003" type="_text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="droprasterconstraints" id="Procedure_5849ce" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT  public.DropRasterConstraints('', $1, $2, VARIADIC $3) $function$
]]></string>
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="constraints" jt="2003" type="_text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="droprasterconstraints" id="Procedure_d0e526" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT true, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;
		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;
		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;
		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;
		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;
		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;
		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;
		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;
		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;
		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;
		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;
		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;
		RETURN DropRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=false, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
			<input_param name="rastschema" jt="12" type="name" />
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="srid" jt="-7" type="bool" />
			<input_param name="scale_x" jt="-7" type="bool" />
			<input_param name="scale_y" jt="-7" type="bool" />
			<input_param name="blocksize_x" jt="-7" type="bool" />
			<input_param name="blocksize_y" jt="-7" type="bool" />
			<input_param name="same_alignment" jt="-7" type="bool" />
			<input_param name="regular_blocking" jt="-7" type="bool" />
			<input_param name="num_bands" jt="-7" type="bool" />
			<input_param name="pixel_types" jt="-7" type="bool" />
			<input_param name="nodata_values" jt="-7" type="bool" />
			<input_param name="out_db" jt="-7" type="bool" />
			<input_param name="extent" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="droprasterconstraints" id="Procedure_5eb3a4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.droprasterconstraints(rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT true, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT DropRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) $function$
]]></string>
			<comment><![CDATA[args: rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
			<input_param name="rasttable" jt="12" type="name" />
			<input_param name="rastcolumn" jt="12" type="name" />
			<input_param name="srid" jt="-7" type="bool" />
			<input_param name="scale_x" jt="-7" type="bool" />
			<input_param name="scale_y" jt="-7" type="bool" />
			<input_param name="blocksize_x" jt="-7" type="bool" />
			<input_param name="blocksize_y" jt="-7" type="bool" />
			<input_param name="same_alignment" jt="-7" type="bool" />
			<input_param name="regular_blocking" jt="-7" type="bool" />
			<input_param name="num_bands" jt="-7" type="bool" />
			<input_param name="pixel_types" jt="-7" type="bool" />
			<input_param name="nodata_values" jt="-7" type="bool" />
			<input_param name="out_db" jt="-7" type="bool" />
			<input_param name="extent" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="enablelongtransactions" id="Procedure_53da914" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.enablelongtransactions()
 RETURNS text
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	"query" text;
	exists bool;
	rec RECORD;
BEGIN
	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table'
	LOOP
		exists = 't';
	END LOOP;
	IF NOT exists
	THEN
		"query" = 'CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)';
		EXECUTE "query";
	END IF;
	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		exists = 't';
	END LOOP;
	IF NOT exists THEN
		"query" = 'CREATE VIEW authorized_tables AS ' ||
			'SELECT ' ||
			'n.nspname as schema, ' ||
			'c.relname as table, trim(' ||
			quote_literal(chr(92) || '000') ||
			' from t.tgargs) as id_column ' ||
			'FROM pg_trigger t, pg_class c, pg_proc p ' ||
			', pg_namespace n ' ||
			'WHERE p.proname = ' || quote_literal('checkauthtrigger') ||
			' AND c.relnamespace = n.oid' ||
			' AND t.tgfoid = p.oid and t.tgrelid = c.oid';
		EXECUTE "query";
	END IF;
	RETURN 'Long transactions support enabled';
END;
$function$
]]></string>
			<comment><![CDATA[Enable long transaction support. This function creates the required metadata tables, needs to be called once before using the other functions in this section. Calling it twice is harmless.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="equals" id="Procedure_21a4a95" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.equals(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_Equals$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="find_srid" id="Procedure_1484892" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.find_srid(character varying, character varying, character varying)
 RETURNS integer
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
DECLARE
	schem varchar =  $1;
	tabl varchar = $2;
	sr int4;
BEGIN
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and strpos(tabl,'.') > 0 ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	END IF;
	select SRID into sr from public.geometry_columns where (f_table_schema = schem or schem = '') and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - could not find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase mismatch?';
	END IF;
	return sr;
END;
$function$
]]></string>
			<comment><![CDATA[args: a_schema_name, a_table_name, a_geomfield_name - The syntax is find_srid(a_db_schema, a_table, a_column) and the function returns the integer SRID of the specified column by searching through the GEOMETRY_COLUMNS table.]]></comment>
			<input_param name="$1" jt="12" type="varchar" />
			<input_param name="$2" jt="12" type="varchar" />
			<input_param name="$3" jt="12" type="varchar" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="geog_brin_inclusion_add_value" id="Procedure_1ab8b0c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geog_brin_inclusion_add_value(internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$geog_brin_inclusion_add_value$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="internal" />
			<input_param name="$3" jt="1111" type="internal" />
			<input_param name="$4" jt="1111" type="internal" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geography" id="Procedure_1617fd6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography(geography, integer, boolean)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_enforce_typmod$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="geography" id="Procedure_11227c9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography(bytea)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_from_binary$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="geography" id="Procedure_d99a80" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography(geometry)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_from_geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="geography_analyze" id="Procedure_33f8af1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_analyze(internal)
 RETURNS boolean
 LANGUAGE c
 STRICT
AS '$libdir/postgis-2.4', $function$gserialized_analyze_nd$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geography_cmp" id="Procedure_308b3a0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_cmp(geography, geography)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_cmp$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="geography_distance_knn" id="Procedure_f42774" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_distance_knn(geography, geography)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$geography_distance_knn$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="geography_eq" id="Procedure_521c9b7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_eq(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_eq$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geography_ge" id="Procedure_4bce045" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_ge(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_ge$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geography_gist_compress" id="Procedure_1572d44" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_compress(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$gserialized_gist_compress$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geography_gist_consistent" id="Procedure_bde68f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_consistent(internal, geography, integer)
 RETURNS boolean
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$gserialized_gist_consistent$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geography_gist_decompress" id="Procedure_2c041fd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_decompress(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$gserialized_gist_decompress$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geography_gist_distance" id="Procedure_4ddec2e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_distance(internal, geography, integer)
 RETURNS double precision
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$gserialized_gist_geog_distance$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="geography_gist_penalty" id="Procedure_dd4ad8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$gserialized_gist_penalty$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="internal" />
			<input_param name="$3" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geography_gist_picksplit" id="Procedure_29723af" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$gserialized_gist_picksplit$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geography_gist_same" id="Procedure_1b1c3f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_same(box2d, box2d, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$gserialized_gist_same$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2d" />
			<input_param name="$2" jt="1111" type="box2d" />
			<input_param name="$3" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geography_gist_union" id="Procedure_3f95500" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_union(bytea, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$gserialized_gist_union$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geography_gt" id="Procedure_3a06657" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gt(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_gt$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geography_in" id="Procedure_98995" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_in(cstring, oid, integer)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_in$function$
]]></string>
			<input_param name="$1" jt="1111" type="cstring" />
			<input_param name="$2" jt="-5" type="oid" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="geography_le" id="Procedure_aa01e8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_le(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_le$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geography_lt" id="Procedure_366a82" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_lt(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_lt$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geography_out" id="Procedure_1b3610" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_out(geography)
 RETURNS cstring
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_out$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="geography_overlaps" id="Procedure_54d96b9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_overlaps(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_overlaps$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geography_recv" id="Procedure_3c3ac1a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_recv(internal, oid, integer)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_recv$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="-5" type="oid" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="geography_send" id="Procedure_529cdcd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_send(geography)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_send$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="geography_typmod_in" id="Procedure_36b86f8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_typmod_in(cstring[])
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_typmod_in$function$
]]></string>
			<input_param name="$1" jt="2003" type="_cstring" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="geography_typmod_out" id="Procedure_56938c8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_typmod_out(integer)
 RETURNS cstring
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$postgis_typmod_out$function$
]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="geom2d_brin_inclusion_add_value" id="Procedure_434862f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geom2d_brin_inclusion_add_value(internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$geom2d_brin_inclusion_add_value$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="internal" />
			<input_param name="$3" jt="1111" type="internal" />
			<input_param name="$4" jt="1111" type="internal" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geom3d_brin_inclusion_add_value" id="Procedure_198a80f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geom3d_brin_inclusion_add_value(internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$geom3d_brin_inclusion_add_value$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="internal" />
			<input_param name="$3" jt="1111" type="internal" />
			<input_param name="$4" jt="1111" type="internal" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geom4d_brin_inclusion_add_value" id="Procedure_4d2b67a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geom4d_brin_inclusion_add_value(internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$geom4d_brin_inclusion_add_value$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="internal" />
			<input_param name="$3" jt="1111" type="internal" />
			<input_param name="$4" jt="1111" type="internal" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry" id="Procedure_5643a41" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry(geometry, integer, boolean)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geometry_enforce_typmod$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geometry" id="Procedure_34e89a5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry(point)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$point_to_geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="point" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geometry" id="Procedure_257225d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry(path)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$path_to_geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="path" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geometry" id="Procedure_b3ea11" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry(polygon)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$polygon_to_geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="polygon" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geometry" id="Procedure_3a9e89c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry(box2d)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX2D_to_LWGEOM$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2d" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geometry" id="Procedure_3eec790" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry(box3d)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_to_LWGEOM$function$
]]></string>
			<input_param name="$1" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geometry" id="Procedure_2dc65e1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$parse_WKT_lwgeom$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geometry" id="Procedure_19570f8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_from_bytea$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geometry" id="Procedure_2d041d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry(geography)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geometry_from_geography$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geometry_above" id="Procedure_5273aa9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_above(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_above_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_analyze" id="Procedure_441b131" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_analyze(internal)
 RETURNS boolean
 LANGUAGE c
 STRICT
AS '$libdir/postgis-2.4', $function$gserialized_analyze_nd$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_below" id="Procedure_4e54936" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_below(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_below_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_cmp" id="Procedure_2689675" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_cmp(geom1 geometry, geom2 geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$lwgeom_cmp$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="geometry_contained_by_raster" id="Procedure_5b2168e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_contained_by_raster(geometry, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1 OPERATOR(public.@) $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_contains" id="Procedure_551b978" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_contains(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_contains_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_distance_box" id="Procedure_34b5c68" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_distance_box(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_distance_box_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="geometry_distance_centroid" id="Procedure_456d519" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_distance_centroid(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$distance$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="geometry_distance_centroid_nd" id="Procedure_4d21ad9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_distance_centroid_nd(geometry, geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_distance_nd$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="geometry_distance_cpa" id="Procedure_e9b0bd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_distance_cpa(geometry, geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_DistanceCPA$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="geometry_eq" id="Procedure_90ef47" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_eq(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$lwgeom_eq$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_ge" id="Procedure_35e0bc9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_ge(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$lwgeom_ge$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_gist_compress_2d" id="Procedure_2788387" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_compress_2d(internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_compress_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gist_compress_nd" id="Procedure_10ba4d7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_compress_nd(internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_compress$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gist_consistent_2d" id="Procedure_3ae201e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_consistent_2d(internal, geometry, integer)
 RETURNS boolean
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_consistent_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_gist_consistent_nd" id="Procedure_3e8846d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_consistent_nd(internal, geometry, integer)
 RETURNS boolean
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_consistent$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_gist_decompress_2d" id="Procedure_5bbdccc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_decompress_2d(internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_decompress_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gist_decompress_nd" id="Procedure_1f66e6c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_decompress_nd(internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_decompress$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gist_distance_2d" id="Procedure_4b52543" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_distance_2d(internal, geometry, integer)
 RETURNS double precision
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_distance_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="geometry_gist_distance_nd" id="Procedure_36bf806" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_distance_nd(internal, geometry, integer)
 RETURNS double precision
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_distance$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="geometry_gist_penalty_2d" id="Procedure_4221f51" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_penalty_2d(internal, internal, internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_penalty_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="internal" />
			<input_param name="$3" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gist_penalty_nd" id="Procedure_15de638" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_penalty_nd(internal, internal, internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_penalty$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="internal" />
			<input_param name="$3" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gist_picksplit_2d" id="Procedure_7c7a76" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_picksplit_2d(internal, internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_picksplit_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gist_picksplit_nd" id="Procedure_2aad80" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_picksplit_nd(internal, internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_picksplit$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gist_same_2d" id="Procedure_28590a8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_same_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gist_same_nd" id="Procedure_23d562" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_same_nd(geometry, geometry, internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_same$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gist_union_2d" id="Procedure_1dfbed6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_union_2d(bytea, internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_union_2d$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gist_union_nd" id="Procedure_a015ed" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_union_nd(bytea, internal)
 RETURNS internal
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_union$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="geometry_gt" id="Procedure_2b6ff82" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gt(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$lwgeom_gt$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_in" id="Procedure_3324bc4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_in(cstring)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_in$function$
]]></string>
			<input_param name="$1" jt="1111" type="cstring" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geometry_le" id="Procedure_293b68e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_le(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$lwgeom_le$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_left" id="Procedure_5390d81" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_left(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_left_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_lt" id="Procedure_d0e7d4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_lt(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$lwgeom_lt$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_out" id="Procedure_753ecb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_out(geometry)
 RETURNS cstring
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_out$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="geometry_overabove" id="Procedure_3e6d162" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overabove(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_overabove_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_overbelow" id="Procedure_1c12c22" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overbelow(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_overbelow_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_overlaps" id="Procedure_2885329" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overlaps(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_overlaps_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_overlaps_nd" id="Procedure_1eaf3ea" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overlaps_nd(geometry, geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_overlaps$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_overleft" id="Procedure_32b5bb3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overleft(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_overleft_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_overright" id="Procedure_174af01" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overright(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_overright_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_raster_contain" id="Procedure_400cda9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_raster_contain(geometry, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1 OPERATOR(public.~) $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_raster_overlap" id="Procedure_11d3b24" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_raster_overlap(geometry, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1 OPERATOR(public.&&) $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_recv" id="Procedure_599c89d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_recv(internal)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_recv$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geometry_right" id="Procedure_59fad04" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_right(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_right_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_same" id="Procedure_1af447e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_same(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_same_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometry_send" id="Procedure_15a022" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_send(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_send$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="geometry_typmod_in" id="Procedure_440a9e5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_typmod_in(cstring[])
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geometry_typmod_in$function$
]]></string>
			<input_param name="$1" jt="2003" type="_cstring" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="geometry_typmod_out" id="Procedure_3b90f4d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_typmod_out(integer)
 RETURNS cstring
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$postgis_typmod_out$function$
]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="geometry_within" id="Procedure_33d5cc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_within(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_within_2d$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="geometrytype" id="Procedure_4439bd5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometrytype(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_getTYPE$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the type of the geometry as a string. Eg: LINESTRING, POLYGON, MULTIPOINT, etc.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="geometrytype" id="Procedure_2ae85ee" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometrytype(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_getTYPE$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="geomfromewkb" id="Procedure_371dd0f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geomfromewkb(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOMFromEWKB$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="geomfromewkt" id="Procedure_3a1fc0e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geomfromewkt(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$parse_WKT_lwgeom$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="get_proj4_from_srid" id="Procedure_46adf51" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.get_proj4_from_srid(integer)
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
BEGIN
	RETURN proj4text::text FROM public.spatial_ref_sys WHERE srid= $1;
END;
$function$
]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="gettransactionid" id="Procedure_5e272b1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gettransactionid()
 RETURNS xid
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$getTransactionID$function$
]]></string>
			<result_param name="returnValue" jt="1111" type="xid" />
		</procedure>
		<procedure name="gidx_in" id="Procedure_11d4486" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gidx_in(cstring)
 RETURNS gidx
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gidx_in$function$
]]></string>
			<input_param name="$1" jt="1111" type="cstring" />
			<result_param name="returnValue" jt="1111" type="gidx" />
		</procedure>
		<procedure name="gidx_out" id="Procedure_21d1c91" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gidx_out(gidx)
 RETURNS cstring
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$gidx_out$function$
]]></string>
			<input_param name="$1" jt="1111" type="gidx" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="gserialized_gist_joinsel_2d" id="Procedure_52f26ec" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gserialized_gist_joinsel_2d(internal, oid, internal, smallint)
 RETURNS double precision
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_joinsel_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="-5" type="oid" />
			<input_param name="$3" jt="1111" type="internal" />
			<input_param name="$4" jt="5" type="int2" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="gserialized_gist_joinsel_nd" id="Procedure_1408815" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gserialized_gist_joinsel_nd(internal, oid, internal, smallint)
 RETURNS double precision
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_joinsel_nd$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="-5" type="oid" />
			<input_param name="$3" jt="1111" type="internal" />
			<input_param name="$4" jt="5" type="int2" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="gserialized_gist_sel_2d" id="Procedure_33d9964" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gserialized_gist_sel_2d(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_sel_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="-5" type="oid" />
			<input_param name="$3" jt="1111" type="internal" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="gserialized_gist_sel_nd" id="Procedure_1fd5b42" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gserialized_gist_sel_nd(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$gserialized_gist_sel_nd$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="-5" type="oid" />
			<input_param name="$3" jt="1111" type="internal" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="is_contained_2d" id="Procedure_5114d23" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.is_contained_2d(box2df, geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_within_box2df_geom_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2df" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="is_contained_2d" id="Procedure_b6ca35" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.is_contained_2d(box2df, box2df)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_contains_box2df_box2df_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2df" />
			<input_param name="$2" jt="1111" type="box2df" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="is_contained_2d" id="Procedure_3908e87" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.is_contained_2d(geometry, box2df)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT $2 OPERATOR(public.~) $1;$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="box2df" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="levenshtein" id="Procedure_3218de9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.levenshtein(text, text)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/fuzzystrmatch', $function$levenshtein$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="levenshtein" id="Procedure_533e701" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.levenshtein(text, text, integer, integer, integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/fuzzystrmatch', $function$levenshtein_with_costs$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<input_param name="$5" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="levenshtein_less_equal" id="Procedure_35a79f5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.levenshtein_less_equal(text, text, integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/fuzzystrmatch', $function$levenshtein_less_equal$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="levenshtein_less_equal" id="Procedure_35d0236" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.levenshtein_less_equal(text, text, integer, integer, integer, integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/fuzzystrmatch', $function$levenshtein_less_equal_with_costs$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<input_param name="$5" jt="4" type="int4" />
			<input_param name="$6" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="lockrow" id="Procedure_2551039" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.lockrow(text, text, text, text, timestamp without time zone)
 RETURNS integer
 LANGUAGE plpgsql
 STRICT
AS $function$ 
DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;
	
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;
	EXECUTE 'DELETE FROM authorization_table WHERE expires < now()'; 
	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;
	-- RAISE NOTICE 'toid: %', mytoid;
	FOR myrec IN SELECT * FROM authorization_table WHERE 
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;
	EXECUTE 'INSERT INTO authorization_table VALUES ('||
		quote_literal(mytoid::text)||','||quote_literal(myrid)||
		','||quote_literal(expires::text)||
		','||quote_literal(authid) ||')';
	GET DIAGNOSTICS ret = ROW_COUNT;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: a_schema_name, a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<input_param name="$5" jt="93" type="timestamp" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="lockrow" id="Procedure_42127f6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.lockrow(text, text, text, text)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT LockRow($1, $2, $3, $4, now()::timestamp+'1:00'); $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="lockrow" id="Procedure_3a5c2d1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.lockrow(text, text, text)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT LockRow(current_schema(), $1, $2, $3, now()::timestamp+'1:00'); $function$
]]></string>
			<comment><![CDATA[args: a_table_name, a_row_key, an_auth_token - Set lock/authorization for specific row in table]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="lockrow" id="Procedure_2e3af27" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.lockrow(text, text, text, timestamp without time zone)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT LockRow(current_schema(), $1, $2, $3, $4); $function$
]]></string>
			<comment><![CDATA[args: a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="93" type="timestamp" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="longtransactionsenabled" id="Procedure_b72f57" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.longtransactionsenabled()
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		return 't';
	END LOOP;
	return 'f';
END;
$function$
]]></string>
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="metaphone" id="Procedure_5dc524e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.metaphone(text, integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/fuzzystrmatch', $function$metaphone$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="overlaps_2d" id="Procedure_22f0772" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.overlaps_2d(box2df, geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_overlaps_box2df_geom_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2df" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps_2d" id="Procedure_297803b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.overlaps_2d(box2df, box2df)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_contains_box2df_box2df_2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2df" />
			<input_param name="$2" jt="1111" type="box2df" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps_2d" id="Procedure_34c0571" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.overlaps_2d(geometry, box2df)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT $2 OPERATOR(public.&&) $1;$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="box2df" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps_geog" id="Procedure_f33c20" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.overlaps_geog(gidx, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_gidx_geog_overlaps$function$
]]></string>
			<input_param name="$1" jt="1111" type="gidx" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps_geog" id="Procedure_504c646" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.overlaps_geog(gidx, gidx)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_gidx_gidx_overlaps$function$
]]></string>
			<input_param name="$1" jt="1111" type="gidx" />
			<input_param name="$2" jt="1111" type="gidx" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps_geog" id="Procedure_502d858" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.overlaps_geog(geography, gidx)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT $2 OPERATOR(public.&&) $1;$function$
]]></string>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="gidx" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps_nd" id="Procedure_1165a19" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.overlaps_nd(gidx, geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_gidx_geom_overlaps$function$
]]></string>
			<input_param name="$1" jt="1111" type="gidx" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps_nd" id="Procedure_2dbc6cb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.overlaps_nd(gidx, gidx)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.4', $function$gserialized_gidx_gidx_overlaps$function$
]]></string>
			<input_param name="$1" jt="1111" type="gidx" />
			<input_param name="$2" jt="1111" type="gidx" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps_nd" id="Procedure_441aca2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.overlaps_nd(geometry, gidx)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT $2 OPERATOR(public.&&&) $1;$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="gidx" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="path" id="Procedure_4a4be52" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.path(geometry)
 RETURNS path
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geometry_to_path$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="path" />
		</procedure>
		<procedure name="pgis_abs_in" id="Procedure_3c1bfba" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_abs_in(cstring)
 RETURNS pgis_abs
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$pgis_abs_in$function$
]]></string>
			<input_param name="$1" jt="1111" type="cstring" />
			<result_param name="returnValue" jt="1111" type="pgis_abs" />
		</procedure>
		<procedure name="pgis_abs_out" id="Procedure_43256db" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_abs_out(pgis_abs)
 RETURNS cstring
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$pgis_abs_out$function$
]]></string>
			<input_param name="$1" jt="1111" type="pgis_abs" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="pgis_asgeobuf_finalfn" id="Procedure_55423fb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_asgeobuf_finalfn(internal)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_asgeobuf_finalfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgis_asgeobuf_transfn" id="Procedure_587474a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_asgeobuf_transfn(internal, anyelement)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_asgeobuf_transfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="anyelement" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="pgis_asgeobuf_transfn" id="Procedure_43c98a9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_asgeobuf_transfn(internal, anyelement, text)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_asgeobuf_transfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="anyelement" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="pgis_asmvt_finalfn" id="Procedure_5cc31ac" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_asmvt_finalfn(internal)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_asmvt_finalfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgis_asmvt_transfn" id="Procedure_1df9bf6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_asmvt_transfn(internal, anyelement)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_asmvt_transfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="anyelement" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="pgis_asmvt_transfn" id="Procedure_442d0f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_asmvt_transfn(internal, anyelement, text)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_asmvt_transfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="anyelement" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="pgis_asmvt_transfn" id="Procedure_30ac45c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_asmvt_transfn(internal, anyelement, text, integer)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_asmvt_transfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="anyelement" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="pgis_asmvt_transfn" id="Procedure_50cb410" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_asmvt_transfn(internal, anyelement, text, integer, text)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_asmvt_transfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="1111" type="anyelement" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="4" type="int4" />
			<input_param name="$5" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="pgis_geometry_accum_finalfn" id="Procedure_503b497" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_accum_finalfn(pgis_abs)
 RETURNS geometry[]
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_geometry_accum_finalfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="pgis_abs" />
			<result_param name="returnValue" jt="2003" type="_geometry" />
		</procedure>
		<procedure name="pgis_geometry_accum_transfn" id="Procedure_2cea084" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_accum_transfn(pgis_abs, geometry)
 RETURNS pgis_abs
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_geometry_accum_transfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="pgis_abs" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="pgis_abs" />
		</procedure>
		<procedure name="pgis_geometry_accum_transfn" id="Procedure_58198f6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_accum_transfn(pgis_abs, geometry, double precision)
 RETURNS pgis_abs
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_geometry_accum_transfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="pgis_abs" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="pgis_abs" />
		</procedure>
		<procedure name="pgis_geometry_accum_transfn" id="Procedure_3ec5f95" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_accum_transfn(pgis_abs, geometry, double precision, integer)
 RETURNS pgis_abs
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_geometry_accum_transfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="pgis_abs" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="pgis_abs" />
		</procedure>
		<procedure name="pgis_geometry_clusterintersecting_finalfn" id="Procedure_58c8ef8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_clusterintersecting_finalfn(pgis_abs)
 RETURNS geometry[]
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_geometry_clusterintersecting_finalfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="pgis_abs" />
			<result_param name="returnValue" jt="2003" type="_geometry" />
		</procedure>
		<procedure name="pgis_geometry_clusterwithin_finalfn" id="Procedure_f94cce" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_clusterwithin_finalfn(pgis_abs)
 RETURNS geometry[]
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_geometry_clusterwithin_finalfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="pgis_abs" />
			<result_param name="returnValue" jt="2003" type="_geometry" />
		</procedure>
		<procedure name="pgis_geometry_collect_finalfn" id="Procedure_460c05a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_collect_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_geometry_collect_finalfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="pgis_abs" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="pgis_geometry_makeline_finalfn" id="Procedure_2592c99" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_makeline_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_geometry_makeline_finalfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="pgis_abs" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="pgis_geometry_polygonize_finalfn" id="Procedure_3014976" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_polygonize_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_geometry_polygonize_finalfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="pgis_abs" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="pgis_geometry_union_finalfn" id="Procedure_1368186" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_union_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
 PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$pgis_geometry_union_finalfn$function$
]]></string>
			<input_param name="$1" jt="1111" type="pgis_abs" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="point" id="Procedure_3cd152b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.point(geometry)
 RETURNS point
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geometry_to_point$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="point" />
		</procedure>
		<procedure name="polygon" id="Procedure_239cc7d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.polygon(geometry)
 RETURNS polygon
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geometry_to_polygon$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="polygon" />
		</procedure>
		<procedure name="populate_geometry_columns" id="Procedure_323c4ca" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.populate_geometry_columns(use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
BEGIN
	SELECT count(*) INTO oldcount FROM public.geometry_columns;
	inserted := 0;
	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE c.relkind IN('r','v','f')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' ;
	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';
	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind IN( 'r', 'f')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns'
	LOOP
		inserted := inserted + public.populate_geometry_columns(gcs.oid, use_typmod);
	END LOOP;
	IF oldcount > inserted THEN
	    stale = oldcount-inserted;
	ELSE
	    stale = 0;
	END IF;
	RETURN 'probed:' ||probed|| ' inserted:'||inserted;
END
$function$
]]></string>
			<comment><![CDATA[args: use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false]]></comment>
			<input_param name="use_typmod" jt="-7" type="bool" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="populate_geometry_columns" id="Procedure_348728d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.populate_geometry_columns(tbl_oid oid, use_typmod boolean DEFAULT true)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
	gcs         RECORD;
	gc          RECORD;
	gc_old      RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
	inserted    integer;
	constraint_successful boolean := false;
BEGIN
	inserted := 0;
	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind IN('r', 'f')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP
        RAISE DEBUG 'Processing column %.%.%', gcs.nspname, gcs.relname, gcs.attname;
        gc_is_valid := true;
        -- Find the srid, coord_dimension, and type of current geometry
        -- in geometry_columns -- which is now a view
        SELECT type, srid, coord_dimension INTO gc_old
            FROM geometry_columns
            WHERE f_table_schema = gcs.nspname AND f_table_name = gcs.relname AND f_geometry_column = gcs.attname;
        IF upper(gc_old.type) = 'GEOMETRY' THEN
        -- This is an unconstrained geometry we need to do something
        -- We need to figure out what to set the type by inspecting the data
            EXECUTE 'SELECT public.ST_srid(' || quote_ident(gcs.attname) || ') As srid, GeometryType(' || quote_ident(gcs.attname) || ') As type, public.ST_NDims(' || quote_ident(gcs.attname) || ') As dims ' ||
                     ' FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) ||
                     ' WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1;'
                INTO gc;
            IF gc IS NULL THEN -- there is no data so we can not determine geometry type
            	RAISE WARNING 'No data in table %.%, so no information to determine geometry type and srid', gcs.nspname, gcs.relname;
            	RETURN 0;
            END IF;
            gsrid := gc.srid; gtype := gc.type; gndims := gc.dims;
            IF use_typmod THEN
                BEGIN
                    EXECUTE 'ALTER TABLE ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || ' ALTER COLUMN ' || quote_ident(gcs.attname) ||
                        ' TYPE geometry(' || postgis_type_name(gtype, gndims, true) || ', ' || gsrid::text  || ') ';
                    inserted := inserted + 1;
                EXCEPTION
                        WHEN invalid_parameter_value OR feature_not_supported THEN
                        RAISE WARNING 'Could not convert ''%'' in ''%.%'' to use typmod with srid %, type %: %', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), gsrid, postgis_type_name(gtype, gndims, true), SQLERRM;
                            gc_is_valid := false;
                END;
            ELSE
                -- Try to apply srid check to column
            	constraint_successful = false;
                IF (gsrid > 0 AND postgis_constraint_srid(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) ||
                                 ' ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) ||
                                 ' CHECK (ST_srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
                            gc_is_valid := false;
                    END;
                END IF;
                -- Try to apply ndims check to column
                IF (gndims IS NOT NULL AND postgis_constraint_dims(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                                 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
                                 CHECK (st_ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
                            gc_is_valid := false;
                    END;
                END IF;
                -- Try to apply geometrytype check to column
                IF (gtype IS NOT NULL AND postgis_constraint_type(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                        ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
                        CHECK (geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            -- No geometry check can be applied. This column contains a number of geometry types.
                            RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
                    END;
                END IF;
                 --only count if we were successful in applying at least one constraint
                IF constraint_successful THEN
                	inserted := inserted + 1;
                END IF;
            END IF;
	    END IF;
	END LOOP;
	RETURN inserted;
END
$function$
]]></string>
			<comment><![CDATA[args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false]]></comment>
			<input_param name="tbl_oid" jt="-5" type="oid" />
			<input_param name="use_typmod" jt="-7" type="bool" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="postgis_addbbox" id="Procedure_3673d6e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_addbbox(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_addBBOX$function$
]]></string>
			<comment><![CDATA[args: geomA - Add bounding box to the geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="postgis_cache_bbox" id="Procedure_51cc6f0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_cache_bbox()
 RETURNS trigger
 LANGUAGE c
AS '$libdir/postgis-2.4', $function$cache_bbox$function$
]]></string>
			<result_param name="returnValue" jt="1111" type="trigger" />
		</procedure>
		<procedure name="postgis_constraint_dims" id="Procedure_5ac2d77" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text)
 RETURNS integer
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$
SELECT  replace(split_part(s.consrc, ' = ', 2), ')', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %';
$function$
]]></string>
			<input_param name="geomschema" jt="12" type="text" />
			<input_param name="geomtable" jt="12" type="text" />
			<input_param name="geomcolumn" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="postgis_constraint_srid" id="Procedure_515b9e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text)
 RETURNS integer
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$
SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %';
$function$
]]></string>
			<input_param name="geomschema" jt="12" type="text" />
			<input_param name="geomtable" jt="12" type="text" />
			<input_param name="geomcolumn" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="postgis_constraint_type" id="Procedure_2042be5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_constraint_type(geomschema text, geomtable text, geomcolumn text)
 RETURNS character varying
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$
SELECT  replace(split_part(s.consrc, '''', 2), ')', '')::varchar
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %';
$function$
]]></string>
			<input_param name="geomschema" jt="12" type="text" />
			<input_param name="geomtable" jt="12" type="text" />
			<input_param name="geomcolumn" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="varchar" />
		</procedure>
		<procedure name="postgis_dropbbox" id="Procedure_36758e5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_dropbbox(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_dropBBOX$function$
]]></string>
			<comment><![CDATA[args: geomA - Drop the bounding box cache from the geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="postgis_full_version" id="Procedure_51984" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_full_version()
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
DECLARE
	libver text;
	svnver text;
	projver text;
	geosver text;
	sfcgalver text;
	cgalver text;
	gdalver text;
	libxmlver text;
	liblwgeomver text;
	dbproc text;
	relproc text;
	fullver text;
	rast_lib_ver text;
	rast_scr_ver text;
	topo_scr_ver text;
	json_lib_ver text;
	protobuf_lib_ver text;
	sfcgal_lib_ver text;
	sfcgal_scr_ver text;
	pgsql_scr_ver text;
	pgsql_ver text;
BEGIN
	SELECT public.postgis_lib_version() INTO libver;
	SELECT public.postgis_proj_version() INTO projver;
	SELECT public.postgis_geos_version() INTO geosver;
	SELECT public.postgis_libjson_version() INTO json_lib_ver;
	SELECT public.postgis_libprotobuf_version() INTO protobuf_lib_ver;
	SELECT public._postgis_scripts_pgsql_version() INTO pgsql_scr_ver;
	SELECT public._postgis_pgsql_version() INTO pgsql_ver;
	BEGIN
		SELECT public.postgis_gdal_version() INTO gdalver;
	EXCEPTION
		WHEN undefined_function THEN
			gdalver := NULL;
			RAISE NOTICE 'Function postgis_gdal_version() not found.  Is raster support enabled and rtpostgis.sql installed?';
	END;
	BEGIN
		SELECT public.postgis_sfcgal_version() INTO sfcgalver;
    BEGIN
      SELECT public.postgis_sfcgal_scripts_installed() INTO sfcgal_scr_ver;
    EXCEPTION
      WHEN undefined_function THEN
        sfcgal_scr_ver := 'missing';
    END;
	EXCEPTION
		WHEN undefined_function THEN
			sfcgalver := NULL;
	END;
	SELECT public.postgis_liblwgeom_version() INTO liblwgeomver;
	SELECT public.postgis_libxml_version() INTO libxmlver;
	SELECT public.postgis_scripts_installed() INTO dbproc;
	SELECT public.postgis_scripts_released() INTO relproc;
	select public.postgis_svn_version() INTO svnver;
	BEGIN
		SELECT topology.postgis_topology_scripts_installed() INTO topo_scr_ver;
	EXCEPTION
		WHEN undefined_function OR invalid_schema_name THEN
			topo_scr_ver := NULL;
			RAISE DEBUG 'Function postgis_topology_scripts_installed() not found. Is topology support enabled and topology.sql installed?';
		WHEN insufficient_privilege THEN
			RAISE NOTICE 'Topology support cannot be inspected. Is current user granted USAGE on schema "topology" ?';
		WHEN OTHERS THEN
			RAISE NOTICE 'Function postgis_topology_scripts_installed() could not be called: % (%)', SQLERRM, SQLSTATE;
	END;
	BEGIN
		SELECT postgis_raster_scripts_installed() INTO rast_scr_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_scr_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_scripts_installed() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;
	BEGIN
		SELECT public.postgis_raster_lib_version() INTO rast_lib_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_lib_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_lib_version() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;
	fullver = 'POSTGIS="' || libver;
	IF  svnver IS NOT NULL THEN
		fullver = fullver || ' r' || svnver;
	END IF;
	fullver = fullver || '"';
	IF liblwgeomver != relproc THEN
		fullver = fullver || ' (liblwgeom version mismatch: "' || liblwgeomver || '")';
	END IF;
	fullver = fullver || ' PGSQL="' || pgsql_scr_ver || '"';
	IF pgsql_scr_ver != pgsql_ver THEN
		fullver = fullver || ' (procs need upgrade for use with "' || pgsql_ver || '")';
	END IF;
	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
	END IF;
	IF  sfcgalver IS NOT NULL THEN
		fullver = fullver || ' SFCGAL="' || sfcgalver || '"';
	END IF;
	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
	END IF;
	IF  gdalver IS NOT NULL THEN
		fullver = fullver || ' GDAL="' || gdalver || '"';
	END IF;
	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;
	IF json_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBJSON="' || json_lib_ver || '"';
	END IF;
	IF protobuf_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBPROTOBUF="' || protobuf_lib_ver || '"';
	END IF;
	-- fullver = fullver || ' DBPROC="' || dbproc || '"';
	-- fullver = fullver || ' RELPROC="' || relproc || '"';
	IF dbproc != relproc THEN
		fullver = fullver || ' (core procs from "' || dbproc || '" need upgrade)';
	END IF;
	IF topo_scr_ver IS NOT NULL THEN
		fullver = fullver || ' TOPOLOGY';
		IF topo_scr_ver != relproc THEN
			fullver = fullver || ' (topology procs from "' || topo_scr_ver || '" need upgrade)';
		END IF;
	END IF;
	IF rast_lib_ver IS NOT NULL THEN
		fullver = fullver || ' RASTER';
		IF rast_lib_ver != relproc THEN
			fullver = fullver || ' (raster lib from "' || rast_lib_ver || '" need upgrade)';
		END IF;
	END IF;
	IF rast_scr_ver IS NOT NULL AND rast_scr_ver != relproc THEN
		fullver = fullver || ' (raster procs from "' || rast_scr_ver || '" need upgrade)';
	END IF;
	IF sfcgal_scr_ver IS NOT NULL AND sfcgal_scr_ver != relproc THEN
    fullver = fullver || ' (sfcgal procs from "' || sfcgal_scr_ver || '" need upgrade)';
	END IF;
	RETURN fullver;
END
$function$
]]></string>
			<comment><![CDATA[Reports full postgis version and build configuration infos.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_gdal_version" id="Procedure_2385bb1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_gdal_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_gdal_version$function$
]]></string>
			<comment><![CDATA[Reports the version of the GDAL library in use by PostGIS.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_geos_version" id="Procedure_4b9f307" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_geos_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.4', $function$postgis_geos_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the GEOS library.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_getbbox" id="Procedure_4eb6f69" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_getbbox(geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_to_BOX2DF$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="postgis_hasbbox" id="Procedure_1976d16" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_hasbbox(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_hasBBOX$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns TRUE if the bbox of this geometry is cached, FALSE otherwise.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="postgis_lib_build_date" id="Procedure_32a69c2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_lib_build_date()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.4', $function$postgis_lib_build_date$function$
]]></string>
			<comment><![CDATA[Returns build date of the PostGIS library.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_lib_version" id="Procedure_4a3bc03" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_lib_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.4', $function$postgis_lib_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the PostGIS library.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_libjson_version" id="Procedure_36be21a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_libjson_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$postgis_libjson_version$function$
]]></string>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_liblwgeom_version" id="Procedure_4138912" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_liblwgeom_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.4', $function$postgis_liblwgeom_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the liblwgeom library. This should match the version of PostGIS.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_libprotobuf_version" id="Procedure_17fe04a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_libprotobuf_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.4', $function$postgis_libprotobuf_version$function$
]]></string>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_libxml_version" id="Procedure_3ad685e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_libxml_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.4', $function$postgis_libxml_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the libxml2 library.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_noop" id="Procedure_184442b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_noop(geometry)
 RETURNS geometry
 LANGUAGE c
 PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_noop$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="postgis_noop" id="Procedure_20f2c02" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_noop(raster)
 RETURNS geometry
 LANGUAGE c
 STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_noop$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="postgis_proj_version" id="Procedure_af9ec6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_proj_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.4', $function$postgis_proj_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the PROJ4 library.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_raster_lib_build_date" id="Procedure_1192db3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_raster_lib_build_date()
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_lib_build_date$function$
]]></string>
			<comment><![CDATA[Reports full raster library build date.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_raster_lib_version" id="Procedure_450886c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_raster_lib_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_lib_version$function$
]]></string>
			<comment><![CDATA[Reports full raster version and build configuration infos.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_raster_scripts_installed" id="Procedure_58e2757" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_raster_scripts_installed()
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT '2.4.4'::text || ' r' || 16526::text AS version $function$
]]></string>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_scripts_build_date" id="Procedure_507d1c3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_scripts_build_date()
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT '2018-04-09 14:30:56'::text AS version$function$
]]></string>
			<comment><![CDATA[Returns build date of the PostGIS scripts.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_scripts_installed" id="Procedure_3096a86" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_scripts_installed()
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT '2.4.4'::text || ' r' || 16526::text AS version $function$
]]></string>
			<comment><![CDATA[Returns version of the postgis scripts installed in this database.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_scripts_released" id="Procedure_5989eba" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_scripts_released()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.4', $function$postgis_scripts_released$function$
]]></string>
			<comment><![CDATA[Returns the version number of the postgis.sql script released with the installed postgis lib.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_svn_version" id="Procedure_471bd7e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_svn_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.4', $function$postgis_svn_version$function$
]]></string>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_transform_geometry" id="Procedure_415942e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_transform_geometry(geometry, text, text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$transform_geom$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="postgis_type_name" id="Procedure_264f72e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean DEFAULT true)
 RETURNS character varying
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 200
AS $function$
 SELECT CASE WHEN $3 THEN new_name ELSE old_name END As geomname
	FROM
 	( VALUES
 		 ('GEOMETRY', 'Geometry', 2) ,
 		 	('GEOMETRY', 'GeometryZ', 3) ,
 		 	('GEOMETRY', 'GeometryZM', 4) ,
			('GEOMETRYCOLLECTION', 'GeometryCollection', 2) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZ', 3) ,
			('GEOMETRYCOLLECTIONM', 'GeometryCollectionM', 3) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZM', 4) ,
			('POINT', 'Point',2) ,
			('POINTM','PointM',3) ,
			('POINT', 'PointZ',3) ,
			('POINT', 'PointZM',4) ,
			('MULTIPOINT','MultiPoint',2) ,
			('MULTIPOINT','MultiPointZ',3) ,
			('MULTIPOINTM','MultiPointM',3) ,
			('MULTIPOINT','MultiPointZM',4) ,
			('POLYGON', 'Polygon',2) ,
			('POLYGON', 'PolygonZ',3) ,
			('POLYGONM', 'PolygonM',3) ,
			('POLYGON', 'PolygonZM',4) ,
			('MULTIPOLYGON', 'MultiPolygon',2) ,
			('MULTIPOLYGON', 'MultiPolygonZ',3) ,
			('MULTIPOLYGONM', 'MultiPolygonM',3) ,
			('MULTIPOLYGON', 'MultiPolygonZM',4) ,
			('MULTILINESTRING', 'MultiLineString',2) ,
			('MULTILINESTRING', 'MultiLineStringZ',3) ,
			('MULTILINESTRINGM', 'MultiLineStringM',3) ,
			('MULTILINESTRING', 'MultiLineStringZM',4) ,
			('LINESTRING', 'LineString',2) ,
			('LINESTRING', 'LineStringZ',3) ,
			('LINESTRINGM', 'LineStringM',3) ,
			('LINESTRING', 'LineStringZM',4) ,
			('CIRCULARSTRING', 'CircularString',2) ,
			('CIRCULARSTRING', 'CircularStringZ',3) ,
			('CIRCULARSTRINGM', 'CircularStringM',3) ,
			('CIRCULARSTRING', 'CircularStringZM',4) ,
			('COMPOUNDCURVE', 'CompoundCurve',2) ,
			('COMPOUNDCURVE', 'CompoundCurveZ',3) ,
			('COMPOUNDCURVEM', 'CompoundCurveM',3) ,
			('COMPOUNDCURVE', 'CompoundCurveZM',4) ,
			('CURVEPOLYGON', 'CurvePolygon',2) ,
			('CURVEPOLYGON', 'CurvePolygonZ',3) ,
			('CURVEPOLYGONM', 'CurvePolygonM',3) ,
			('CURVEPOLYGON', 'CurvePolygonZM',4) ,
			('MULTICURVE', 'MultiCurve',2 ) ,
			('MULTICURVE', 'MultiCurveZ',3 ) ,
			('MULTICURVEM', 'MultiCurveM',3 ) ,
			('MULTICURVE', 'MultiCurveZM',4 ) ,
			('MULTISURFACE', 'MultiSurface', 2) ,
			('MULTISURFACE', 'MultiSurfaceZ', 3) ,
			('MULTISURFACEM', 'MultiSurfaceM', 3) ,
			('MULTISURFACE', 'MultiSurfaceZM', 4) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurface',2) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZ',3) ,
			('POLYHEDRALSURFACEM', 'PolyhedralSurfaceM',3) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZM',4) ,
			('TRIANGLE', 'Triangle',2) ,
			('TRIANGLE', 'TriangleZ',3) ,
			('TRIANGLEM', 'TriangleM',3) ,
			('TRIANGLE', 'TriangleZM',4) ,
			('TIN', 'Tin', 2),
			('TIN', 'TinZ', 3),
			('TIN', 'TinM', 3),
			('TIN', 'TinZM', 4) )
			 As g(old_name, new_name, coord_dimension)
		WHERE (upper(old_name) = upper($1) OR upper(new_name) = upper($1))
			AND coord_dimension = $2;
$function$
]]></string>
			<input_param name="geomname" jt="12" type="varchar" />
			<input_param name="coord_dimension" jt="4" type="int4" />
			<input_param name="use_new_name" jt="-7" type="bool" />
			<result_param name="returnValue" jt="12" type="varchar" />
		</procedure>
		<procedure name="postgis_typmod_dims" id="Procedure_1b4deae" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_typmod_dims(integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$postgis_typmod_dims$function$
]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="postgis_typmod_srid" id="Procedure_34a0f7d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_typmod_srid(integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$postgis_typmod_srid$function$
]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="postgis_typmod_type" id="Procedure_5b3f0db" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_typmod_type(integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$postgis_typmod_type$function$
]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="postgis_version" id="Procedure_4e0fbe9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.4', $function$postgis_version$function$
]]></string>
			<comment><![CDATA[Returns PostGIS version number and compile-time options.]]></comment>
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="raster_above" id="Procedure_3c546d3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_above(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry |>> $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_below" id="Procedure_5233a4a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_below(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry <<| $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_contain" id="Procedure_1d4f96a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_contain(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry ~ $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_contained" id="Procedure_35da350" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_contained(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry OPERATOR(public.@) $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_contained_by_geometry" id="Procedure_15ac670" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_contained_by_geometry(raster, geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry OPERATOR(public.@) $2$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_eq" id="Procedure_525cfe5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_eq(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.raster_hash($1) = public.raster_hash($2) $function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_geometry_contain" id="Procedure_cf2056" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_geometry_contain(raster, geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry ~ $2$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_geometry_overlap" id="Procedure_29b28c9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_geometry_overlap(raster, geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry OPERATOR(public.&&) $2$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_hash" id="Procedure_36408aa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_hash(raster)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$hashvarlena$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="raster_in" id="Procedure_59987dc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_in(cstring)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_in$function$
]]></string>
			<input_param name="$1" jt="1111" type="cstring" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="raster_left" id="Procedure_578ab63" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_left(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry << $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_out" id="Procedure_b4632b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_out(raster)
 RETURNS cstring
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_out$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="raster_overabove" id="Procedure_153a0ad" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overabove(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry |&> $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_overbelow" id="Procedure_392dc09" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overbelow(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry &<| $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_overlap" id="Procedure_559a7e7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overlap(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry OPERATOR(public.&&) $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_overleft" id="Procedure_5b38570" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overleft(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::public.geometry &< $2::public.geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_overright" id="Procedure_22af30d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overright(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::public.geometry &> $2::public.geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_right" id="Procedure_42b453c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_right(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry >> $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="raster_same" id="Procedure_43c1a7a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_same(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$select $1::geometry ~= $2::geometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="soundex" id="Procedure_1a7ab01" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.soundex(text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/fuzzystrmatch', $function$soundex$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="spheroid_in" id="Procedure_3116800" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.spheroid_in(cstring)
 RETURNS spheroid
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ellipsoid_in$function$
]]></string>
			<input_param name="$1" jt="1111" type="cstring" />
			<result_param name="returnValue" jt="1111" type="spheroid" />
		</procedure>
		<procedure name="spheroid_out" id="Procedure_159243" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.spheroid_out(spheroid)
 RETURNS cstring
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ellipsoid_out$function$
]]></string>
			<input_param name="$1" jt="1111" type="spheroid" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="st_3dclosestpoint" id="Procedure_328d22" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dclosestpoint(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_closestpoint3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 3-dimensional point on g1 that is closest to g2. This is the first point of the 3D shortest line.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_3ddfullywithin" id="Procedure_153d70" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) public.ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public.ST_Expand($1,$3) AND public._ST_3DDFullyWithin($1, $2, $3)$function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance - Returns true if all of the 3D geometries are within the specified distance of one another.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_3ddistance" id="Procedure_33a67eb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3ddistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$distance3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - For geometry type Returns the 3-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_3ddwithin" id="Procedure_38ccfa0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3ddwithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) public.ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public.ST_Expand($1,$3) AND public._ST_3DDWithin($1, $2, $3)$function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance_of_srid - For 3d (z) geometry type Returns true if two geometries 3d distance is within number of units.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_3dintersects" id="Procedure_186fa6c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dintersects(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) $2 AND public._ST_3DIntersects($1, $2)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns TRUE if the Geometries "spatially intersect" in 3d - only for points, linestrings, polygons, polyhedral surface (area). With SFCGAL backend enabled also supports TINS]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_3dlength" id="Procedure_2dc0e70" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dlength(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 20
AS '$libdir/postgis-2.4', $function$LWGEOM_length_linestring$function$
]]></string>
			<comment><![CDATA[args: a_3dlinestring - Returns the 3-dimensional or 2-dimensional length of the geometry if it is a linestring or multi-linestring.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_3dlength_spheroid" id="Procedure_516e25b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dlength_spheroid(geometry, spheroid)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_3DLength_Spheroid', 'ST_LengthSpheroid', '2.2.0');
    SELECT public.ST_LengthSpheroid($1,$2);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="spheroid" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_3dlongestline" id="Procedure_3e96a82" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dlongestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_longestline3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 3-dimensional longest line between two geometries]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_3dmakebox" id="Procedure_4bdddf8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dmakebox(geom1 geometry, geom2 geometry)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_construct$function$
]]></string>
			<comment><![CDATA[args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by the given 3d point geometries.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="box3d" />
		</procedure>
		<procedure name="st_3dmaxdistance" id="Procedure_106a122" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dmaxdistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$LWGEOM_maxdistance3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - For geometry type Returns the 3-dimensional cartesian maximum distance (based on spatial ref) between two geometries in projected units.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_3dperimeter" id="Procedure_5c93fc5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dperimeter(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_perimeter_poly$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the 3-dimensional perimeter of the geometry, if it is a polygon or multi-polygon.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_3dshortestline" id="Procedure_4acccbd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dshortestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_shortestline3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 3-dimensional shortest line between two geometries]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_addband" id="Procedure_1b3f89" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addband(rast raster, addbandargset addbandarg[])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_addBand$function$
]]></string>
			<comment><![CDATA[args: rast, addbandargset - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="addbandargset" jt="2003" type="_addbandarg" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_addband" id="Procedure_7ae43a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addband(rast raster, index integer, pixeltype text, initialvalue double precision DEFAULT '0'::numeric, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT  public.ST_addband($1, ARRAY[ROW($2, $3, $4, $5)]::addbandarg[]) $function$
]]></string>
			<comment><![CDATA[args: rast, index, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="index" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="initialvalue" jt="8" type="float8" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_addband" id="Procedure_584d8d5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addband(rast raster, pixeltype text, initialvalue double precision DEFAULT '0'::numeric, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT  public.ST_addband($1, ARRAY[ROW(NULL, $2, $3, $4)]::addbandarg[]) $function$
]]></string>
			<comment><![CDATA[args: rast, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="initialvalue" jt="8" type="float8" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_addband" id="Procedure_55a3e01" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addband(torast raster, fromrast raster, fromband integer DEFAULT 1, torastindex integer DEFAULT NULL::integer)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_copyBand$function$
]]></string>
			<comment><![CDATA[args: torast, fromrast, fromband=1, torastindex=at_end - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
			<input_param name="torast" jt="1111" type="raster" />
			<input_param name="fromrast" jt="1111" type="raster" />
			<input_param name="fromband" jt="4" type="int4" />
			<input_param name="torastindex" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_addband" id="Procedure_21dfab9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addband(torast raster, fromrasts raster[], fromband integer DEFAULT 1, torastindex integer DEFAULT NULL::integer)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_addBandRasterArray$function$
]]></string>
			<comment><![CDATA[args: torast, fromrasts, fromband=1, torastindex=at_end - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
			<input_param name="torast" jt="1111" type="raster" />
			<input_param name="fromrasts" jt="2003" type="_raster" />
			<input_param name="fromband" jt="4" type="int4" />
			<input_param name="torastindex" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_addband" id="Procedure_3c5fea3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_addBandOutDB$function$
]]></string>
			<comment><![CDATA[args: rast, index, outdbfile, outdbindex, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="index" jt="4" type="int4" />
			<input_param name="outdbfile" jt="12" type="text" />
			<input_param name="outdbindex" jt="2003" type="_int4" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_addband" id="Procedure_4c522df" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addband(rast raster, outdbfile text, outdbindex integer[], index integer DEFAULT NULL::integer, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_AddBand($1, $4, $2, $3, $5) $function$
]]></string>
			<comment><![CDATA[args: rast, outdbfile, outdbindex, index=at_end, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="outdbfile" jt="12" type="text" />
			<input_param name="outdbindex" jt="2003" type="_int4" />
			<input_param name="index" jt="4" type="int4" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_addmeasure" id="Procedure_f9e218" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addmeasure(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_AddMeasure$function$
]]></string>
			<comment><![CDATA[args: geom_mline, measure_start, measure_end - Return a derived geometry with measure elements linearly interpolated between the start and end points.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_addpoint" id="Procedure_c75552" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addpoint(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_addpoint$function$
]]></string>
			<comment><![CDATA[args: linestring, point - Add a point to a LineString.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_addpoint" id="Procedure_2f01f34" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addpoint(geom1 geometry, geom2 geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_addpoint$function$
]]></string>
			<comment><![CDATA[args: linestring, point, position - Add a point to a LineString.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_affine" id="Procedure_3aaac90" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_affine$function$
]]></string>
			<comment><![CDATA[args: geomA, a, b, c, d, e, f, g, h, i, xoff, yoff, zoff - Apply a 3d affine transformation to a geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="8" type="float8" />
			<input_param name="$5" jt="8" type="float8" />
			<input_param name="$6" jt="8" type="float8" />
			<input_param name="$7" jt="8" type="float8" />
			<input_param name="$8" jt="8" type="float8" />
			<input_param name="$9" jt="8" type="float8" />
			<input_param name="$10" jt="8" type="float8" />
			<input_param name="$11" jt="8" type="float8" />
			<input_param name="$12" jt="8" type="float8" />
			<input_param name="$13" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_affine" id="Procedure_c2b2d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, a, b, d, e, xoff, yoff - Apply a 3d affine transformation to a geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="8" type="float8" />
			<input_param name="$5" jt="8" type="float8" />
			<input_param name="$6" jt="8" type="float8" />
			<input_param name="$7" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_approxcount" id="Procedure_33db3de" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_count($1, $2, $3, $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_approxcount" id="Procedure_3b48cbb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, nband integer, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_count($1, $2, TRUE, $3) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_approxcount" id="Procedure_2c23ea1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_count($1, 1, $2, $3) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_approxcount" id="Procedure_433baa3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_count($1, 1, TRUE, $2) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_approxcount" id="Procedure_1c7a830" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_count($1, $2, $3, $4, $5) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_approxcount" id="Procedure_3d21dc1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_count($1, $2, $3, TRUE, $4) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_approxcount" id="Procedure_5b0bed5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_count($1, $2, 1, $3, $4) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_approxcount" id="Procedure_a0f83e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_count($1, $2, 1, TRUE, $3) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_59d2a35" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT min, max, count, percent FROM public._ST_histogram($1, $2, $3, $4, $5, $6, $7) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="width" jt="2003" type="_float8" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_113dc6b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT min, max, count, percent FROM public._ST_histogram($1, $2, $3, $4, $5, NULL, $6) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_e66710" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT min, max, count, percent FROM public._ST_histogram($1, $2, TRUE, $3, 0, NULL, FALSE) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_5948a8e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT min, max, count, percent FROM public._ST_histogram($1, 1, TRUE, $2, 0, NULL, FALSE) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_31ca3f5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT min, max, count, percent FROM public._ST_histogram($1, $2, TRUE, $3, $4, $5, $6) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="width" jt="2003" type="_float8" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_40a6b8e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT min, max, count, percent FROM public._ST_histogram($1, $2, TRUE, $3, $4, NULL, $5) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_2892d65" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT public._ST_histogram($1, $2, $3, $4, $5, $6, $7, $8) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="width" jt="2003" type="_float8" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_e31ebf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_histogram($1, $2, $3, $4, $5, $6, NULL, $7) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_2c7f387" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_histogram($1, $2, $3, TRUE, $4, 0, NULL, FALSE) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_144b3ec" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_histogram($1, $2, 1, TRUE, $3, 0, NULL, FALSE) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_552e2f9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_histogram($1, $2, $3, TRUE, $4, $5, $6, $7) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="width" jt="2003" type="_float8" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxhistogram" id="Procedure_a700b0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_histogram($1, $2, $3, TRUE, $4, $5, NULL, $6) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_d3748f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_quantile($1, $2, $3, $4, $5) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_41f74f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_quantile($1, $2, TRUE, $3, $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_28b1f7f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_quantile($1, 1, TRUE, $2, $3) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_2ab0a30" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_quantile($1, 1, TRUE, 0.1, $2) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_1245ab" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_quantile($1, $2, $3, $4, ARRAY[$5]::double precision[])).value $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_45786c9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_quantile($1, $2, TRUE, $3, ARRAY[$4]::double precision[])).value $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_82ed24" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_quantile($1, 1, TRUE, $2, ARRAY[$3]::double precision[])).value $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_6a8856" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT ( public._ST_quantile($1, 1, $2, 0.1, ARRAY[$3]::double precision[])).value $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_4a6c415" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT ( public._ST_quantile($1, 1, TRUE, 0.1, ARRAY[$2]::double precision[])).value $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_bbcebc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT public._ST_quantile($1, $2, $3, $4, $5, $6) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_5eeb473" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT public._ST_quantile($1, $2, $3, TRUE, $4, $5) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_1147bb9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT public._ST_quantile($1, $2, 1, TRUE, $3, $4) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_5202d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_quantile($1, $2, 1, TRUE, 0.1, $3) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_63240e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_quantile($1, $2, $3, $4, $5, ARRAY[$6]::double precision[])).value $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_1e7766d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_quantile($1, $2, $3, TRUE, $4, ARRAY[$5]::double precision[])).value $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_f2014d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_quantile($1, $2, 1, TRUE, $3, ARRAY[$4]::double precision[])).value $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="sample_percent" jt="8" type="float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_82073f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE
AS $function$ SELECT ( public._ST_quantile($1, $2, 1, $3, 0.1, ARRAY[$4]::double precision[])).value $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxquantile" id="Procedure_1acaa87" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE
AS $function$ SELECT ( public._ST_quantile($1, $2, 1, TRUE, 0.1, ARRAY[$3]::double precision[])).value $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxsummarystats" id="Procedure_239b4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, $2, $3, $4) $function$
]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxsummarystats" id="Procedure_495ea64" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, nband integer, sample_percent double precision)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, $2, TRUE, $3) $function$
]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxsummarystats" id="Procedure_2dcd65f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, 1, $2, $3) $function$
]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxsummarystats" id="Procedure_54f6b89" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, sample_percent double precision)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, 1, TRUE, $2) $function$
]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="sample_percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxsummarystats" id="Procedure_22af336" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)
 RETURNS summarystats
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, $2, $3, $4, $5) $function$
]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="sample_percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxsummarystats" id="Procedure_3396baa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision)
 RETURNS summarystats
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, $2, $3, TRUE, $4) $function$
]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="sample_percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_approxsummarystats" id="Procedure_23d268" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean)
 RETURNS summarystats
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, $2, 1, $3, 0.1) $function$
]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_approxsummarystats" id="Procedure_5633148" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision)
 RETURNS summarystats
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, $2, 1, TRUE, $3) $function$
]]></string>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="sample_percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_area" id="Procedure_2f7553c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_area(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$area$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the area of the surface if it is a Polygon or MultiPolygon. For geometry, a 2D Cartesian area is determined with units specified by the SRID. For geography, area is determined on a curved surface with units in square meters.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_area" id="Procedure_502039" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_area(geog geography, use_spheroid boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$geography_area$function$
]]></string>
			<comment><![CDATA[args: geog, use_spheroid=true - Returns the area of the surface if it is a Polygon or MultiPolygon. For geometry, a 2D Cartesian area is determined with units specified by the SRID. For geography, area is determined on a curved surface with units in square meters.]]></comment>
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="use_spheroid" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_area" id="Procedure_12b8482" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_area(text)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_Area($1::public.geometry);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_area2d" id="Procedure_19818c8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_area2d(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_area_polygon$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_asbinary" id="Procedure_3a448c5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asbinary(geometry, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_asBinary$function$
]]></string>
			<comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asbinary" id="Procedure_338554e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asbinary(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_asBinary$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asbinary" id="Procedure_5b194ba" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asbinary(geography)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_asBinary$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asbinary" id="Procedure_22395c3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asbinary(geography, text)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_AsBinary($1::public.geometry, $2);  $function$
]]></string>
			<comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asbinary" id="Procedure_de0af1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asbinary(raster, outasin boolean DEFAULT false)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_to_binary$function$
]]></string>
			<comment><![CDATA[args: rast, outasin=FALSE - Return the Well-Known Binary (WKB) representation of the raster.]]></comment>
			<input_param name="" jt="1111" type="raster" />
			<input_param name="outasin" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asencodedpolyline" id="Procedure_2e932cc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asencodedpolyline(geom geometry, integer DEFAULT 5)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_asEncodedPolyline$function$
]]></string>
			<comment><![CDATA[args: geom, precision=5 - Returns an Encoded Polyline from a LineString geometry.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asewkb" id="Procedure_2d35c4d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asewkb(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$WKBFromLWGEOM$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asewkb" id="Procedure_1b405a0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asewkb(geometry, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$WKBFromLWGEOM$function$
]]></string>
			<comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asewkt" id="Procedure_32a109d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asewkt(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 750
AS '$libdir/postgis-2.4', $function$LWGEOM_asEWKT$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asewkt" id="Procedure_4d5a582" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asewkt(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_asEWKT$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asewkt" id="Procedure_4a6bf20" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asewkt(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_AsEWKT($1::public.geometry);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asgdalraster" id="Procedure_567d4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgdalraster(rast raster, format text, options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_asGDALRaster$function$
]]></string>
			<comment><![CDATA[args: rast, format, options=NULL, srid=sameassource - Return the raster tile in the designated GDAL Raster format. Raster formats are one of those supported by your compiled library. Use ST_GDALDrivers() to get a list of formats supported by your library.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="format" jt="12" type="text" />
			<input_param name="options" jt="2003" type="_text" />
			<input_param name="srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asgeojson" id="Procedure_4ca7a13" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgeojson(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 1000
AS '$libdir/postgis-2.4', $function$LWGEOM_asGeoJson$function$
]]></string>
			<comment><![CDATA[args: geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<input_param name="options" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asgeojson" id="Procedure_4bf290" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_AsGeoJson($2::public.geometry, $3::int4, $4::int4); $function$
]]></string>
			<comment><![CDATA[args: gj_version, geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
			<input_param name="gj_version" jt="4" type="int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<input_param name="options" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asgeojson" id="Procedure_592a2d2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgeojson(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_AsGeoJson(1, $1::public.geometry,15,0);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asgeojson" id="Procedure_29508d8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgeojson(geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_AsGeoJson(1, $1, $2, $3); $function$
]]></string>
			<comment><![CDATA[args: geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<input_param name="options" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asgeojson" id="Procedure_4bd0317" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_AsGeoJson($1, $2, $3, $4); $function$
]]></string>
			<comment><![CDATA[args: gj_version, geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
			<input_param name="gj_version" jt="4" type="int4" />
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<input_param name="options" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asgml" id="Procedure_3d9a903" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgml(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_AsGML(2, $1, $2, $3, null, null); $function$
]]></string>
			<comment><![CDATA[args: geom, maxdecimaldigits=15, options=0 - Return the geometry as a GML version 2 or 3 element.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<input_param name="options" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asgml" id="Procedure_221049e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgml(version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0, nprefix text DEFAULT NULL::text, id text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_AsGML($1, $2, $3, $4, $5, $6); $function$
]]></string>
			<comment><![CDATA[args: version, geom, maxdecimaldigits=15, options=0, nprefix=null, id=null - Return the geometry as a GML version 2 or 3 element.]]></comment>
			<input_param name="version" jt="4" type="int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<input_param name="options" jt="4" type="int4" />
			<input_param name="nprefix" jt="12" type="text" />
			<input_param name="id" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asgml" id="Procedure_5934cd7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgml(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_AsGML(2,$1::public.geometry,15,0, NULL, NULL);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asgml" id="Procedure_286274b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgml(geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public._ST_AsGML(2, $1, $2, $3, null, null)$function$
]]></string>
			<comment><![CDATA[args: geog, maxdecimaldigits=15, options=0 - Return the geometry as a GML version 2 or 3 element.]]></comment>
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<input_param name="options" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asgml" id="Procedure_24e13e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgml(version integer, geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0, nprefix text DEFAULT NULL::text, id text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_AsGML($1, $2, $3, $4, $5, $6);$function$
]]></string>
			<comment><![CDATA[args: version, geog, maxdecimaldigits=15, options=0, nprefix=null, id=null - Return the geometry as a GML version 2 or 3 element.]]></comment>
			<input_param name="version" jt="4" type="int4" />
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<input_param name="options" jt="4" type="int4" />
			<input_param name="nprefix" jt="12" type="text" />
			<input_param name="id" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_ashexewkb" id="Procedure_9db900" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ashexewkb(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 25
AS '$libdir/postgis-2.4', $function$LWGEOM_asHEXEWKB$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_ashexewkb" id="Procedure_1894c4c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ashexewkb(geometry, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 25
AS '$libdir/postgis-2.4', $function$LWGEOM_asHEXEWKB$function$
]]></string>
			<comment><![CDATA[args: g1, NDRorXDR - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asjpeg" id="Procedure_b3397e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;
		num_bands := st_numbands($1);
		-- JPEG allows 1 or 3 bands
		IF num_bands <> 1 AND num_bands <> 3 THEN
			RAISE NOTICE 'The JPEG format only permits one or three bands.  The first band will be used.';
			rast2 := st_band(rast, ARRAY[1]);
			num_bands := st_numbands(rast);
		ELSE
			rast2 := rast;
		END IF;
		-- JPEG only supports 8BUI pixeltype
		FOR i IN 1..num_bands LOOP
			IF public.ST_BandPixelType(rast, i) != '8BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  The JPEG format can only be used with the 8BUI pixel type.', i;
			END IF;
		END LOOP;
		RETURN st_asgdalraster(rast2, 'JPEG', $2, NULL);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="options" jt="2003" type="_text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asjpeg" id="Procedure_95879f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nbands integer[], options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT st_asjpeg(st_band($1, $2), $3) $function$
]]></string>
			<comment><![CDATA[args: rast, nbands, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nbands" jt="2003" type="_int4" />
			<input_param name="options" jt="2003" type="_text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asjpeg" id="Procedure_2f7f50d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nbands integer[], quality integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		quality2 int;
		options text[];
	BEGIN
		IF quality IS NOT NULL THEN
			IF quality > 100 THEN
				quality2 := 100;
			ELSEIF quality < 10 THEN
				quality2 := 10;
			ELSE
				quality2 := quality;
			END IF;
			options := array_append(options, 'QUALITY=' || quality2);
		END IF;
		RETURN public.st_asjpeg(st_band($1, $2), options);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, nbands, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nbands" jt="2003" type="_int4" />
			<input_param name="quality" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asjpeg" id="Procedure_4fde82a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nband integer, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.st_asjpeg(st_band($1, $2), $3) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="options" jt="2003" type="_text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asjpeg" id="Procedure_2335319" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nband integer, quality integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.st_asjpeg($1, ARRAY[$2], $3) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="quality" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_askml" id="Procedure_1993bc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_askml(geom geometry, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_AsKML(2, ST_Transform($1,4326), $2, null); $function$
]]></string>
			<comment><![CDATA[args: geom, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_askml" id="Procedure_70ae4e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_askml(version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, nprefix text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_AsKML($1, public.ST_Transform($2,4326), $3, $4); $function$
]]></string>
			<comment><![CDATA[args: version, geom, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
			<input_param name="version" jt="4" type="int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<input_param name="nprefix" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_askml" id="Procedure_875677" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_askml(geog geography, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public._ST_AsKML(2, $1, $2, null)$function$
]]></string>
			<comment><![CDATA[args: geog, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_askml" id="Procedure_4c12207" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_askml(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_AsKML(2, $1::public.geometry, 15, null);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_askml" id="Procedure_445bab0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_askml(version integer, geog geography, maxdecimaldigits integer DEFAULT 15, nprefix text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT public._ST_AsKML($1, $2, $3, $4)$function$
]]></string>
			<comment><![CDATA[args: version, geog, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
			<input_param name="version" jt="4" type="int4" />
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<input_param name="nprefix" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_aslatlontext" id="Procedure_3efc8f5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aslatlontext(geom geometry, tmpl text DEFAULT ''::text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_to_latlon$function$
]]></string>
			<comment><![CDATA[args: pt, format=' - Return the Degrees, Minutes, Seconds representation of the given point.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="tmpl" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_asmvtgeom" id="Procedure_32a1cf9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asmvtgeom(geom geometry, bounds box2d, extent integer DEFAULT 4096, buffer integer DEFAULT 256, clip_geom boolean DEFAULT true)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$ST_AsMVTGeom$function$
]]></string>
			<comment><![CDATA[args: geom, bounds, extent=4096, buffer=256, clip_geom=true - Transform a geometry into the coordinate space of a Mapbox Vector Tile.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="bounds" jt="1111" type="box2d" />
			<input_param name="extent" jt="4" type="int4" />
			<input_param name="buffer" jt="4" type="int4" />
			<input_param name="clip_geom" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_aspect" id="Procedure_5cb16eb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aspect(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		-- get properties
		SELECT width, height INTO _width, _height FROM public.ST_Metadata(_rast);
		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_aspect4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_width::text, _height::text,
			units::text
		);
	END;
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="units" jt="12" type="text" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_aspect" id="Procedure_784d3c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aspect(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_aspect($1, $2, NULL::raster, $3, $4, $5) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="units" jt="12" type="text" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_aspng" id="Procedure_ceaf3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
		pt text;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;
		num_bands := st_numbands($1);
		-- PNG allows 1, 3 or 4 bands
		IF num_bands <> 1 AND num_bands <> 3 AND num_bands <> 4 THEN
			RAISE NOTICE 'The PNG format only permits one, three or four bands.  The first band will be used.';
			rast2 := public.st_band($1, ARRAY[1]);
			num_bands := public.st_numbands(rast2);
		ELSE
			rast2 := rast;
		END IF;
		-- PNG only supports 8BUI and 16BUI pixeltype
		FOR i IN 1..num_bands LOOP
			pt = public.ST_BandPixelType(rast, i);
			IF pt != '8BUI' AND pt != '16BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI or 16BUI.  The PNG format can only be used with 8BUI and 16BUI pixel types.', i;
			END IF;
		END LOOP;
		RETURN public.st_asgdalraster(rast2, 'PNG', $2, NULL);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="options" jt="2003" type="_text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_aspng" id="Procedure_2c72dee" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nbands integer[], options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.st_aspng(st_band($1, $2), $3) $function$
]]></string>
			<comment><![CDATA[args: rast, nbands, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nbands" jt="2003" type="_int4" />
			<input_param name="options" jt="2003" type="_text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_aspng" id="Procedure_b97b88" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nbands integer[], compression integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		compression2 int;
		options text[];
	BEGIN
		IF compression IS NOT NULL THEN
			IF compression > 9 THEN
				compression2 := 9;
			ELSEIF compression < 1 THEN
				compression2 := 1;
			ELSE
				compression2 := compression;
			END IF;
			options := array_append(options, 'ZLEVEL=' || compression2);
		END IF;
		RETURN public.st_aspng(st_band($1, $2), options);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, nbands, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nbands" jt="2003" type="_int4" />
			<input_param name="compression" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_aspng" id="Procedure_4738c4f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nband integer, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.st_aspng(st_band($1, $2), $3) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="options" jt="2003" type="_text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_aspng" id="Procedure_549a94e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nband integer, compression integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.st_aspng($1, ARRAY[$2], $3) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="compression" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asraster" id="Procedure_37fd8cb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_asraster($1, $2, $3, NULL, NULL, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11) $function$
]]></string>
			<comment><![CDATA[args: geom, scalex, scaley, gridx=NULL, gridy=NULL, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="gridx" jt="8" type="float8" />
			<input_param name="gridy" jt="8" type="float8" />
			<input_param name="pixeltype" jt="2003" type="_text" />
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="touched" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_asraster" id="Procedure_40a97cc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_asraster($1, $2, $3, NULL, NULL, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11) $function$
]]></string>
			<comment><![CDATA[args: geom, scalex, scaley, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="pixeltype" jt="2003" type="_text" />
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<input_param name="upperleftx" jt="8" type="float8" />
			<input_param name="upperlefty" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="touched" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_asraster" id="Procedure_1149dbe" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_asraster($1, NULL, NULL, $2, $3, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11) $function$
]]></string>
			<comment><![CDATA[args: geom, width, height, gridx=NULL, gridy=NULL, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="gridx" jt="8" type="float8" />
			<input_param name="gridy" jt="8" type="float8" />
			<input_param name="pixeltype" jt="2003" type="_text" />
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="touched" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_asraster" id="Procedure_52d7b0d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_asraster($1, NULL, NULL, $2, $3, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11) $function$
]]></string>
			<comment><![CDATA[args: geom, width, height, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="pixeltype" jt="2003" type="_text" />
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<input_param name="upperleftx" jt="8" type="float8" />
			<input_param name="upperlefty" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="touched" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_asraster" id="Procedure_340d573" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_asraster($1, $2, $3, NULL, NULL, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11) $function$
]]></string>
			<comment><![CDATA[args: geom, scalex, scaley, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="gridx" jt="8" type="float8" />
			<input_param name="gridy" jt="8" type="float8" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="nodataval" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="touched" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_asraster" id="Procedure_336eaa4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_asraster($1, $2, $3, NULL, NULL, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL, $9, $10, $11) $function$
]]></string>
			<comment><![CDATA[args: geom, scalex, scaley, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="nodataval" jt="8" type="float8" />
			<input_param name="upperleftx" jt="8" type="float8" />
			<input_param name="upperlefty" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="touched" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_asraster" id="Procedure_411d717" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_asraster($1, NULL, NULL, $2, $3, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11) $function$
]]></string>
			<comment><![CDATA[args: geom, width, height, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="gridx" jt="8" type="float8" />
			<input_param name="gridy" jt="8" type="float8" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="nodataval" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="touched" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_asraster" id="Procedure_164c6c6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_asraster($1, NULL, NULL, $2, $3, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL,$9, $10, $11) $function$
]]></string>
			<comment><![CDATA[args: geom, width, height, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="nodataval" jt="8" type="float8" />
			<input_param name="upperleftx" jt="8" type="float8" />
			<input_param name="upperlefty" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="touched" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_asraster" id="Procedure_20005db" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, ref raster, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		g geometry;
		g_srid integer;
		ul_x double precision;
		ul_y double precision;
		scale_x double precision;
		scale_y double precision;
		skew_x double precision;
		skew_y double precision;
		sr_id integer;
	BEGIN
		SELECT upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM public.ST_Metadata(ref);
		--RAISE NOTICE '%, %, %, %, %, %, %', ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id;
		-- geometry and raster has different SRID
		g_srid := public.ST_SRID(geom);
		IF g_srid != sr_id THEN
			RAISE NOTICE 'The geometry''s SRID (%) is not the same as the raster''s SRID (%).  The geometry will be transformed to the raster''s projection', g_srid, sr_id;
			g := public.ST_Transform(geom, sr_id);
		ELSE
			g := geom;
		END IF;
		RETURN public._ST_asraster(g, scale_x, scale_y, NULL, NULL, $3, $4, $5, NULL, NULL, ul_x, ul_y, skew_x, skew_y, $6);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: geom, ref, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="ref" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="2003" type="_text" />
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<input_param name="touched" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_asraster" id="Procedure_1257a45" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, ref raster, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT  public.ST_AsRaster($1, $2, ARRAY[$3]::text[], ARRAY[$4]::double precision[], ARRAY[$5]::double precision[], $6) $function$
]]></string>
			<comment><![CDATA[args: geom, ref, pixeltype, value=1, nodataval=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="ref" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="nodataval" jt="8" type="float8" />
			<input_param name="touched" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_assvg" id="Procedure_4db48b9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_assvg(geom geometry, rel integer DEFAULT 0, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 1000
AS '$libdir/postgis-2.4', $function$LWGEOM_asSVG$function$
]]></string>
			<comment><![CDATA[args: geom, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="rel" jt="4" type="int4" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_assvg" id="Procedure_3be9a02" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_assvg(geog geography, rel integer DEFAULT 0, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_as_svg$function$
]]></string>
			<comment><![CDATA[args: geog, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.]]></comment>
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="rel" jt="4" type="int4" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_assvg" id="Procedure_531f657" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_assvg(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_AsSVG($1::public.geometry,0,15);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_astext" id="Procedure_13e35db" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astext(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 750
AS '$libdir/postgis-2.4', $function$LWGEOM_asText$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_astext" id="Procedure_182c70c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astext(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_asText$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_astext" id="Procedure_27d64aa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astext(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_AsText($1::public.geometry);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_astiff" id="Procedure_19d6138" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		i int;
		num_bands int;
		nodata double precision;
		last_nodata double precision;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;
		num_bands := st_numbands($1);
		-- TIFF only allows one NODATA value for ALL bands
		FOR i IN 1..num_bands LOOP
			nodata := st_bandnodatavalue($1, i);
			IF last_nodata IS NULL THEN
				last_nodata := nodata;
			ELSEIF nodata != last_nodata THEN
				RAISE NOTICE 'The TIFF format only permits one NODATA value for all bands.  The value used will be the last band with a NODATA value.';
			END IF;
		END LOOP;
		RETURN st_asgdalraster($1, 'GTiff', $2, $3);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, options=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="options" jt="2003" type="_text" />
			<input_param name="srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_astiff" id="Procedure_58357" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, nbands integer[], options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT st_astiff(st_band($1, $2), $3, $4) $function$
]]></string>
			<comment><![CDATA[args: rast, nbands, options, srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nbands" jt="2003" type="_int4" />
			<input_param name="options" jt="2003" type="_text" />
			<input_param name="srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_astiff" id="Procedure_446af" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, compression text, srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		compression2 text;
		c_type text;
		c_level int;
		i int;
		num_bands int;
		options text[];
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;
		compression2 := trim(both from upper(compression));
		IF length(compression2) > 0 THEN
			-- JPEG
			IF position('JPEG' in compression2) != 0 THEN
				c_type := 'JPEG';
				c_level := substring(compression2 from '[0-9]+$');
				IF c_level IS NOT NULL THEN
					IF c_level > 100 THEN
						c_level := 100;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;
					options := array_append(options, 'JPEG_QUALITY=' || c_level);
				END IF;
				-- per band pixel type check
				num_bands := st_numbands($1);
				FOR i IN 1..num_bands LOOP
					IF public.ST_BandPixelType($1, i) != '8BUI' THEN
						RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  JPEG compression can only be used with the 8BUI pixel type.', i;
					END IF;
				END LOOP;
			-- DEFLATE
			ELSEIF position('DEFLATE' in compression2) != 0 THEN
				c_type := 'DEFLATE';
				c_level := substring(compression2 from '[0-9]+$');
				IF c_level IS NOT NULL THEN
					IF c_level > 9 THEN
						c_level := 9;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;
					options := array_append(options, 'ZLEVEL=' || c_level);
				END IF;
			ELSE
				c_type := compression2;
				-- CCITT
				IF position('CCITT' in compression2) THEN
					-- per band pixel type check
					num_bands := st_numbands($1);
					FOR i IN 1..num_bands LOOP
						IF public.ST_BandPixelType($1, i) != '1BB' THEN
							RAISE EXCEPTION 'The pixel type of band % in the raster is not 1BB.  CCITT compression can only be used with the 1BB pixel type.', i;
						END IF;
					END LOOP;
				END IF;
			END IF;
			-- compression type check
			IF ARRAY[c_type] <@ ARRAY['JPEG', 'LZW', 'PACKBITS', 'DEFLATE', 'CCITTRLE', 'CCITTFAX3', 'CCITTFAX4', 'NONE'] THEN
				options := array_append(options, 'COMPRESS=' || c_type);
			ELSE
				RAISE NOTICE 'Unknown compression type: %.  The outputted TIFF will not be COMPRESSED.', c_type;
			END IF;
		END IF;
		RETURN st_astiff($1, options, $3);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, compression=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="compression" jt="12" type="text" />
			<input_param name="srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_astiff" id="Procedure_b35498" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, nbands integer[], compression text, srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT st_astiff(st_band($1, $2), $3, $4) $function$
]]></string>
			<comment><![CDATA[args: rast, nbands, compression=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nbands" jt="2003" type="_int4" />
			<input_param name="compression" jt="12" type="text" />
			<input_param name="srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_astwkb" id="Procedure_139f647" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astwkb(geom geometry, prec integer DEFAULT NULL::integer, prec_z integer DEFAULT NULL::integer, prec_m integer DEFAULT NULL::integer, with_sizes boolean DEFAULT NULL::boolean, with_boxes boolean DEFAULT NULL::boolean)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$TWKBFromLWGEOM$function$
]]></string>
			<comment><![CDATA[args: g1, decimaldigits_xy=0, decimaldigits_z=0, decimaldigits_m=0, include_sizes=false, include_bounding boxes=false - Returns the geometry as TWKB, aka "Tiny Well-Known Binary"]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="prec" jt="4" type="int4" />
			<input_param name="prec_z" jt="4" type="int4" />
			<input_param name="prec_m" jt="4" type="int4" />
			<input_param name="with_sizes" jt="-7" type="bool" />
			<input_param name="with_boxes" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_astwkb" id="Procedure_3e0732" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astwkb(geom geometry[], ids bigint[], prec integer DEFAULT NULL::integer, prec_z integer DEFAULT NULL::integer, prec_m integer DEFAULT NULL::integer, with_sizes boolean DEFAULT NULL::boolean, with_boxes boolean DEFAULT NULL::boolean)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$TWKBFromLWGEOMArray$function$
]]></string>
			<comment><![CDATA[args: geometries, unique_ids, decimaldigits_xy=0, decimaldigits_z=0, decimaldigits_m=0, include_sizes=false, include_bounding_boxes=false - Returns the geometry as TWKB, aka "Tiny Well-Known Binary"]]></comment>
			<input_param name="geom" jt="2003" type="_geometry" />
			<input_param name="ids" jt="2003" type="_int8" />
			<input_param name="prec" jt="4" type="int4" />
			<input_param name="prec_z" jt="4" type="int4" />
			<input_param name="prec_m" jt="4" type="int4" />
			<input_param name="with_sizes" jt="-7" type="bool" />
			<input_param name="with_boxes" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="st_asx3d" id="Procedure_1c5873f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asx3d(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT public._ST_AsX3D(3,$1,$2,$3,'');$function$
]]></string>
			<comment><![CDATA[args: g1, maxdecimaldigits=15, options=0 - Returns a Geometry in X3D xml node element format: ISO-IEC-19776-1.2-X3DEncodings-XML]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="maxdecimaldigits" jt="4" type="int4" />
			<input_param name="options" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_azimuth" id="Procedure_4ffcf7d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_azimuth(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_azimuth$function$
]]></string>
			<comment><![CDATA[args: pointA, pointB - Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on pointA to pointB.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_azimuth" id="Procedure_d53bc8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_azimuth(geog1 geography, geog2 geography)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$geography_azimuth$function$
]]></string>
			<comment><![CDATA[args: pointA, pointB - Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on pointA to pointB.]]></comment>
			<input_param name="geog1" jt="1111" type="geography" />
			<input_param name="geog2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_band" id="Procedure_4aefaa3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_band(rast raster, nbands integer[] DEFAULT ARRAY[1])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_band$function$
]]></string>
			<comment><![CDATA[args: rast, nbands = ARRAY[1] - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nbands" jt="2003" type="_int4" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_band" id="Procedure_3e1e614" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_band(rast raster, nband integer)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT  public.ST_band($1, ARRAY[$2]) $function$
]]></string>
			<comment><![CDATA[args: rast, nband - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_band" id="Procedure_3e4cbd9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_band(rast raster, nbands text, delimiter character DEFAULT ','::bpchar)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT  public.ST_band($1, regexp_split_to_array(regexp_replace($2, '[[:space:]]', '', 'g'), E'\\' || array_to_string(regexp_split_to_array($3, ''), E'\\'))::int[]) $function$
]]></string>
			<comment><![CDATA[args: rast, nbands, delimiter=, - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nbands" jt="12" type="text" />
			<input_param name="delimiter" jt="1" type="bpchar" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_bandisnodata" id="Procedure_20fbe03" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandisnodata(rast raster, band integer DEFAULT 1, forcechecking boolean DEFAULT false)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_bandIsNoData$function$
]]></string>
			<comment><![CDATA[args: rast, band, forceChecking=true - Returns true if the band is filled with only nodata values.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="forcechecking" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_bandisnodata" id="Procedure_4897002" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandisnodata(rast raster, forcechecking boolean)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_bandisnodata($1, 1, $2) $function$
]]></string>
			<comment><![CDATA[args: rast, forceChecking=true - Returns true if the band is filled with only nodata values.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="forcechecking" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_bandmetadata" id="Procedure_4d4723d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text)
 RETURNS record
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_bandmetadata$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="2003" type="_int4" />
			<input_param name="bandnum" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="nodatavalue" jt="8" type="float8" />
			<input_param name="isoutdb" jt="-7" type="bool" />
			<input_param name="path" jt="12" type="text" />
		</procedure>
		<procedure name="st_bandmetadata" id="Procedure_d9dffc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandmetadata(rast raster, band integer DEFAULT 1, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT pixeltype, nodatavalue, isoutdb, path FROM public.ST_BandMetaData($1, ARRAY[$2]::int[]) LIMIT 1 $function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns basic meta data for a specific raster band. band num 1 is assumed if none-specified.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="nodatavalue" jt="8" type="float8" />
			<input_param name="isoutdb" jt="-7" type="bool" />
			<input_param name="path" jt="12" type="text" />
		</procedure>
		<procedure name="st_bandnodatavalue" id="Procedure_21af01d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandnodatavalue(rast raster, band integer DEFAULT 1)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getBandNoDataValue$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns the value in a given band that represents no data. If no band num 1 is assumed.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_bandpath" id="Procedure_5dc5f61" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandpath(rast raster, band integer DEFAULT 1)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getBandPath$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns system file path to a band stored in file system. If no bandnum specified, 1 is assumed.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_bandpixeltype" id="Procedure_4cb6bed" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandpixeltype(rast raster, band integer DEFAULT 1)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getBandPixelTypeName$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns the type of pixel for given band. If no bandnum specified, 1 is assumed.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_bdmpolyfromtext" id="Procedure_10014b9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bdmpolyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := public.ST_MultiLineStringFromText(geomtext, srid);
	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;
	geom := public.ST_Multi(public.ST_BuildArea(mline));
	RETURN geom;
END;
$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Construct a MultiPolygon given an arbitrary collection of closed linestrings as a MultiLineString text representation Well-Known text representation.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_bdpolyfromtext" id="Procedure_533009e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bdpolyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := public.ST_MultiLineStringFromText(geomtext, srid);
	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;
	geom := public.ST_BuildArea(mline);
	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;
	RETURN geom;
END;
$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Construct a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_boundary" id="Procedure_57f07cb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_boundary(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$boundary$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the closure of the combinatorial boundary of this Geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_boundingdiagonal" id="Procedure_57977fa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_boundingdiagonal(geom geometry, fits boolean DEFAULT false)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_BoundingDiagonal$function$
]]></string>
			<comment><![CDATA[args: geom, fits=false - Returns the diagonal of the supplied geometrys bounding box.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="fits" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_box2dfromgeohash" id="Procedure_6a386e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_box2dfromgeohash(text, integer DEFAULT NULL::integer)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$box2d_from_geohash$function$
]]></string>
			<comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a BOX2D from a GeoHash string.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_buffer" id="Procedure_1d6d913" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buffer(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$buffer$function$
]]></string>
			<comment><![CDATA[args: g1, radius_of_buffer - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_buffer" id="Procedure_5338a42" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buffer(geometry, double precision, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_Buffer($1, $2,
		CAST('quad_segs='||CAST($3 AS text) as cstring))
	   $function$
]]></string>
			<comment><![CDATA[args: g1, radius_of_buffer, num_seg_quarter_circle - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_buffer" id="Procedure_e2f52a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buffer(geometry, double precision, text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_Buffer($1, $2,
		CAST( regexp_replace($3, '^[0123456789]+$',
			'quad_segs='||$3) AS cstring)
		)
	   $function$
]]></string>
			<comment><![CDATA[args: g1, radius_of_buffer, buffer_style_parameters - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_buffer" id="Procedure_99a366" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buffer(geography, double precision)
 RETURNS geography
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.geography(public.ST_Transform(public.ST_Buffer(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1)), $2), 4326))$function$
]]></string>
			<comment><![CDATA[args: g1, radius_of_buffer_in_meters - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="st_buffer" id="Procedure_41bf806" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buffer(geography, double precision, integer)
 RETURNS geography
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.geography(public.ST_Transform(public.ST_Buffer(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1)), $2, $3), 4326))$function$
]]></string>
			<comment><![CDATA[args: g1, radius_of_buffer, num_seg_quarter_circle - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="st_buffer" id="Procedure_1bb9919" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buffer(geography, double precision, text)
 RETURNS geography
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.geography(public.ST_Transform(public.ST_Buffer(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1)), $2, $3), 4326))$function$
]]></string>
			<comment><![CDATA[args: g1, radius_of_buffer, buffer_style_parameters - (T)Returns a geometry covering all points within a given distancefrom the input geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="st_buffer" id="Procedure_3cf1bb4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buffer(text, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_Buffer($1::public.geometry, $2);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_buffer" id="Procedure_52e4f8c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buffer(text, double precision, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_Buffer($1::public.geometry, $2, $3);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_buffer" id="Procedure_1342b29" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buffer(text, double precision, text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_Buffer($1::public.geometry, $2, $3);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_buildarea" id="Procedure_144a9cc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buildarea(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_BuildArea$function$
]]></string>
			<comment><![CDATA[args: A - Creates an areal geometry formed by the constituent linework of given geometry]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_centroid" id="Procedure_3f45404" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_centroid(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$centroid$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the geometric center of a geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_centroid" id="Procedure_5d3ac7e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_centroid(geography, use_spheroid boolean DEFAULT true)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_centroid$function$
]]></string>
			<comment><![CDATA[args: g1, use_spheroid=true - Returns the geometric center of a geometry.]]></comment>
			<input_param name="" jt="1111" type="geography" />
			<input_param name="use_spheroid" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="st_centroid" id="Procedure_3623872" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_centroid(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ST_Centroid($1::public.geometry);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_cleangeometry" id="Procedure_219fa83" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_cleangeometry(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_CleanGeometry$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_clip" id="Procedure_5af439e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[] DEFAULT NULL::double precision[], crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	BEGIN
		-- short-cut if geometry's extent fully contains raster's extent
		IF (nodataval IS NULL OR array_length(nodataval, 1) < 1) AND geom ~ ST_Envelope(rast) THEN
			RETURN rast;
		END IF;
		RETURN public._ST_Clip($1, $2, $3, $4, $5);
	END;
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="2003" type="_int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<input_param name="crop" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_clip" id="Procedure_4fe41e1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT ST_Clip($1, ARRAY[$2]::integer[], $3, ARRAY[$4]::double precision[], $5) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="nodataval" jt="8" type="float8" />
			<input_param name="crop" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_clip" id="Procedure_fa1dd2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clip(rast raster, nband integer, geom geometry, crop boolean)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT ST_Clip($1, ARRAY[$2]::integer[], $3, null::double precision[], $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="crop" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_clip" id="Procedure_50e16f3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clip(rast raster, geom geometry, nodataval double precision[] DEFAULT NULL::double precision[], crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT ST_Clip($1, NULL, $2, $3, $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<input_param name="crop" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_clip" id="Procedure_35391d5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clip(rast raster, geom geometry, nodataval double precision, crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT ST_Clip($1, NULL, $2, ARRAY[$3]::double precision[], $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="nodataval" jt="8" type="float8" />
			<input_param name="crop" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_clip" id="Procedure_51602ad" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clip(rast raster, geom geometry, crop boolean)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT ST_Clip($1, NULL, $2, null::double precision[], $3) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="crop" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_clipbybox2d" id="Procedure_dad3b2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clipbybox2d(geom geometry, box box2d)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 50
AS '$libdir/postgis-2.4', $function$ST_ClipByBox2d$function$
]]></string>
			<comment><![CDATA[args: geom, box - Returns the portion of a geometry falling within a rectangle.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="box" jt="1111" type="box2d" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_closestpoint" id="Procedure_5785149" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_closestpoint(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_closestpoint$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional point on g1 that is closest to g2. This is the first point of the shortest line.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_closestpointofapproach" id="Procedure_5ba4e9b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_closestpointofapproach(geometry, geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_ClosestPointOfApproach$function$
]]></string>
			<comment><![CDATA[args: track1, track2 - Returns the measure at which points interpolated along two lines are closest.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_clusterdbscan" id="Procedure_49c4ee1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clusterdbscan(geometry, eps double precision, minpoints integer)
 RETURNS integer
 LANGUAGE c
 WINDOW IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_ClusterDBSCAN$function$
]]></string>
			<comment><![CDATA[args: geom, eps, minpoints - Windowing function that returns integer id for the cluster each input geometry is in based on 2D implementation of Density-based spatial clustering of applications with noise (DBSCAN) algorithm.]]></comment>
			<input_param name="" jt="1111" type="geometry" />
			<input_param name="eps" jt="8" type="float8" />
			<input_param name="minpoints" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_clusterintersecting" id="Procedure_4c5142e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clusterintersecting(geometry[])
 RETURNS geometry[]
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$clusterintersecting_garray$function$
]]></string>
			<input_param name="$1" jt="2003" type="_geometry" />
			<result_param name="returnValue" jt="2003" type="_geometry" />
		</procedure>
		<procedure name="st_clusterintersecting" id="Procedure_53a7ecd" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_clusterintersecting clusterintersecting_garray]]></string>
			<comment><![CDATA[args: g - Aggregate. Returns an array with the connected components of a set of geometries]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="2003" type="_geometry" />
		</procedure>
		<procedure name="st_clusterkmeans" id="Procedure_554ca3f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clusterkmeans(geom geometry, k integer)
 RETURNS integer
 LANGUAGE c
 WINDOW STRICT
AS '$libdir/postgis-2.4', $function$ST_ClusterKMeans$function$
]]></string>
			<comment><![CDATA[args: geom, number_of_clusters - Windowing function that returns integer id for the cluster each input geometry is in.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="k" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_clusterwithin" id="Procedure_42c495" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clusterwithin(geometry[], double precision)
 RETURNS geometry[]
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$cluster_within_distance_garray$function$
]]></string>
			<input_param name="$1" jt="2003" type="_geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="2003" type="_geometry" />
		</procedure>
		<procedure name="st_clusterwithin" id="Procedure_7f6e44" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_clusterwithin cluster_within_distance_garray]]></string>
			<comment><![CDATA[args: g, distance - Aggregate. Returns an array of GeometryCollections, where each GeometryCollection represents a set of geometries separated by no more than the specified distance.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="2003" type="_geometry" />
		</procedure>
		<procedure name="st_collect" id="Procedure_677b03" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_collect(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$LWGEOM_collect$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_collect" id="Procedure_c34559" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_collect(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_collect_garray$function$
]]></string>
			<comment><![CDATA[args: g1_array - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
			<input_param name="$1" jt="2003" type="_geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_collect" id="Procedure_2691116" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_collect LWGEOM_collect_garray
create function st_collect LWGEOM_collect]]></string>
			<comment><![CDATA[args: g1field - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_collectionextract" id="Procedure_2cd03e3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_collectionextract(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_CollectionExtract$function$
]]></string>
			<comment><![CDATA[args: collection, type - Given a (multi)geometry, return a (multi)geometry consisting only of elements of the specified type.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_collectionhomogenize" id="Procedure_17e57bb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_collectionhomogenize(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_CollectionHomogenize$function$
]]></string>
			<comment><![CDATA[args: collection - Given a geometry collection, return the "simplest" representation of the contents.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_colormap" id="Procedure_331e0a2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_colormap(rast raster, nband integer DEFAULT 1, colormap text DEFAULT 'grayscale'::text, method text DEFAULT 'INTERPOLATE'::text)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		_ismap boolean;
		_colormap text;
		_element text[];
	BEGIN
		_ismap := TRUE;
		-- clean colormap to see what it is
		_colormap := split_part(colormap, E'\n', 1);
		_colormap := regexp_replace(_colormap, E':+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E',+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E'\\t+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E' +', ' ', 'g');
		_element := regexp_split_to_array(_colormap, ' ');
		-- treat as colormap
		IF (array_length(_element, 1) > 1) THEN
			_colormap := colormap;
		-- treat as keyword
		ELSE
			method := 'INTERPOLATE';
			CASE lower(trim(both from _colormap))
				WHEN 'grayscale', 'greyscale' THEN
					_colormap := '
100%   0
  0% 254
  nv 255
					';
				WHEN 'pseudocolor' THEN
					_colormap := '
100% 255   0   0 255
 50%   0 255   0 255
  0%   0   0 255 255
  nv   0   0   0   0
					';
				WHEN 'fire' THEN
					_colormap := '
  100% 243 255 221 255
93.75% 242 255 178 255
 87.5% 255 255 135 255
81.25% 255 228  96 255
   75% 255 187  53 255
68.75% 255 131   7 255
 62.5% 255  84   0 255
56.25% 255  42   0 255
   50% 255   0   0 255
43.75% 255  42   0 255
 37.5% 224  74   0 255
31.25% 183  91   0 255
   25% 140  93   0 255
18.75%  99  82   0 255
 12.5%  58  58   1 255
 6.25%  12  15   0 255
    0%   0   0   0 255
    nv   0   0   0   0
					';
				WHEN 'bluered' THEN
					_colormap := '
100.00% 165   0  33 255
 94.12% 216  21  47 255
 88.24% 247  39  53 255
 82.35% 255  61  61 255
 76.47% 255 120  86 255
 70.59% 255 172 117 255
 64.71% 255 214 153 255
 58.82% 255 241 188 255
 52.94% 255 255 234 255
 47.06% 234 255 255 255
 41.18% 188 249 255 255
 35.29% 153 234 255 255
 29.41% 117 211 255 255
 23.53%  86 176 255 255
 17.65%  61 135 255 255
 11.76%  40  87 255 255
  5.88%  24  28 247 255
  0.00%  36   0 216 255
     nv   0   0   0   0
					';
				ELSE
					RAISE EXCEPTION 'Unknown colormap keyword: %', colormap;
			END CASE;
		END IF;
		RETURN public._ST_colormap($1, $2, _colormap, $4);
	END;
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="colormap" jt="12" type="text" />
			<input_param name="method" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_colormap" id="Procedure_4e877f2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_colormap(rast raster, colormap text, method text DEFAULT 'INTERPOLATE'::text)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_ColorMap($1, 1, $2, $3) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="colormap" jt="12" type="text" />
			<input_param name="method" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_combine_bbox" id="Procedure_237ccae" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_combine_bbox(box3d, geometry)
 RETURNS box3d
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT public._postgis_deprecate('ST_Combine_BBox', 'ST_CombineBbox', '2.2.0');
    SELECT public.ST_CombineBbox($1,$2);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="box3d" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="box3d" />
		</procedure>
		<procedure name="st_combine_bbox" id="Procedure_58f505e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_combine_bbox(box2d, geometry)
 RETURNS box2d
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT public._postgis_deprecate('ST_Combine_BBox', 'ST_CombineBbox', '2.2.0');
    SELECT public.ST_CombineBbox($1,$2);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="box2d" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_combinebbox" id="Procedure_56f0769" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_combinebbox(box3d, geometry)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$BOX3D_combine$function$
]]></string>
			<input_param name="$1" jt="1111" type="box3d" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="box3d" />
		</procedure>
		<procedure name="st_combinebbox" id="Procedure_83d332" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_combinebbox(box3d, box3d)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$BOX3D_combine_BOX3D$function$
]]></string>
			<input_param name="$1" jt="1111" type="box3d" />
			<input_param name="$2" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="1111" type="box3d" />
		</procedure>
		<procedure name="st_combinebbox" id="Procedure_541e10a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_combinebbox(box2d, geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$BOX2D_combine$function$
]]></string>
			<input_param name="$1" jt="1111" type="box2d" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_concavehull" id="Procedure_56d8b7c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean DEFAULT false)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		var_convhull geometry := public.ST_ConvexHull(param_geom);
		var_param_geom geometry := param_geom;
		var_initarea float := public.ST_Area(var_convhull);
		var_newarea float := var_initarea;
		var_div integer := 6; 
		var_tempgeom geometry;
		var_tempgeom2 geometry;
		var_cent geometry;
		var_geoms geometry[4]; 
		var_enline geometry;
		var_resultgeom geometry;
		var_atempgeoms geometry[];
		var_buf float := 1; 
	BEGIN
		-- We start with convex hull as our base
		var_resultgeom := var_convhull;
		IF param_pctconvex = 1 THEN
			return var_resultgeom;
		ELSIF public.ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN -- it is as concave as it is going to get
			IF param_allow_holes THEN -- leave the holes
				RETURN var_param_geom;
			ELSE -- remove the holes
				var_resultgeom := public.ST_MakePolygon(public.ST_ExteriorRing(var_param_geom));
				RETURN var_resultgeom;
			END IF;
		END IF;
		IF public.ST_Dimension(var_resultgeom) > 1 AND param_pctconvex BETWEEN 0 and 0.98 THEN
		-- get linestring that forms envelope of geometry
			var_enline := public.ST_Boundary(public.ST_Envelope(var_param_geom));
			var_buf := public.ST_Length(var_enline)/1000.0;
			IF public.ST_GeometryType(var_param_geom) = 'ST_MultiPoint' AND public.ST_NumGeometries(var_param_geom) BETWEEN 4 and 200 THEN
			-- we make polygons out of points since they are easier to cave in.
			-- Note we limit to between 4 and 200 points because this process is slow and gets quadratically slow
				var_buf := sqrt(public.ST_Area(var_convhull)*0.8/(public.ST_NumGeometries(var_param_geom)*public.ST_NumGeometries(var_param_geom)));
				var_atempgeoms := ARRAY(SELECT geom FROM public.ST_DumpPoints(var_param_geom));
				-- 5 and 10 and just fudge factors
				var_tempgeom := public.ST_Union(ARRAY(SELECT geom
						FROM (
						-- fuse near neighbors together
						SELECT DISTINCT ON (i) i,  public.ST_Distance(var_atempgeoms[i],var_atempgeoms[j]), public.ST_Buffer(public.ST_MakeLine(var_atempgeoms[i], var_atempgeoms[j]) , var_buf*5, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									INNER JOIN generate_series(1,array_upper(var_atempgeoms, 1)) As j
										ON (
								 NOT public.ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND public.ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
								UNION ALL
						-- catch the ones with no near neighbors
								SELECT i, 0, public.ST_Buffer(var_atempgeoms[i] , var_buf*10, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									LEFT JOIN generate_series(ceiling(array_upper(var_atempgeoms,1)/2)::integer,array_upper(var_atempgeoms, 1)) As j
										ON (
								 NOT public.ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND public.ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
									WHERE j IS NULL
								ORDER BY 1, 2
							) As foo	) );
				IF public.ST_IsValid(var_tempgeom) AND public.ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
					var_tempgeom := public.ST_ForceSFS(public.ST_Intersection(var_tempgeom, var_convhull));
					IF param_allow_holes THEN
						var_param_geom := var_tempgeom;
					ELSIF public.ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
						var_param_geom := public.ST_MakePolygon(public.ST_ExteriorRing(var_tempgeom));
					ELSE
						var_param_geom := public.ST_ConvexHull(var_param_geom);
					END IF;
					return var_param_geom;
				ELSIF public.ST_IsValid(var_tempgeom) THEN
					var_param_geom := public.ST_ForceSFS(public.ST_Intersection(var_tempgeom, var_convhull));
				END IF;
			END IF;
			IF public.ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN
				IF NOT param_allow_holes THEN
					var_param_geom := public.ST_MakePolygon(public.ST_ExteriorRing(var_param_geom));
				END IF;
				return var_param_geom;
			END IF;
            var_cent := public.ST_Centroid(var_param_geom);
            IF (public.ST_XMax(var_enline) - public.ST_XMin(var_enline) ) > var_buf AND (public.ST_YMax(var_enline) - public.ST_YMin(var_enline) ) > var_buf THEN
                    IF public.ST_Dwithin(public.ST_Centroid(var_convhull) , public.ST_Centroid(public.ST_Envelope(var_param_geom)), var_buf/2) THEN
                -- If the geometric dimension is > 1 and the object is symettric (cutting at centroid will not work -- offset a bit)
                        var_cent := public.ST_Translate(var_cent, (public.ST_XMax(var_enline) - public.ST_XMin(var_enline))/1000,  (public.ST_YMAX(var_enline) - public.ST_YMin(var_enline))/1000);
                    ELSE
                        -- uses closest point on geometry to centroid. I can't explain why we are doing this
                        var_cent := public.ST_ClosestPoint(var_param_geom,var_cent);
                    END IF;
                    IF public.ST_DWithin(var_cent, var_enline,var_buf) THEN
                        var_cent := public.ST_centroid(public.ST_Envelope(var_param_geom));
                    END IF;
                    -- break envelope into 4 triangles about the centroid of the geometry and returned the clipped geometry in each quadrant
                    FOR i in 1 .. 4 LOOP
                       var_geoms[i] := public.ST_MakePolygon(public.ST_MakeLine(ARRAY[public.ST_PointN(var_enline,i), public.ST_PointN(var_enline,i+1), var_cent, public.ST_PointN(var_enline,i)]));
                       var_geoms[i] := public.ST_ForceSFS(public.ST_Intersection(var_param_geom, public.ST_Buffer(var_geoms[i],var_buf)));
                       IF public.ST_IsValid(var_geoms[i]) THEN
                       ELSE
                            var_geoms[i] := public.ST_BuildArea(public.ST_MakeLine(ARRAY[public.ST_PointN(var_enline,i), public.ST_PointN(var_enline,i+1), var_cent, public.ST_PointN(var_enline,i)]));
                       END IF;
                    END LOOP;
                    var_tempgeom := public.ST_Union(ARRAY[public.ST_ConvexHull(var_geoms[1]), public.ST_ConvexHull(var_geoms[2]) , public.ST_ConvexHull(var_geoms[3]), public.ST_ConvexHull(var_geoms[4])]);
                    --RAISE NOTICE 'Curr vex % ', public.ST_AsText(var_tempgeom);
                    IF public.ST_Area(var_tempgeom) <= var_newarea AND public.ST_IsValid(var_tempgeom)  THEN --AND public.ST_GeometryType(var_tempgeom) ILIKE '%Polygon'
                        var_tempgeom := public.ST_Buffer(public.ST_ConcaveHull(var_geoms[1],least(param_pctconvex + param_pctconvex/var_div),true),var_buf, 'quad_segs=2');
                        FOR i IN 1 .. 4 LOOP
                            var_geoms[i] := public.ST_Buffer(public.ST_ConcaveHull(var_geoms[i],least(param_pctconvex + param_pctconvex/var_div),true), var_buf, 'quad_segs=2');
                            IF public.ST_IsValid(var_geoms[i]) Then
                                var_tempgeom := public.ST_Union(var_tempgeom, var_geoms[i]);
                            ELSE
                                RAISE NOTICE 'Not valid % %', i, public.ST_AsText(var_tempgeom);
                                var_tempgeom := public.ST_Union(var_tempgeom, public.ST_ConvexHull(var_geoms[i]));
                            END IF;
                        END LOOP;
                        --RAISE NOTICE 'Curr concave % ', public.ST_AsText(var_tempgeom);
                        IF public.ST_IsValid(var_tempgeom) THEN
                            var_resultgeom := var_tempgeom;
                        END IF;
                        var_newarea := public.ST_Area(var_resultgeom);
                    ELSIF public.ST_IsValid(var_tempgeom) THEN
                        var_resultgeom := var_tempgeom;
                    END IF;
                    IF public.ST_NumGeometries(var_resultgeom) > 1  THEN
                        var_tempgeom := public._ST_ConcaveHull(var_resultgeom);
                        IF public.ST_IsValid(var_tempgeom) AND public.ST_GeometryType(var_tempgeom) ILIKE 'ST_Polygon' THEN
                            var_resultgeom := var_tempgeom;
                        ELSE
                            var_resultgeom := public.ST_Buffer(var_tempgeom,var_buf, 'quad_segs=2');
                        END IF;
                    END IF;
                    IF param_allow_holes = false THEN
                    -- only keep exterior ring since we do not want holes
                        var_resultgeom := public.ST_MakePolygon(public.ST_ExteriorRing(var_resultgeom));
                    END IF;
                ELSE
                    var_resultgeom := public.ST_Buffer(var_resultgeom,var_buf);
                END IF;
                var_resultgeom := public.ST_ForceSFS(public.ST_Intersection(var_resultgeom, public.ST_ConvexHull(var_param_geom)));
            ELSE
                -- dimensions are too small to cut
                var_resultgeom := public._ST_ConcaveHull(var_param_geom);
            END IF;
            RETURN var_resultgeom;
	END;
$function$
]]></string>
			<comment><![CDATA[args: geomA, target_percent, allow_holes=false - The concave hull of a geometry represents a possibly concave geometry that encloses all geometries within the set. You can think of it as shrink wrapping.]]></comment>
			<input_param name="param_geom" jt="1111" type="geometry" />
			<input_param name="param_pctconvex" jt="8" type="float8" />
			<input_param name="param_allow_holes" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_contains" id="Procedure_1e89619" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_contains(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.~) $2 AND public._ST_Contains($1,$2)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_contains" id="Procedure_14907d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_contains(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_contains($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastB lie in the exterior of raster rastA and at least one point of the interior of rastB lies in the interior of rastA.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_contains" id="Procedure_585067e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_contains(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT public.st_contains($1, NULL::integer, $2, NULL::integer) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastB lie in the exterior of raster rastA and at least one point of the interior of rastB lies in the interior of rastA.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_containsproperly" id="Procedure_356df6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_containsproperly(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.~) $2 AND public._ST_ContainsProperly($1,$2)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns true if B intersects the interior of A but not the boundary (or exterior). A does not contain properly itself, but does contain itself.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_containsproperly" id="Procedure_198a652" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_containsproperly(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_containsproperly($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if rastB intersects the interior of rastA but not the boundary or exterior of rastA.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_containsproperly" id="Procedure_1f066af" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_containsproperly(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT public.st_containsproperly($1, NULL::integer, $2, NULL::integer) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Return true if rastB intersects the interior of rastA but not the boundary or exterior of rastA.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_convexhull" id="Procedure_5082e54" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_convexhull(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$convexhull$function$
]]></string>
			<comment><![CDATA[args: geomA - The convex hull of a geometry represents the minimum convex geometry that encloses all geometries within the set.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_convexhull" id="Procedure_4fdc7e6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_convexhull(raster)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 300
AS '$libdir/rtpostgis-2.4', $function$RASTER_convex_hull$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_coorddim" id="Procedure_38f799e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_coorddim(geometry geometry)
 RETURNS smallint
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 5
AS '$libdir/postgis-2.4', $function$LWGEOM_ndims$function$
]]></string>
			<comment><![CDATA[args: geomA - Return the coordinate dimension of the ST_Geometry value.]]></comment>
			<input_param name="geometry" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="5" type="int2" />
		</procedure>
		<procedure name="st_count" id="Procedure_3cb74be" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_count(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_count($1, $2, $3, 1) $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_count" id="Procedure_5f03b14" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_count(rast raster, exclude_nodata_value boolean)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_count($1, 1, $2, 1) $function$
]]></string>
			<comment><![CDATA[args: rast, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_count" id="Procedure_1216c9b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_count(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_count($1, $2, $3, $4, 1) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_count" id="Procedure_4e182a8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_count($1, $2, 1, $3, 1) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="st_coveredby" id="Procedure_32abc03" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_coveredby(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.@) $2 AND public._ST_CoveredBy($1,$2)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_coveredby" id="Procedure_62e708" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_coveredby(geography, geography)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Covers($2, $1)$function$
]]></string>
			<comment><![CDATA[args: geogA, geogB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_coveredby" id="Procedure_5f61e6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_coveredby(text, text)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_CoveredBy($1::public.geometry, $2::public.geometry);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_coveredby" id="Procedure_12fefd5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_coveredby(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_coveredby($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastA lie outside raster rastB.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_coveredby" id="Procedure_429efab" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_coveredby(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT public.st_coveredby($1, NULL::integer, $2, NULL::integer) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastA lie outside raster rastB.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_covers" id="Procedure_4b446ed" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_covers(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.~) $2 AND public._ST_Covers($1,$2)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_covers" id="Procedure_38c2c82" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_covers(geography, geography)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Covers($1, $2)$function$
]]></string>
			<comment><![CDATA[args: geogpolyA, geogpointB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_covers" id="Procedure_230b04f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_covers(text, text)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_Covers($1::public.geometry, $2::public.geometry);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_covers" id="Procedure_4ce42ca" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_covers(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_covers($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastB lie outside raster rastA.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_covers" id="Procedure_1fe8851" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_covers(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT public.st_covers($1, NULL::integer, $2, NULL::integer) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastB lie outside raster rastA.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_cpawithin" id="Procedure_10ea5f2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_cpawithin(geometry, geometry, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_CPAWithin$function$
]]></string>
			<comment><![CDATA[args: track1, track2, maxdist - Returns true if the trajectories closest points of approachare within the specified distance.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="geometry" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_createoverview" id="Procedure_4f2e033" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_createoverview(tab regclass, col name, factor integer, algo text DEFAULT 'NearestNeighbour'::text)
 RETURNS regclass
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  sinfo RECORD; -- source info
  sql TEXT;
  ttab TEXT;
BEGIN
  -- 0. Check arguments, we need to ensure:
  --    a. Source table has a raster column with given name
  --    b. Source table has a fixed scale (or "factor" would have no meaning)
  --    c. Source table has a known extent ? (we could actually compute it)
  --    d. Source table has a fixed tile size (or "factor" would have no meaning?)
  -- # all of the above can be checked with a query to raster_columns
  sql := 'SELECT r.r_table_schema sch, r.r_table_name tab, '
      || 'r.scale_x sfx, r.scale_y sfy, r.blocksize_x tw, '
      || 'r.blocksize_y th, r.extent ext, r.srid FROM public.raster_columns r, '
      || 'pg_class c, pg_namespace n WHERE r.r_table_schema = n.nspname '
      || 'AND r.r_table_name = c.relname AND r_raster_column = $2 AND '
      || ' c.relnamespace = n.oid AND c.oid = $1'
  ;
  EXECUTE sql INTO sinfo USING tab, col;
  IF sinfo IS NULL THEN
      RAISE EXCEPTION '%.% raster column does not exist', tab::text, col;
  END IF;
  IF sinfo.sfx IS NULL or sinfo.sfy IS NULL THEN
    RAISE EXCEPTION 'cannot create overview without scale constraint, try select AddRasterConstraints(''%'', ''%'');', tab::text, col;
  END IF;
  IF sinfo.tw IS NULL or sinfo.tw IS NULL THEN
    RAISE EXCEPTION 'cannot create overview without tilesize constraint, try select AddRasterConstraints(''%'', ''%'');', tab::text, col;
  END IF;
  IF sinfo.ext IS NULL THEN
    RAISE EXCEPTION 'cannot create overview without extent constraint, try select AddRasterConstraints(''%'', ''%'');', tab::text, col;
  END IF;
  -- TODO: lookup in raster_overviews to see if there's any
  --       lower-resolution table to start from
  ttab := 'o_' || factor || '_' || sinfo.tab;
  sql := 'CREATE TABLE ' || quote_ident(sinfo.sch)
      || '.' || quote_ident(ttab)
      || ' AS SELECT ST_Retile($1, $2, $3, $4, $5, $6, $7) '
      || quote_ident(col);
  EXECUTE sql USING tab, col, sinfo.ext,
                    sinfo.sfx * factor, sinfo.sfy * factor,
                    sinfo.tw, sinfo.th, algo;
  -- TODO: optimize this using knowledge we have about
  --       the characteristics of the target column ?
  PERFORM public.AddRasterConstraints(sinfo.sch, ttab, col);
  PERFORM  public.AddOverviewConstraints(sinfo.sch, ttab, col,
                                 sinfo.sch, sinfo.tab, col, factor);
    -- return the schema as well as the table
  RETURN sinfo.sch||'.'||ttab;
END;
$function$
]]></string>
			<comment><![CDATA[args: tab, col, factor, algo='NearestNeighbor' - Create an reduced resolution version of a given raster coverage.]]></comment>
			<input_param name="tab" jt="1111" type="regclass" />
			<input_param name="col" jt="12" type="name" />
			<input_param name="factor" jt="4" type="int4" />
			<input_param name="algo" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="regclass" />
		</procedure>
		<procedure name="st_crosses" id="Procedure_20d08ed" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_crosses(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Crosses($1,$2)$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns TRUE if the supplied geometries have some, but not all, interior points in common.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_curvetoline" id="Procedure_477dd92" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_curvetoline(geom geometry, tol double precision, toltype integer, flags integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_CurveToLine$function$
]]></string>
			<comment><![CDATA[args: curveGeom, tolerance, tolerance_type, flags - Converts a CIRCULARSTRING/CURVEPOLYGON to a LINESTRING/POLYGON]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="tol" jt="8" type="float8" />
			<input_param name="toltype" jt="4" type="int4" />
			<input_param name="flags" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_curvetoline" id="Procedure_45dd4a1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_curvetoline(geometry, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT ST_CurveToLine($1, $2::float8, 0, 0)$function$
]]></string>
			<comment><![CDATA[args: curveGeom, segments_per_qtr_circle - Converts a CIRCULARSTRING/CURVEPOLYGON to a LINESTRING/POLYGON]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_curvetoline" id="Procedure_1539a48" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_curvetoline(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT ST_CurveToLine($1, 32::integer)$function$
]]></string>
			<comment><![CDATA[args: curveGeom - Converts a CIRCULARSTRING/CURVEPOLYGON to a LINESTRING/POLYGON]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_delaunaytriangles" id="Procedure_3c72228" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_delaunaytriangles(g1 geometry, tolerance double precision DEFAULT 0.0, flags integer DEFAULT 0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_DelaunayTriangles$function$
]]></string>
			<comment><![CDATA[args: g1, tolerance, flags - Return a Delaunay triangulation around the given input points.]]></comment>
			<input_param name="g1" jt="1111" type="geometry" />
			<input_param name="tolerance" jt="8" type="float8" />
			<input_param name="flags" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_dfullywithin" id="Procedure_3520d6a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dfullywithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 OPERATOR(public.&&) public.ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public.ST_Expand($1,$3) AND public._ST_DFullyWithin(public.ST_ConvexHull($1), public.ST_ConvexHull($2), $3)$function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance - Returns true if all of the geometries are within the specified distance of one another]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_dfullywithin" id="Procedure_5c54ab9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1::geometry OPERATOR(public.&&) public.ST_Expand(public.ST_ConvexHull($3), $5) AND $3::geometry OPERATOR(public.&&) public.ST_Expand(public.ST_ConvexHull($1), $5) AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._ST_DFullyWithin(public.ST_ConvexHull($1), public.ST_Convexhull($3), $5) ELSE public._ST_DFullyWithin($1, $2, $3, $4, $5) END $function$
]]></string>
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB, distance_of_srid - Return true if rasters rastA and rastB are fully within the specified distance of each other.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<input_param name="distance" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_dfullywithin" id="Procedure_4d69dc6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dfullywithin(rast1 raster, rast2 raster, distance double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT public.ST_DFullyWithin($1, NULL::integer, $2, NULL::integer, $3) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB, distance_of_srid - Return true if rasters rastA and rastB are fully within the specified distance of each other.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="distance" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_difference" id="Procedure_47f9e0d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_difference(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$difference$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns a geometry that represents that part of geometry A that does not intersect with geometry B.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_dimension" id="Procedure_512f931" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dimension(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_dimension$function$
]]></string>
			<comment><![CDATA[args: g - The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_disjoint" id="Procedure_2e35e91" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_disjoint(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$disjoint$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns TRUE if the Geometries do not "spatially intersect" - if they do not share any space together.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_disjoint" id="Procedure_3856620" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT CASE WHEN $2 IS NULL OR $4 IS NULL THEN public.ST_Disjoint(public.ST_ConvexHull($1), public.ST_ConvexHull($3)) ELSE NOT public._ST_intersects($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA does not spatially intersect rastB.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_disjoint" id="Procedure_139b2ae" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_disjoint(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT public.ST_Disjoint($1, NULL::integer, $2, NULL::integer) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Return true if raster rastA does not spatially intersect rastB.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_distance" id="Procedure_38fdc04" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 25
AS '$libdir/postgis-2.4', $function$distance$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - For geometry type Returns the 2D Cartesian distance between two geometries in projected units (based on spatial ref). For geography type defaults to return minimum geodesic distance between two geographies in meters.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_distance" id="Procedure_47be7ac" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance(geography, geography, boolean)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public._ST_Distance($1, $2, 0.0, $3)$function$
]]></string>
			<comment><![CDATA[args: gg1, gg2, use_spheroid - For geometry type Returns the 2D Cartesian distance between two geometries in projected units (based on spatial ref). For geography type defaults to return minimum geodesic distance between two geographies in meters.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_distance" id="Procedure_5041b07" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance(geography, geography)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public._ST_Distance($1, $2, 0.0, true)$function$
]]></string>
			<comment><![CDATA[args: gg1, gg2 - For geometry type Returns the 2D Cartesian distance between two geometries in projected units (based on spatial ref). For geography type defaults to return minimum geodesic distance between two geographies in meters.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_distance" id="Procedure_5e1918e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance(text, text)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_Distance($1::public.geometry, $2::public.geometry);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_distance_sphere" id="Procedure_1801a1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance_sphere(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 300
AS $function$ SELECT public._postgis_deprecate('ST_Distance_Sphere', 'ST_DistanceSphere', '2.2.0');
    SELECT public.ST_DistanceSphere($1,$2);
  $function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_distance_spheroid" id="Procedure_26e8810" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Distance_Spheroid', 'ST_DistanceSpheroid', '2.2.0');
    SELECT public.ST_DistanceSpheroid($1,$2,$3);
  $function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="1111" type="spheroid" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_distancecpa" id="Procedure_5a7937d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distancecpa(geometry, geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_DistanceCPA$function$
]]></string>
			<comment><![CDATA[args: track1, track2 - Returns the distance between closest points of approach in two trajectories.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_distancesphere" id="Procedure_5df3c68" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distancesphere(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 300
AS $function$
	select public.ST_distance( public.geography($1), public.geography($2),false)
	$function$
]]></string>
			<comment><![CDATA[args: geomlonlatA, geomlonlatB - Returns minimum distance in meters between two lon/lat geometries. Uses a spherical earth and radius derived from the spheroid defined by the SRID. Faster than ST_DistanceSpheroid , but less accurate. PostGIS versions prior to 1.5 only implemented for points.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_distancespheroid" id="Procedure_2afb06a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distancespheroid(geom1 geometry, geom2 geometry, spheroid)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 200
AS '$libdir/postgis-2.4', $function$LWGEOM_distance_ellipsoid$function$
]]></string>
			<comment><![CDATA[args: geomlonlatA, geomlonlatB, measurement_spheroid - Returns the minimum distance between two lon/lat geometries given a particular spheroid. PostGIS versions prior to 1.5 only support points.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="1111" type="spheroid" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_distinct4ma" id="Procedure_2d34e15" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT COUNT(DISTINCT unnest)::float FROM unnest($1) $function$
]]></string>
			<input_param name="matrix" jt="2003" type="_float8" />
			<input_param name="nodatamode" jt="12" type="text" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_distinct4ma" id="Procedure_50347c8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT COUNT(DISTINCT unnest)::double precision FROM unnest($1) $function$
]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_dump" id="Procedure_562be34" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dump(geometry)
 RETURNS SETOF geometry_dump
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$LWGEOM_dump$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a set of geometry_dump (geom,path) rows, that make up a geometry g1.]]></comment>
			<input_param name="path" jt="2003" type="_int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="$1" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_dumpaspolygons" id="Procedure_5cea4c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumpaspolygons(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS SETOF geomval
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_dumpAsPolygons$function$
]]></string>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="val" jt="8" type="float8" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_dumppoints" id="Procedure_57606b2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumppoints(geometry)
 RETURNS SETOF geometry_dump
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$LWGEOM_dumppoints$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a set of geometry_dump (geom,path) rows of all points that make up a geometry.]]></comment>
			<input_param name="path" jt="2003" type="_int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="$1" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_dumprings" id="Procedure_5a232c3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumprings(geometry)
 RETURNS SETOF geometry_dump
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_dump_rings$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Returns a set of geometry_dump rows, representing the exterior and interior rings of a polygon.]]></comment>
			<input_param name="path" jt="2003" type="_int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="$1" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_dumpvalues" id="Procedure_2e32d73" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumpvalues(rast raster, nband integer[] DEFAULT NULL::integer[], exclude_nodata_value boolean DEFAULT true, OUT nband integer, OUT valarray double precision[])
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_dumpValues$function$
]]></string>
			<comment><![CDATA[args: rast, nband=NULL, exclude_nodata_value=true - Get the values of the specified band as a 2-dimension array.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="2003" type="_int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="valarray" jt="2003" type="_float8" />
		</procedure>
		<procedure name="st_dumpvalues" id="Procedure_5e1d9ea" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision[]
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT valarray FROM public.ST_dumpvalues($1, ARRAY[$2]::integer[], $3) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, exclude_nodata_value=true - Get the values of the specified band as a 2-dimension array.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="2003" type="_float8" />
		</procedure>
		<procedure name="st_dwithin" id="Procedure_27fbee6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dwithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) public.ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public.ST_Expand($1,$3) AND public._ST_DWithin($1, $2, $3)$function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance_of_srid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_dwithin" id="Procedure_5a1a50f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dwithin(geography, geography, double precision, boolean)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) public._ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public._ST_Expand($1,$3) AND public._ST_DWithin($1, $2, $3, $4)$function$
]]></string>
			<comment><![CDATA[args: gg1, gg2, distance_meters, use_spheroid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_dwithin" id="Procedure_2b1bf9d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dwithin(geography, geography, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) public._ST_Expand($2,$3) AND $2 OPERATOR(public.&&) public._ST_Expand($1,$3) AND public._ST_DWithin($1, $2, $3, true)$function$
]]></string>
			<comment><![CDATA[args: gg1, gg2, distance_meters - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_dwithin" id="Procedure_26619d4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dwithin(text, text, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_DWithin($1::public.geometry, $2::public.geometry, $3);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_dwithin" id="Procedure_2478be0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1::geometry OPERATOR(public.&&) ST_Expand(ST_ConvexHull($3), $5) AND $3::geometry OPERATOR(public.&&) ST_Expand(ST_ConvexHull($1), $5) AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._ST_dwithin(st_convexhull($1), st_convexhull($3), $5) ELSE public._ST_dwithin($1, $2, $3, $4, $5) END $function$
]]></string>
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB, distance_of_srid - Return true if rasters rastA and rastB are within the specified distance of each other.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<input_param name="distance" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_dwithin" id="Procedure_5b517ff" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dwithin(rast1 raster, rast2 raster, distance double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT public.st_dwithin($1, NULL::integer, $2, NULL::integer, $3) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB, distance_of_srid - Return true if rasters rastA and rastB are within the specified distance of each other.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="distance" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_endpoint" id="Procedure_27ea044" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_endpoint(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_endpoint_linestring$function$
]]></string>
			<comment><![CDATA[args: g - Returns the last point of a LINESTRING or CIRCULARLINESTRING geometry as a POINT.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_envelope" id="Procedure_5f06942" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_envelope(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_envelope$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a geometry representing the double precision (float8) bounding box of the supplied geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_envelope" id="Procedure_57502e6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_envelope(raster)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_envelope$function$
]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_equals" id="Procedure_5c042fa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_equals(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.~=) $2 AND public._ST_Equals($1,$2)$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns true if the given geometries represent the same geometry. Directionality is ignored.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_estimated_extent" id="Procedure_5dac0e4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_estimated_extent(text, text, text)
 RETURNS box2d
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Estimated_Extent', 'ST_EstimatedExtent', '2.1.0');
    -- We use security invoker instead of security definer
    -- to prevent malicious injection of a different same named function
    SELECT public.ST_EstimatedExtent($1, $2, $3);
  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_estimated_extent" id="Procedure_5dd80ee" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_estimated_extent(text, text)
 RETURNS box2d
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Estimated_Extent', 'ST_EstimatedExtent', '2.1.0');
    -- We use security invoker instead of security definer
    -- to prevent malicious injection of a same named different function
    -- that would be run under elevated permissions
    SELECT public.ST_EstimatedExtent($1, $2);
  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_estimatedextent" id="Procedure_4d1ab6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_estimatedextent(text, text, text, boolean)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT SECURITY DEFINER
AS '$libdir/postgis-2.4', $function$gserialized_estimated_extent$function$
]]></string>
			<comment><![CDATA[args: schema_name, table_name, geocolumn_name, parent_ony - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_estimatedextent" id="Procedure_2be2b52" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_estimatedextent(text, text, text)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT SECURITY DEFINER
AS '$libdir/postgis-2.4', $function$gserialized_estimated_extent$function$
]]></string>
			<comment><![CDATA[args: schema_name, table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_estimatedextent" id="Procedure_24a1f38" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_estimatedextent(text, text)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT SECURITY DEFINER
AS '$libdir/postgis-2.4', $function$gserialized_estimated_extent$function$
]]></string>
			<comment><![CDATA[args: table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_expand" id="Procedure_4355390" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_expand(box2d, double precision)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX2D_expand$function$
]]></string>
			<comment><![CDATA[args: box, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
			<input_param name="$1" jt="1111" type="box2d" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_expand" id="Procedure_2d39e38" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_expand(box box2d, dx double precision, dy double precision)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX2D_expand$function$
]]></string>
			<comment><![CDATA[args: box, dx, dy - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
			<input_param name="box" jt="1111" type="box2d" />
			<input_param name="dx" jt="8" type="float8" />
			<input_param name="dy" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_expand" id="Procedure_1e30900" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_expand(box3d, double precision)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_expand$function$
]]></string>
			<comment><![CDATA[args: box, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
			<input_param name="$1" jt="1111" type="box3d" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="box3d" />
		</procedure>
		<procedure name="st_expand" id="Procedure_2479e90" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_expand(box box3d, dx double precision, dy double precision, dz double precision DEFAULT 0)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_expand$function$
]]></string>
			<comment><![CDATA[args: box, dx, dy, dz=0 - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
			<input_param name="box" jt="1111" type="box3d" />
			<input_param name="dx" jt="8" type="float8" />
			<input_param name="dy" jt="8" type="float8" />
			<input_param name="dz" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="box3d" />
		</procedure>
		<procedure name="st_expand" id="Procedure_169776e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_expand(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_expand$function$
]]></string>
			<comment><![CDATA[args: geom, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_expand" id="Procedure_4faac5b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_expand(geom geometry, dx double precision, dy double precision, dz double precision DEFAULT 0, dm double precision DEFAULT 0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_expand$function$
]]></string>
			<comment><![CDATA[args: geom, dx, dy, dz=0, dm=0 - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="dx" jt="8" type="float8" />
			<input_param name="dy" jt="8" type="float8" />
			<input_param name="dz" jt="8" type="float8" />
			<input_param name="dm" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_exteriorring" id="Procedure_2b6de23" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_exteriorring(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_exteriorring_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Returns a line string representing the exterior ring of the POLYGON geometry. Return NULL if the geometry is not a polygon. Will not work with MULTIPOLYGON]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_find_extent" id="Procedure_128aeac" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_find_extent(text, text, text)
 RETURNS box2d
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Find_Extent', 'ST_FindExtent', '2.2.0');
    SELECT public.ST_FindExtent($1,$2,$3);
  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_find_extent" id="Procedure_7cff1d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_find_extent(text, text)
 RETURNS box2d
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Find_Extent', 'ST_FindExtent', '2.2.0');
    SELECT public.ST_FindExtent($1,$2);
  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_findextent" id="Procedure_3d8a13d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_findextent(text, text, text)
 RETURNS box2d
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;
BEGIN
	FOR myrec IN EXECUTE 'SELECT public.ST_Extent("' || columnname || '") As extent FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_findextent" id="Procedure_48fafe" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_findextent(text, text)
 RETURNS box2d
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;
BEGIN
	FOR myrec IN EXECUTE 'SELECT public.ST_Extent("' || columnname || '") As extent FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_flipcoordinates" id="Procedure_b7681d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_flipcoordinates(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_FlipCoordinates$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a version of the given geometry with X and Y axis flipped. Useful for people who have built latitude/longitude features and need to fix them.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_force2d" id="Procedure_20dce62" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force2d(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_force_2d$function$
]]></string>
			<comment><![CDATA[args: geomA - Force the geometries into a "2-dimensional mode".]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_force3d" id="Procedure_230e021" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force3d(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_force_3dz$function$
]]></string>
			<comment><![CDATA[args: geomA - Force the geometries into XYZ mode. This is an alias for ST_Force3DZ.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_force3dm" id="Procedure_20a76ee" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force3dm(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_force_3dm$function$
]]></string>
			<comment><![CDATA[args: geomA - Force the geometries into XYM mode.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_force3dz" id="Procedure_24756e5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force3dz(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_force_3dz$function$
]]></string>
			<comment><![CDATA[args: geomA - Force the geometries into XYZ mode.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_force4d" id="Procedure_390aa76" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force4d(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_force_4d$function$
]]></string>
			<comment><![CDATA[args: geomA - Force the geometries into XYZM mode.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_force_2d" id="Procedure_3d36a9b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_2d(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Force_2d', 'ST_Force2D', '2.1.0');
    SELECT public.ST_Force2D($1);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_force_3d" id="Procedure_5ac5439" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_3d(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Force_3d', 'ST_Force3D', '2.1.0');
    SELECT public.ST_Force3D($1);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_force_3dm" id="Procedure_33b6dee" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_3dm(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Force_3dm', 'ST_Force3DM', '2.1.0');
    SELECT public.ST_Force3DM($1);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_force_3dz" id="Procedure_4322143" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_3dz(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Force_3dz', 'ST_Force3DZ', '2.1.0');
    SELECT public.ST_Force3DZ($1);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_force_4d" id="Procedure_560d2c5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_4d(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Force_4d', 'ST_Force4D', '2.1.0');
    SELECT public.ST_Force4D($1);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_force_collection" id="Procedure_99f7a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_collection(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Force_Collection', 'ST_ForceCollection', '2.1.0');
    SELECT public.ST_ForceCollection($1);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_forcecollection" id="Procedure_31d7874" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_forcecollection(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_force_collection$function$
]]></string>
			<comment><![CDATA[args: geomA - Convert the geometry into a GEOMETRYCOLLECTION.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_forcecurve" id="Procedure_2c77488" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_forcecurve(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_force_curve$function$
]]></string>
			<comment><![CDATA[args: g - Upcast a geometry into its curved type, if applicable.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_forcepolygonccw" id="Procedure_4ade9e0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_forcepolygonccw(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 15
AS $function$ SELECT public.ST_Reverse(public.ST_ForcePolygonCW($1)) $function$
]]></string>
			<comment><![CDATA[args: geom - Orients all exterior rings counter-clockwise and all interior rings clockwise.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_forcepolygoncw" id="Procedure_20883e5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_forcepolygoncw(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 15
AS '$libdir/postgis-2.4', $function$LWGEOM_force_clockwise_poly$function$
]]></string>
			<comment><![CDATA[args: geom - Orients all exterior rings clockwise and all interior rings counter-clockwise.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_forcerhr" id="Procedure_44140a0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_forcerhr(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_force_clockwise_poly$function$
]]></string>
			<comment><![CDATA[args: g - Force the orientation of the vertices in a polygon to follow the Right-Hand-Rule.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_forcesfs" id="Procedure_1baf1c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_forcesfs(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_force_sfs$function$
]]></string>
			<comment><![CDATA[args: geomA - Force the geometries to use SFS 1.1 geometry types only.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_forcesfs" id="Procedure_57aadec" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_forcesfs(geometry, version text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_force_sfs$function$
]]></string>
			<comment><![CDATA[args: geomA, version - Force the geometries to use SFS 1.1 geometry types only.]]></comment>
			<input_param name="" jt="1111" type="geometry" />
			<input_param name="version" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_frechetdistance" id="Procedure_538815c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_frechetdistance(geom1 geometry, geom2 geometry, double precision DEFAULT '-1'::integer)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$ST_FrechetDistance$function$
]]></string>
			<comment><![CDATA[args: g1, g2, densifyFrac = -1 - Returns the Fréchet distance between two geometries. This is a measure of similarity between curves that takes into account the location and ordering of the points along the curves. Units are in the units of the spatial reference system of the geometries.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_fromgdalraster" id="Procedure_2303d34" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_fromgdalraster(gdaldata bytea, srid integer DEFAULT NULL::integer)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_fromGDALRaster$function$
]]></string>
			<comment><![CDATA[args: gdaldata, srid=NULL - Returns a raster from a supported GDAL raster file.]]></comment>
			<input_param name="gdaldata" jt="-2" type="bytea" />
			<input_param name="srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_gdaldrivers" id="Procedure_1296bc6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getGDALDrivers$function$
]]></string>
			<comment><![CDATA[args: OUT idx, OUT short_name, OUT long_name, OUT create_options - Returns a list of raster formats supported by your lib gdal. These are the formats you can output your raster using ST_AsGDALRaster.]]></comment>
			<input_param name="idx" jt="4" type="int4" />
			<input_param name="short_name" jt="12" type="text" />
			<input_param name="long_name" jt="12" type="text" />
			<input_param name="create_options" jt="12" type="text" />
		</procedure>
		<procedure name="st_generatepoints" id="Procedure_5f4e73d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_generatepoints(area geometry, npoints numeric)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_GeneratePoints$function$
]]></string>
			<comment><![CDATA[args: g, npoints - Converts a polygon or multi-polygon into a multi-point composed of randomly location points within the original areas.]]></comment>
			<input_param name="area" jt="1111" type="geometry" />
			<input_param name="npoints" jt="2" type="numeric" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geogfromtext" id="Procedure_4e78a71" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geogfromtext(text)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_from_text$function$
]]></string>
			<comment><![CDATA[args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="st_geogfromwkb" id="Procedure_1654db4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geogfromwkb(bytea)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_from_binary$function$
]]></string>
			<comment><![CDATA[args: wkb - Creates a geography instance from a Well-Known Binary geometry representation (WKB) or extended Well Known Binary (EWKB).]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="st_geographyfromtext" id="Procedure_346471d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geographyfromtext(text)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geography_from_text$function$
]]></string>
			<comment><![CDATA[args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="st_geohash" id="Procedure_1785f92" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geohash(geom geometry, maxchars integer DEFAULT 0)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_GeoHash$function$
]]></string>
			<comment><![CDATA[args: geom, maxchars=full_precision_of_point - Return a GeoHash representation of the geometry.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="maxchars" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_geohash" id="Procedure_5bad3f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geohash(geog geography, maxchars integer DEFAULT 0)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_GeoHash$function$
]]></string>
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="maxchars" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_geomcollfromtext" id="Procedure_297285b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomcollfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE
	WHEN geometrytype(public.ST_GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomcollfromtext" id="Procedure_1e2ffe0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomcollfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomcollfromwkb" id="Procedure_2c7b7aa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomcollfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomcollfromwkb" id="Procedure_5253410" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomcollfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geometricmedian" id="Procedure_5b95b7a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geometricmedian(g geometry, tolerance double precision DEFAULT NULL::double precision, max_iter integer DEFAULT 10000, fail_if_not_converged boolean DEFAULT false)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$ST_GeometricMedian$function$
]]></string>
			<comment><![CDATA[args: 
					g
				, 
					tolerance
				, 
					max_iter
				, 
					fail_if_not_converged
				 - Returns the geometric median of a MultiPoint.]]></comment>
			<input_param name="g" jt="1111" type="geometry" />
			<input_param name="tolerance" jt="8" type="float8" />
			<input_param name="max_iter" jt="4" type="int4" />
			<input_param name="fail_if_not_converged" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geometryfromtext" id="Procedure_5a2806c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geometryfromtext(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_from_text$function$
]]></string>
			<comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geometryfromtext" id="Procedure_56fa8ff" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geometryfromtext(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_from_text$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geometryn" id="Procedure_13279bd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geometryn(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_geometryn_collection$function$
]]></string>
			<comment><![CDATA[args: geomA, n - Return the 1-based Nth geometry if the geometry is a GEOMETRYCOLLECTION, (MULTI)POINT, (MULTI)LINESTRING, MULTICURVE or (MULTI)POLYGON, POLYHEDRALSURFACE Otherwise, return NULL.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geometrytype" id="Procedure_56686e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geometrytype(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$geometry_geometrytype$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the geometry type of the ST_Geometry value.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_geomfromewkb" id="Procedure_4a6dc32" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromewkb(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOMFromEWKB$function$
]]></string>
			<comment><![CDATA[args: EWKB - Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomfromewkt" id="Procedure_77c127" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromewkt(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$parse_WKT_lwgeom$function$
]]></string>
			<comment><![CDATA[args: EWKT - Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomfromgeohash" id="Procedure_5c5befa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromgeohash(text, integer DEFAULT NULL::integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT CAST(public.ST_Box2dFromGeoHash($1, $2) AS geometry); $function$
]]></string>
			<comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a geometry from a GeoHash string.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomfromgeojson" id="Procedure_5bac1a8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromgeojson(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geom_from_geojson$function$
]]></string>
			<comment><![CDATA[args: geomjson - Takes as input a geojson representation of a geometry and outputs a PostGIS geometry object]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomfromgml" id="Procedure_973b72" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromgml(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geom_from_gml$function$
]]></string>
			<comment><![CDATA[args: geomgml, srid - Takes as input GML representation of geometry and outputs a PostGIS geometry object]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomfromgml" id="Procedure_22d4abf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromgml(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public._ST_GeomFromGML($1, 0)$function$
]]></string>
			<comment><![CDATA[args: geomgml - Takes as input GML representation of geometry and outputs a PostGIS geometry object]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomfromkml" id="Procedure_521fd4f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromkml(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geom_from_kml$function$
]]></string>
			<comment><![CDATA[args: geomkml - Takes as input KML representation of geometry and outputs a PostGIS geometry object]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomfromtext" id="Procedure_c2067b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromtext(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_from_text$function$
]]></string>
			<comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT).]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomfromtext" id="Procedure_5e27c6f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromtext(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_from_text$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT).]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomfromtwkb" id="Procedure_19eb8ea" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromtwkb(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOMFromTWKB$function$
]]></string>
			<comment><![CDATA[args: twkb - Creates a geometry instance from a TWKB ("Tiny Well-Known Binary") geometry representation.]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomfromwkb" id="Procedure_6466f3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromwkb(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_from_WKB$function$
]]></string>
			<comment><![CDATA[args: geom - Makes a geometry from WKB with the given SRID]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_geomfromwkb" id="Procedure_a25776" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_SetSRID(public.ST_GeomFromWKB($1), $2)$function$
]]></string>
			<comment><![CDATA[args: geom, srid - Makes a geometry from WKB with the given SRID]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_georeference" id="Procedure_2d0c8b2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_georeference(rast raster, format text DEFAULT 'GDAL'::text)
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
    DECLARE
				scale_x numeric;
				scale_y numeric;
				skew_x numeric;
				skew_y numeric;
				ul_x numeric;
				ul_y numeric;
        result text;
    BEGIN
			SELECT scalex::numeric, scaley::numeric, skewx::numeric, skewy::numeric, upperleftx::numeric, upperlefty::numeric
				INTO scale_x, scale_y, skew_x, skew_y, ul_x, ul_y FROM public.ST_Metadata(rast);
						-- scale x
            result := trunc(scale_x, 10) || E'\n';
						-- skew y
            result := result || trunc(skew_y, 10) || E'\n';
						-- skew x
            result := result || trunc(skew_x, 10) || E'\n';
						-- scale y
            result := result || trunc(scale_y, 10) || E'\n';
        IF format = 'ESRI' THEN
						-- upper left x
            result := result || trunc((ul_x + scale_x * 0.5), 10) || E'\n';
						-- upper left y
            result = result || trunc((ul_y + scale_y * 0.5), 10) || E'\n';
        ELSE -- IF format = 'GDAL' THEN
						-- upper left x
            result := result || trunc(ul_x, 10) || E'\n';
						-- upper left y
            result := result || trunc(ul_y, 10) || E'\n';
        END IF;
        RETURN result;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: rast, format=GDAL - Returns the georeference meta data in GDAL or ESRI format as commonly seen in a world file. Default is GDAL.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="format" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_geotransform" id="Procedure_2801313" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision)
 RETURNS record
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_getGeotransform$function$
]]></string>
			<input_param name="" jt="1111" type="raster" />
			<input_param name="imag" jt="8" type="float8" />
			<input_param name="jmag" jt="8" type="float8" />
			<input_param name="theta_i" jt="8" type="float8" />
			<input_param name="theta_ij" jt="8" type="float8" />
			<input_param name="xoffset" jt="8" type="float8" />
			<input_param name="yoffset" jt="8" type="float8" />
		</procedure>
		<procedure name="st_gmltosql" id="Procedure_387a975" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_gmltosql(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public._ST_GeomFromGML($1, 0)$function$
]]></string>
			<comment><![CDATA[args: geomgml - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_gmltosql" id="Procedure_45b6160" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_gmltosql(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geom_from_gml$function$
]]></string>
			<comment><![CDATA[args: geomgml, srid - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_hasarc" id="Procedure_57edb1b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hasarc(geometry geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_has_arc$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns true if a geometry or geometry collection contains a circular string]]></comment>
			<input_param name="geometry" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_hasnoband" id="Procedure_15cffdd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hasnoband(rast raster, nband integer DEFAULT 1)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_hasNoBand$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns true if there is no band with given band number. If no band number is specified, then band number 1 is assumed.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_hausdorffdistance" id="Procedure_519de2b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hausdorffdistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$hausdorffdistance$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_hausdorffdistance" id="Procedure_8a2a76" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$hausdorffdistancedensify$function$
]]></string>
			<comment><![CDATA[args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_height" id="Procedure_5c016b5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_height(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getHeight$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the height of the raster in pixels.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_hillshade" id="Procedure_31f79d5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hillshade(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, azimuth double precision DEFAULT 315.0, altitude double precision DEFAULT 45.0, max_bright double precision DEFAULT 255.0, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height, scalex INTO _width, _height FROM public.ST_Metadata(_rast);
		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_hillshade4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_pixwidth::text, _pixheight::text,
			_width::text, _height::text,
			$5::text, $6::text,
			$7::text, $8::text
		);
	END;
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="azimuth" jt="8" type="float8" />
			<input_param name="altitude" jt="8" type="float8" />
			<input_param name="max_bright" jt="8" type="float8" />
			<input_param name="scale" jt="8" type="float8" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_hillshade" id="Procedure_72bf2a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hillshade(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, azimuth double precision DEFAULT 315.0, altitude double precision DEFAULT 45.0, max_bright double precision DEFAULT 255.0, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_hillshade($1, $2, NULL::raster, $3, $4, $5, $6, $7, $8) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="azimuth" jt="8" type="float8" />
			<input_param name="altitude" jt="8" type="float8" />
			<input_param name="max_bright" jt="8" type="float8" />
			<input_param name="scale" jt="8" type="float8" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_histogram" id="Procedure_75ebda" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT min, max, count, percent FROM public._ST_histogram($1, $2, $3, 1, $4, $5, $6) $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="width" jt="2003" type="_float8" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_histogram" id="Procedure_8c8e09" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT min, max, count, percent FROM public._ST_histogram($1, $2, $3, 1, $4, NULL, $5) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, exclude_nodata_value, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_histogram" id="Procedure_41775f7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT min, max, count, percent FROM public._ST_histogram($1, $2, TRUE, 1, $3, $4, $5) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, bins, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="width" jt="2003" type="_float8" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_histogram" id="Procedure_eb68f7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT min, max, count, percent FROM public._ST_histogram($1, $2, TRUE, 1, $3, NULL, $4) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_histogram" id="Procedure_5a23c8d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT public._ST_histogram($1, $2, $3, $4, 1, $5, $6, $7) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="width" jt="2003" type="_float8" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_histogram" id="Procedure_3efffbd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_histogram($1, $2, $3, $4, 1, $5, NULL, $6) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband, exclude_nodata_value, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_histogram" id="Procedure_1602519" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT public._ST_histogram($1, $2, $3, TRUE, 1, $4, $5, $6) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, bins, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="width" jt="2003" type="_float8" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_histogram" id="Procedure_5d8d072" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_histogram($1, $2, $3, TRUE, 1, $4, NULL, $5) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="bins" jt="4" type="int4" />
			<input_param name="right" jt="-7" type="bool" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_interiorringn" id="Procedure_277bb49" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_interiorringn(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_interiorringn_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon, n - Return the Nth interior linestring ring of the polygon geometry. Return NULL if the geometry is not a polygon or the given N is out of range.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_interpolatepoint" id="Procedure_15d0636" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_interpolatepoint(line geometry, point geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_InterpolatePoint$function$
]]></string>
			<comment><![CDATA[args: line, point - Return the value of the measure dimension of a geometry at the point closed to the provided point.]]></comment>
			<input_param name="line" jt="1111" type="geometry" />
			<input_param name="point" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_5030969" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$intersection$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - (T)Returns a geometry that represents the shared portion of geomA and geomB.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_2f185d5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(geography, geography)
 RETURNS geography
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.geography(public.ST_Transform(public.ST_Intersection(public.ST_Transform(public.geometry($1), public._ST_BestSRID($1, $2)), public.ST_Transform(public.geometry($2), public._ST_BestSRID($1, $2))), 4326))$function$
]]></string>
			<comment><![CDATA[args: geogA, geogB - (T)Returns a geometry that represents the shared portion of geomA and geomB.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_20283ba" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(text, text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_Intersection($1::public.geometry, $2::public.geometry);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_368522" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(geomin geometry, rast raster, band integer DEFAULT 1)
 RETURNS SETOF geomval
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		intersects boolean := FALSE;
	BEGIN
		intersects := ST_Intersects(geomin, rast, band);
		IF intersects THEN
			-- Return the intersections of the geometry with the vectorized parts of
			-- the raster and the values associated with those parts, if really their
			-- intersection is not empty.
			RETURN QUERY
				SELECT
					intgeom,
					val
				FROM (
					SELECT
						ST_Intersection((gv).geom, geomin) AS intgeom,
						(gv).val
					FROM ST_DumpAsPolygons(rast, band) gv
					WHERE ST_Intersects((gv).geom, geomin)
				) foo
				WHERE NOT ST_IsEmpty(intgeom);
		ELSE
			-- If the geometry does not intersect with the raster, return an empty
			-- geometry and a null value
			RETURN QUERY
				SELECT
					emptygeom,
					NULL::float8
				FROM ST_GeomCollFromText('GEOMETRYCOLLECTION EMPTY', ST_SRID($1)) emptygeom;
		END IF;
	END;
	$function$
]]></string>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="val" jt="8" type="float8" />
			<input_param name="geomin" jt="1111" type="geometry" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_5c866e0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(rast raster, band integer, geomin geometry)
 RETURNS SETOF geomval
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_Intersection($3, $1, $2) $function$
]]></string>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="val" jt="8" type="float8" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="geomin" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_2a4607c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(rast raster, geomin geometry)
 RETURNS SETOF geomval
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_Intersection($2, $1, 1) $function$
]]></string>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="val" jt="8" type="float8" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="geomin" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_50f13b2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text DEFAULT 'BOTH'::text, nodataval double precision[] DEFAULT NULL::double precision[])
 RETURNS raster
 LANGUAGE plpgsql
 STABLE PARALLEL SAFE
AS $function$
	DECLARE
		rtn raster;
		_returnband text;
		newnodata1 float8;
		newnodata2 float8;
	BEGIN
		IF ST_SRID(rast1) != ST_SRID(rast2) THEN
			RAISE EXCEPTION 'The two rasters do not have the same SRID';
		END IF;
		newnodata1 := coalesce(nodataval[1], ST_BandNodataValue(rast1, band1), ST_MinPossibleValue(public.ST_BandPixelType(rast1, band1)));
		newnodata2 := coalesce(nodataval[2], ST_BandNodataValue(rast2, band2), ST_MinPossibleValue(public.ST_BandPixelType(rast2, band2)));
		_returnband := upper(returnband);
		rtn := NULL;
		CASE
			WHEN _returnband = 'BAND1' THEN
				rtn := public.ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', public.ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := public.ST_SetBandNodataValue(rtn, 1, newnodata1);
			WHEN _returnband = 'BAND2' THEN
				rtn := public.ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', public.ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2);
				rtn := public.ST_SetBandNodataValue(rtn, 1, newnodata2);
			WHEN _returnband = 'BOTH' THEN
				rtn := public.ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', public.ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata1);
				rtn := ST_AddBand(rtn, ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', public.ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2));
				rtn := ST_SetBandNodataValue(rtn, 2, newnodata2);
			ELSE
				RAISE EXCEPTION 'Unknown value provided for returnband: %', returnband;
				RETURN NULL;
		END CASE;
		RETURN rtn;
	END;
	$function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="band1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="band2" jt="4" type="int4" />
			<input_param name="returnband" jt="12" type="text" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_5b42f82" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT st_intersection($1, $2, $3, $4, $5, ARRAY[$6, $6]) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="band1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="band2" jt="4" type="int4" />
			<input_param name="returnband" jt="12" type="text" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_7f52a8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[])
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT st_intersection($1, $2, $3, $4, 'BOTH', $5) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="band1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="band2" jt="4" type="int4" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_30214ed" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT st_intersection($1, $2, $3, $4, 'BOTH', ARRAY[$5, $5]) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="band1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="band2" jt="4" type="int4" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_13a1c98" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, returnband text DEFAULT 'BOTH'::text, nodataval double precision[] DEFAULT NULL::double precision[])
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT st_intersection($1, 1, $2, 1, $3, $4) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="returnband" jt="12" type="text" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_2b78cab" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT st_intersection($1, 1, $2, 1, $3, ARRAY[$4, $4]) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="returnband" jt="12" type="text" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_2f5dfcc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, nodataval double precision[])
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT st_intersection($1, 1, $2, 1, 'BOTH', $3) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nodataval" jt="2003" type="_float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_intersection" id="Procedure_1b9de99" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT st_intersection($1, 1, $2, 1, 'BOTH', ARRAY[$3, $3]) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_intersects" id="Procedure_1806056" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersects(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Intersects($1,$2)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_intersects" id="Procedure_5525c41" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersects(geography, geography)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Distance($1, $2, 0.0, false) < 0.00001$function$
]]></string>
			<comment><![CDATA[args: geogA, geogB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<input_param name="$2" jt="1111" type="geography" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_intersects" id="Procedure_356d7ad" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersects(text, text)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_Intersects($1::public.geometry, $2::public.geometry);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_intersects" id="Procedure_507d8db" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_intersects(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_intersects($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA spatially intersects raster rastB.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_intersects" id="Procedure_3361fc3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersects(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT public.st_intersects($1, NULL::integer, $2, NULL::integer) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Return true if raster rastA spatially intersects raster rastB.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_intersects" id="Procedure_4a893a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersects(geom geometry, rast raster, nband integer DEFAULT NULL::integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1 OPERATOR(public.&&) $2::geometry AND public._st_intersects($1, $2, $3); $function$
]]></string>
			<comment><![CDATA[args: geommin, rast, nband=NULL - Return true if raster rastA spatially intersects raster rastB.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_intersects" id="Procedure_3b1a5a6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersects(rast raster, geom geometry, nband integer DEFAULT NULL::integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1::geometry OPERATOR(public.&&) $2 AND public._st_intersects($2, $1, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, geommin, nband=NULL - Return true if raster rastA spatially intersects raster rastB.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="nband" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_intersects" id="Procedure_286bf1b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersects(rast raster, nband integer, geom geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1::geometry OPERATOR(public.&&) $3 AND public._st_intersects($3, $1, $2) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, geommin - Return true if raster rastA spatially intersects raster rastB.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_invdistweight4ma" id="Procedure_3fb7fc9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_value double precision[][][];
		ndims int;
		k double precision DEFAULT 1.;
		_k double precision DEFAULT 1.;
		z double precision[];
		d double precision[];
		_d double precision;
		z0 double precision;
		_z integer;
		x integer;
		y integer;
		cx integer;
		cy integer;
		cv double precision;
		cw double precision DEFAULT NULL;
		w integer;
		h integer;
		max_dx double precision;
		max_dy double precision;
	BEGIN
--		RAISE NOTICE 'value = %', value;
--		RAISE NOTICE 'userargs = %', userargs;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		_z := array_lower(_value, 1);
		-- width and height (0-based)
		h := array_upper(_value, 2) - array_lower(_value, 2);
		w := array_upper(_value, 3) - array_lower(_value, 3);
		-- max distance from center pixel
		max_dx := w / 2;
		max_dy := h / 2;
--		RAISE NOTICE 'max_dx, max_dy = %, %', max_dx, max_dy;
		-- correct width and height (1-based)
		w := w + 1;
		h := h + 1;
--		RAISE NOTICE 'w, h = %, %', w, h;
		-- width and height should be odd numbers
		IF w % 2. != 1 THEN
			RAISE EXCEPTION 'Width of neighborhood array does not permit for a center pixel';
		END IF;
		IF h % 2. != 1 THEN
			RAISE EXCEPTION 'Height of neighborhood array does not permit for a center pixel';
		END IF;
		-- center pixel's coordinates
		cy := max_dy + array_lower(_value, 2);
		cx := max_dx + array_lower(_value, 3);
--		RAISE NOTICE 'cx, cy = %, %', cx, cy;
		-- if userargs provided, only use the first two args
		IF userargs IS NOT NULL AND array_ndims(userargs) = 1 THEN
			-- first arg is power factor
			k := userargs[array_lower(userargs, 1)]::double precision;
			IF k IS NULL THEN
				k := _k;
			ELSEIF k < 0. THEN
				RAISE NOTICE 'Power factor (< 0) must be between 0 and 1.  Defaulting to 0';
				k := 0.;
			ELSEIF k > 1. THEN
				RAISE NOTICE 'Power factor (> 1) must be between 0 and 1.  Defaulting to 1';
				k := 1.;
			END IF;
			-- second arg is what to do if center pixel has a value
			-- this will be a weight to apply for the center pixel
			IF array_length(userargs, 1) > 1 THEN
				cw := abs(userargs[array_lower(userargs, 1) + 1]::double precision);
				IF cw IS NOT NULL THEN
					IF cw < 0. THEN
						RAISE NOTICE 'Weight (< 0) of center pixel value must be between 0 and 1.  Defaulting to 0';
						cw := 0.;
					ELSEIF cw > 1 THEN
						RAISE NOTICE 'Weight (> 1) of center pixel value must be between 0 and 1.  Defaulting to 1';
						cw := 1.;
					END IF;
				END IF;
			END IF;
		END IF;
--		RAISE NOTICE 'k = %', k;
		k = abs(k) * -1;
		-- center pixel value
		cv := _value[_z][cy][cx];
		-- check to see if center pixel has value
--		RAISE NOTICE 'cw = %', cw;
		IF cw IS NULL AND cv IS NOT NULL THEN
			RETURN cv;
		END IF;
		FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
			FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
--				RAISE NOTICE 'value[%][%][%] = %', _z, y, x, _value[_z][y][x];
				-- skip NODATA values and center pixel
				IF _value[_z][y][x] IS NULL OR (x = cx AND y = cy) THEN
					CONTINUE;
				END IF;
				z := z || _value[_z][y][x];
				-- use pythagorean theorem
				_d := sqrt(power(cx - x, 2) + power(cy - y, 2));
--				RAISE NOTICE 'distance = %', _d;
				d := d || _d;
			END LOOP;
		END LOOP;
--		RAISE NOTICE 'z = %', z;
--		RAISE NOTICE 'd = %', d;
		-- neighborhood is NODATA
		IF z IS NULL OR array_length(z, 1) < 1 THEN
			-- center pixel has value
			IF cv IS NOT NULL THEN
				RETURN cv;
			ELSE
				RETURN NULL;
			END IF;
		END IF;
		z0 := 0;
		_d := 0;
		FOR x IN array_lower(z, 1)..array_upper(z, 1) LOOP
			d[x] := power(d[x], k);
			z[x] := z[x] * d[x];
			_d := _d + d[x];
			z0 := z0 + z[x];
		END LOOP;
		z0 := z0 / _d;
--		RAISE NOTICE 'z0 = %', z0;
		-- apply weight for center pixel if center pixel has value
		IF cv IS NOT NULL THEN
			z0 := (cw * cv) + ((1 - cw) * z0);
--			RAISE NOTICE '*z0 = %', z0;
		END IF;
		RETURN z0;
	END;
	$function$
]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_isclosed" id="Procedure_535d07a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isclosed(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_isclosed$function$
]]></string>
			<comment><![CDATA[args: g - Returns TRUE if the LINESTRINGs start and end points are coincident. For Polyhedral surface is closed (volumetric).]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_iscollection" id="Procedure_4b5c333" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_iscollection(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 5
AS '$libdir/postgis-2.4', $function$ST_IsCollection$function$
]]></string>
			<comment><![CDATA[args: g - Returns TRUE if the argument is a collection (MULTI*, GEOMETRYCOLLECTION, ...)]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_iscoveragetile" id="Procedure_4222579" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer)
 RETURNS boolean
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		_rastmeta record;
		_covmeta record;
		cr record;
		max integer[];
		tile integer[];
		edge integer[];
	BEGIN
		IF NOT ST_SameAlignment(rast, coverage) THEN
			RAISE NOTICE 'Raster and coverage are not aligned';
			RETURN FALSE;
		END IF;
		_rastmeta := ST_Metadata(rast);
		_covmeta := ST_Metadata(coverage);
		-- get coverage grid coordinates of upper-left of rast
		cr := ST_WorldToRasterCoord(coverage, _rastmeta.upperleftx, _rastmeta.upperlefty);
		-- rast is not part of coverage
		IF
			(cr.columnx < 1 OR cr.columnx > _covmeta.width) OR
			(cr.rowy < 1 OR cr.rowy > _covmeta.height)
		THEN
			RAISE NOTICE 'Raster is not in the coverage';
			RETURN FALSE;
		END IF;
		-- rast isn't on the coverage's grid
		IF
			((cr.columnx - 1) % tilewidth != 0) OR
			((cr.rowy - 1) % tileheight != 0)
		THEN
			RAISE NOTICE 'Raster is not aligned to tile grid of coverage';
			RETURN FALSE;
		END IF;
		-- max # of tiles on X and Y for coverage
		max[0] := ceil(_covmeta.width::double precision / tilewidth::double precision)::integer;
		max[1] := ceil(_covmeta.height::double precision / tileheight::double precision)::integer;
		-- tile # of rast in coverge
		tile[0] := (cr.columnx / tilewidth) + 1;
		tile[1] := (cr.rowy / tileheight) + 1;
		-- inner tile
		IF tile[0] < max[0] AND tile[1] < max[1] THEN
			IF
				(_rastmeta.width != tilewidth) OR
				(_rastmeta.height != tileheight)
			THEN
				RAISE NOTICE 'Raster width/height is invalid for interior tile of coverage';
				RETURN FALSE;
			ELSE
				RETURN TRUE;
			END IF;
		END IF;
		-- edge tile
		-- edge tile may have same size as inner tile
		IF
			(_rastmeta.width = tilewidth) AND
			(_rastmeta.height = tileheight)
		THEN
			RETURN TRUE;
		END IF;
		-- get edge tile width and height
		edge[0] := _covmeta.width - ((max[0] - 1) * tilewidth);
		edge[1] := _covmeta.height - ((max[1] - 1) * tileheight);
		-- edge tile not of expected tile size
		-- right and bottom
		IF tile[0] = max[0] AND tile[1] = max[1] THEN
			IF
				_rastmeta.width != edge[0] OR
				_rastmeta.height != edge[1]
			THEN
				RAISE NOTICE 'Raster width/height is invalid for right-most AND bottom-most tile of coverage';
				RETURN FALSE;
			END IF;
		ELSEIF tile[0] = max[0] THEN
			IF
				_rastmeta.width != edge[0] OR
				_rastmeta.height != tileheight
			THEN
				RAISE NOTICE 'Raster width/height is invalid for right-most tile of coverage';
				RETURN FALSE;
			END IF;
		ELSE
			IF
				_rastmeta.width != tilewidth OR
				_rastmeta.height != edge[1]
			THEN
				RAISE NOTICE 'Raster width/height is invalid for bottom-most tile of coverage';
				RETURN FALSE;
			END IF;
		END IF;
		RETURN TRUE;
	END;
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="coverage" jt="1111" type="raster" />
			<input_param name="tilewidth" jt="4" type="int4" />
			<input_param name="tileheight" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_isempty" id="Procedure_2032aab" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isempty(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_isempty$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns true if this Geometry is an empty geometrycollection, polygon, point etc.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_isempty" id="Procedure_1b00091" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isempty(rast raster)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_isEmpty$function$
]]></string>
			<comment><![CDATA[args: rast - Returns true if the raster is empty (width = 0 and height = 0). Otherwise, returns false.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_ispolygonccw" id="Procedure_7db421" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ispolygonccw(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$ST_IsPolygonCCW$function$
]]></string>
			<comment><![CDATA[args: geom - Returns true if all exterior rings are oriented counter-clockwise and all interior rings are oriented clockwise.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_ispolygoncw" id="Procedure_962da" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ispolygoncw(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$ST_IsPolygonCW$function$
]]></string>
			<comment><![CDATA[args: geom - Returns true if all exterior rings are oriented clockwise and all interior rings are oriented counter-clockwise.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_isring" id="Procedure_56ee18b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isring(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$isring$function$
]]></string>
			<comment><![CDATA[args: g - Returns TRUE if this LINESTRING is both closed and simple.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_issimple" id="Procedure_1ad736b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_issimple(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 25
AS '$libdir/postgis-2.4', $function$issimple$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns (TRUE) if this Geometry has no anomalous geometric points, such as self intersection or self tangency.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_isvalid" id="Procedure_4f5b27c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvalid(geometry, integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT (public.ST_isValidDetail($1, $2)).valid$function$
]]></string>
			<comment><![CDATA[args: g, flags - Returns true if the ST_Geometry is well formed.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_isvalid" id="Procedure_903112" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvalid(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 1000
AS '$libdir/postgis-2.4', $function$isvalid$function$
]]></string>
			<comment><![CDATA[args: g - Returns true if the ST_Geometry is well formed.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_isvaliddetail" id="Procedure_714a4a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvaliddetail(geometry)
 RETURNS valid_detail
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 1000
AS '$libdir/postgis-2.4', $function$isvaliddetail$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.]]></comment>
			<input_param name="valid" jt="-7" type="bool" />
			<input_param name="reason" jt="12" type="varchar" />
			<input_param name="location" jt="1111" type="geometry" />
			<input_param name="$1" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_isvaliddetail" id="Procedure_4f7d337" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvaliddetail(geometry, integer)
 RETURNS valid_detail
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 1000
AS '$libdir/postgis-2.4', $function$isvaliddetail$function$
]]></string>
			<comment><![CDATA[args: geom, flags - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.]]></comment>
			<input_param name="valid" jt="-7" type="bool" />
			<input_param name="reason" jt="12" type="varchar" />
			<input_param name="location" jt="1111" type="geometry" />
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
		</procedure>
		<procedure name="st_isvalidreason" id="Procedure_42d1e23" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvalidreason(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 1000
AS '$libdir/postgis-2.4', $function$isvalidreason$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns text stating if a geometry is valid or not and if not valid, a reason why.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_isvalidreason" id="Procedure_1ed98d4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvalidreason(geometry, integer)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
SELECT CASE WHEN valid THEN 'Valid Geometry' ELSE reason END FROM (
	SELECT (public.ST_isValidDetail($1, $2)).*
) foo
	$function$
]]></string>
			<comment><![CDATA[args: geomA, flags - Returns text stating if a geometry is valid or not and if not valid, a reason why.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_isvalidtrajectory" id="Procedure_19cc978" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvalidtrajectory(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_IsValidTrajectory$function$
]]></string>
			<comment><![CDATA[args: line - Returns true if the geometry is a valid trajectory.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_length" id="Procedure_3eadcc1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_length2d_linestring$function$
]]></string>
			<comment><![CDATA[args: a_2dlinestring - Returns the 2D length of the geometry if it is a LineString or MultiLineString. geometry are in units of spatial reference and geography are in meters (default spheroid)]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_length" id="Procedure_4656e1c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length(geog geography, use_spheroid boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$geography_length$function$
]]></string>
			<comment><![CDATA[args: geog, use_spheroid=true - Returns the 2D length of the geometry if it is a LineString or MultiLineString. geometry are in units of spatial reference and geography are in meters (default spheroid)]]></comment>
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="use_spheroid" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_length" id="Procedure_3d1be02" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length(text)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ST_Length($1::public.geometry);  $function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_length2d" id="Procedure_11f6ede" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length2d(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_length2d_linestring$function$
]]></string>
			<comment><![CDATA[args: a_2dlinestring - Returns the 2-dimensional length of the geometry if it is a linestring or multi-linestring. This is an alias for ST_Length]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_length2d_spheroid" id="Procedure_361cb78" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length2d_spheroid(geometry, spheroid)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Length2D_Spheroid', 'ST_Length2DSpheroid', '2.2.0');
    SELECT public.ST_Length2DSpheroid($1,$2);
  $function$
]]></string>
			<comment><![CDATA[args: a_geometry, a_spheroid - Calculates the 2D length/perimeter of a geometry on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="spheroid" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_length2dspheroid" id="Procedure_c2977c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length2dspheroid(geometry, spheroid)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 500
AS '$libdir/postgis-2.4', $function$LWGEOM_length2d_ellipsoid$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="spheroid" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_length_spheroid" id="Procedure_2f55a5e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length_spheroid(geometry, spheroid)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Length_Spheroid', 'ST_LengthSpheroid', '2.2.0');
    SELECT public.ST_LengthSpheroid($1,$2);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="spheroid" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_lengthspheroid" id="Procedure_2f86587" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_lengthspheroid(geometry, spheroid)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 500
AS '$libdir/postgis-2.4', $function$LWGEOM_length_ellipsoid_linestring$function$
]]></string>
			<comment><![CDATA[args: a_geometry, a_spheroid - Calculates the 2D or 3D length/perimeter of a geometry on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="spheroid" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_line_interpolate_point" id="Procedure_792c64" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_line_interpolate_point(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Line_Interpolate_Point', 'ST_LineInterpolatePoint', '2.1.0');
    SELECT public.ST_LineInterpolatePoint($1, $2);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_line_locate_point" id="Procedure_1a9b3dd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_line_locate_point(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Line_Locate_Point', 'ST_LineLocatePoint', '2.1.0');
     SELECT public.ST_LineLocatePoint($1, $2);
  $function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_line_substring" id="Procedure_1c5ede1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_line_substring(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Line_Substring', 'ST_LineSubstring', '2.1.0');
     SELECT public.ST_LineSubstring($1, $2, $3);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_linecrossingdirection" id="Procedure_28bd1be" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linecrossingdirection(geom1 geometry, geom2 geometry)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT CASE WHEN NOT $1 OPERATOR(public.&&) $2 THEN 0 ELSE public._ST_LineCrossingDirection($1,$2) END $function$
]]></string>
			<comment><![CDATA[args: linestringA, linestringB - Given 2 linestrings, returns a number between -3 and 3 denoting what kind of crossing behavior. 0 is no crossing.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_linefromencodedpolyline" id="Procedure_45e1b32" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefromencodedpolyline(text, integer DEFAULT 5)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$line_from_encoded_polyline$function$
]]></string>
			<comment><![CDATA[args: polyline, precision=5 - Creates a LineString from an Encoded Polyline.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_linefrommultipoint" id="Procedure_5179eeb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefrommultipoint(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_line_from_mpoint$function$
]]></string>
			<comment><![CDATA[args: aMultiPoint - Creates a LineString from a MultiPoint geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_linefromtext" id="Procedure_27a119b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'LINESTRING'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_linefromtext" id="Procedure_31120d0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'LINESTRING'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_linefromwkb" id="Procedure_5f0daea" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKB, srid - Makes a LINESTRING from WKB with the given SRID]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_linefromwkb" id="Procedure_122a87b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKB - Makes a LINESTRING from WKB with the given SRID]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_lineinterpolatepoint" id="Procedure_22fdd97" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_lineinterpolatepoint(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_line_interpolate_point$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_fraction - Returns a point interpolated along a line. Second argument is a float8 between 0 and 1 representing fraction of total length of linestring the point has to be located.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_linelocatepoint" id="Procedure_76c9b2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linelocatepoint(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_line_locate_point$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_point - Returns a float between 0 and 1 representing the location of the closest point on LineString to the given Point, as a fraction of total 2d line length.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_linemerge" id="Procedure_40da216" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linemerge(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$linemerge$function$
]]></string>
			<comment><![CDATA[args: amultilinestring - Return a (set of) LineString(s) formed by sewing together a MULTILINESTRING.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_linestringfromwkb" id="Procedure_1dde7d5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linestringfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKB, srid - Makes a geometry from WKB with the given SRID.]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_linestringfromwkb" id="Procedure_34d3957" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linestringfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKB - Makes a geometry from WKB with the given SRID.]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_linesubstring" id="Procedure_2f16caf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linesubstring(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_line_substring$function$
]]></string>
			<comment><![CDATA[args: a_linestring, startfraction, endfraction - Return a linestring being a substring of the input one starting and ending at the given fractions of total 2d length. Second and third arguments are float8 values between 0 and 1.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_linetocurve" id="Procedure_2e0b307" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linetocurve(geometry geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_line_desegmentize$function$
]]></string>
			<comment><![CDATA[args: geomANoncircular - Converts a LINESTRING/POLYGON to a CIRCULARSTRING, CURVEPOLYGON]]></comment>
			<input_param name="geometry" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_locate_along_measure" id="Procedure_2719b11" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locate_along_measure(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_locate_between_measures($1, $2, $2) $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_locate_between_measures" id="Procedure_52f380e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locate_between_measures(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_locate_between_m$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_locatealong" id="Procedure_258e38c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision DEFAULT 0.0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_LocateAlong$function$
]]></string>
			<comment><![CDATA[args: ageom_with_measure, a_measure, offset - Return a derived geometry collection value with elements that match the specified measure. Polygonal elements are not supported.]]></comment>
			<input_param name="geometry" jt="1111" type="geometry" />
			<input_param name="measure" jt="8" type="float8" />
			<input_param name="leftrightoffset" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_locatebetween" id="Procedure_42c6628" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision DEFAULT 0.0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_LocateBetween$function$
]]></string>
			<comment><![CDATA[args: geomA, measure_start, measure_end, offset - Return a derived geometry collection value with elements that match the specified range of measures inclusively. Polygonal elements are not supported.]]></comment>
			<input_param name="geometry" jt="1111" type="geometry" />
			<input_param name="frommeasure" jt="8" type="float8" />
			<input_param name="tomeasure" jt="8" type="float8" />
			<input_param name="leftrightoffset" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_locatebetweenelevations" id="Procedure_12743e0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_LocateBetweenElevations$function$
]]></string>
			<comment><![CDATA[args: geom_mline, elevation_start, elevation_end - Return a derived geometry (collection) value with elements that intersect the specified range of elevations inclusively. Only 3D, 4D LINESTRINGS and MULTILINESTRINGS are supported.]]></comment>
			<input_param name="geometry" jt="1111" type="geometry" />
			<input_param name="fromelevation" jt="8" type="float8" />
			<input_param name="toelevation" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_longestline" id="Procedure_3432988" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_longestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public._ST_LongestLine(public.ST_ConvexHull($1), public.ST_ConvexHull($2))$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional longest line points of two geometries. The function will only return the first longest line if more than one, that the function finds. The line returned will always start in g1 and end in g2. The length of the line this function returns will always be the same as st_maxdistance returns for g1 and g2.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_m" id="Procedure_1979176" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_m(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_m_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the M coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_makebox2d" id="Procedure_b16092" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makebox2d(geom1 geometry, geom2 geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX2D_construct$function$
]]></string>
			<comment><![CDATA[args: pointLowLeft, pointUpRight - Creates a BOX2D defined by the given point geometries.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="box2d" />
		</procedure>
		<procedure name="st_makeemptycoverage" id="Procedure_5d254b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeemptycoverage(tilewidth integer, tileheight integer, width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer DEFAULT 0)
 RETURNS SETOF raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
    DECLARE
        ulx double precision;  -- upper left x of raster
        uly double precision;  -- upper left y of raster
        rw int;                -- raster width (may change at edges)
        rh int;                -- raster height (may change at edges)
        x int;                 -- x index of coverage
        y int;                 -- y index of coverage
        template raster;       -- an empty template raster, where each cell
                               -- represents a tile in the coverage
        minY double precision;
        maxX double precision;
    BEGIN
        template := public.ST_MakeEmptyRaster(
            ceil(width::float8/tilewidth)::int,
            ceil(height::float8/tileheight)::int,
            upperleftx,
            upperlefty,
            tilewidth * scalex,
            tileheight * scaley,
            tileheight * skewx,
            tilewidth * skewy,
            srid
        );
        FOR y IN 1..st_height(template) LOOP
            maxX := public.ST_RasterToWorldCoordX(template, 1, y) + width * scalex;
            FOR x IN 1..st_width(template) LOOP
                minY := public.ST_RasterToWorldCoordY(template, x, 1) + height * scaley;
                uly := public.ST_RasterToWorldCoordY(template, x, y);
                IF uly + (tileheight * scaley) < minY THEN
                    --raise notice 'uly, minY: %, %', uly, minY;
                    rh := ceil((minY - uly)/scaleY)::int;
                ELSE
                    rh := tileheight;
                END IF;
                ulx := public.ST_RasterToWorldCoordX(template, x, y);
                IF ulx + (tilewidth * scalex) > maxX THEN
                    --raise notice 'ulx, maxX: %, %', ulx, maxX;
                    rw := ceil((maxX - ulx)/scaleX)::int;
                ELSE
                    rw := tilewidth;
                END IF;
                RETURN NEXT public.ST_MakeEmptyRaster(rw, rh, ulx, uly, scalex, scaley, skewx, skewy, srid);
            END LOOP;
        END LOOP;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: tilewidth, tileheight, width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid=unknown - Cover georeferenced area with a grid of empty raster tiles.]]></comment>
			<input_param name="tilewidth" jt="4" type="int4" />
			<input_param name="tileheight" jt="4" type="int4" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="upperleftx" jt="8" type="float8" />
			<input_param name="upperlefty" jt="8" type="float8" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_makeemptyraster" id="Procedure_5238d55" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer DEFAULT 0)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_makeEmpty$function$
]]></string>
			<comment><![CDATA[args: width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid=unknown - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="upperleftx" jt="8" type="float8" />
			<input_param name="upperlefty" jt="8" type="float8" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_makeemptyraster" id="Procedure_48fc2d8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT  public.ST_makeemptyraster($1, $2, $3, $4, $5, -($5), 0, 0, public.ST_SRID('POINT(0 0)'::geometry)) $function$
]]></string>
			<comment><![CDATA[args: width, height, upperleftx, upperlefty, pixelsize - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="upperleftx" jt="8" type="float8" />
			<input_param name="upperlefty" jt="8" type="float8" />
			<input_param name="pixelsize" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_makeemptyraster" id="Procedure_4d546f0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeemptyraster(rast raster)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
		DECLARE
			w int;
			h int;
			ul_x double precision;
			ul_y double precision;
			scale_x double precision;
			scale_y double precision;
			skew_x double precision;
			skew_y double precision;
			sr_id int;
		BEGIN
			SELECT width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM public.ST_Metadata(rast);
			RETURN  public.ST_makeemptyraster(w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id);
		END;
    $function$
]]></string>
			<comment><![CDATA[args: rast - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_makeenvelope" id="Procedure_2009c91" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeenvelope(double precision, double precision, double precision, double precision, integer DEFAULT 0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_MakeEnvelope$function$
]]></string>
			<comment><![CDATA[args: xmin, ymin, xmax, ymax, srid=unknown - Creates a rectangular Polygon formed from the given minimums and maximums. Input values must be in SRS specified by the SRID.]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="8" type="float8" />
			<input_param name="$5" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_makeline" id="Procedure_41c1de2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeline(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_makeline_garray$function$
]]></string>
			<comment><![CDATA[args: geoms_array - Creates a Linestring from point, multipoint, or line geometries.]]></comment>
			<input_param name="$1" jt="2003" type="_geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_makeline" id="Procedure_143c73f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_makeline$function$
]]></string>
			<comment><![CDATA[args: geom1, geom2 - Creates a Linestring from point, multipoint, or line geometries.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_makeline" id="Procedure_59f31e5" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_makeline LWGEOM_makeline_garray
create function st_makeline LWGEOM_makeline]]></string>
			<comment><![CDATA[args: geoms - Creates a Linestring from point, multipoint, or line geometries.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_makepoint" id="Procedure_f7a7c5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepoint(double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_makepoint$function$
]]></string>
			<comment><![CDATA[args: x, y - Creates a 2D,3DZ or 4D point geometry.]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_makepoint" id="Procedure_2b9205d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepoint(double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_makepoint$function$
]]></string>
			<comment><![CDATA[args: x, y, z - Creates a 2D,3DZ or 4D point geometry.]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_makepoint" id="Procedure_2985aef" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepoint(double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_makepoint$function$
]]></string>
			<comment><![CDATA[args: x, y, z, m - Creates a 2D,3DZ or 4D point geometry.]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_makepointm" id="Procedure_3697ba9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepointm(double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_makepoint3dm$function$
]]></string>
			<comment><![CDATA[args: x, y, m - Creates a point geometry with an x y and m coordinate.]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_makepolygon" id="Procedure_4defe9f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepolygon(geometry, geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_makepoly$function$
]]></string>
			<comment><![CDATA[args: outerlinestring, interiorlinestrings - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="2003" type="_geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_makepolygon" id="Procedure_4623257" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepolygon(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_makepoly$function$
]]></string>
			<comment><![CDATA[args: linestring - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_makevalid" id="Procedure_57e28b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makevalid(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_MakeValid$function$
]]></string>
			<comment><![CDATA[args: input - Attempts to make an invalid geometry valid without losing vertices.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mapalgebra" id="Procedure_15ef3cf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_MapAlgebra($1, $2, $3, $6, $7, $4, $5,NULL::double precision [],NULL::boolean, VARIADIC $8) $function$
]]></string>
			<input_param name="rastbandargset" jt="2003" type="_rastbandarg" />
			<input_param name="callbackfunc" jt="1111" type="regprocedure" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="distancex" jt="4" type="int4" />
			<input_param name="distancey" jt="4" type="int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebra" id="Procedure_1ced027" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'FIRST'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		x int;
		argset rastbandarg[];
	BEGIN
		IF $2 IS NULL OR array_ndims($2) < 1 OR array_length($2, 1) < 1 THEN
			RAISE EXCEPTION 'Populated 1D array must be provided for nband';
			RETURN NULL;
		END IF;
		FOR x IN array_lower($2, 1)..array_upper($2, 1) LOOP
			IF $2[x] IS NULL THEN
				CONTINUE;
			END IF;
			argset := argset || ROW($1, $2[x])::rastbandarg;
		END LOOP;
		IF array_length(argset, 1) < 1 THEN
			RAISE EXCEPTION 'Populated 1D array must be provided for nband';
			RETURN NULL;
		END IF;
		RETURN public._ST_MapAlgebra(argset, $3, $4, $7, $8, $5, $6,NULL::double precision [],NULL::boolean, VARIADIC $9);
	END;
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="2003" type="_int4" />
			<input_param name="callbackfunc" jt="1111" type="regprocedure" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="distancex" jt="4" type="int4" />
			<input_param name="distancey" jt="4" type="int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebra" id="Procedure_36574cb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'FIRST'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_MapAlgebra(ARRAY[ROW($1, $2)]::rastbandarg[], $3, $4, $7, $8, $5, $6,NULL::double precision [],NULL::boolean, VARIADIC $9) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="callbackfunc" jt="1111" type="regprocedure" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="distancex" jt="4" type="int4" />
			<input_param name="distancey" jt="4" type="int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebra" id="Procedure_4d697af" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_MapAlgebra(ARRAY[ROW($1, $2), ROW($3, $4)]::rastbandarg[], $5, $6, $9, $10, $7, $8,NULL::double precision [],NULL::boolean, VARIADIC $11) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<input_param name="callbackfunc" jt="1111" type="regprocedure" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="distancex" jt="4" type="int4" />
			<input_param name="distancey" jt="4" type="int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebra" id="Procedure_196802f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, customextent raster DEFAULT NULL::raster, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$
	select public._ST_mapalgebra(ARRAY[ROW($1,$2)]::rastbandarg[],$3,$6,NULL::integer,NULL::integer,$7,$8,$4,$5,VARIADIC $9)
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="callbackfunc" jt="1111" type="regprocedure" />
			<input_param name="mask" jt="2003" type="_float8" />
			<input_param name="weighted" jt="-7" type="bool" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebra" id="Procedure_878d51" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_mapalgebra(ARRAY[ROW($1, $2)]::rastbandarg[], $4, $3, 'FIRST', $5::text) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="expression" jt="12" type="text" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebra" id="Procedure_3eb5392" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebra($1, 1, $2, $3, $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="expression" jt="12" type="text" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebra" id="Procedure_1a741cd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_mapalgebra(ARRAY[ROW($1, $2), ROW($3, $4)]::rastbandarg[], $5, $6, $7, $8, $9, $10) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="band1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="band2" jt="4" type="int4" />
			<input_param name="expression" jt="12" type="text" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="nodata1expr" jt="12" type="text" />
			<input_param name="nodata2expr" jt="12" type="text" />
			<input_param name="nodatanodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebra" id="Procedure_5bd023a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebra($1, 1, $2, 1, $3, $4, $5, $6, $7, $8) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="expression" jt="12" type="text" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="nodata1expr" jt="12" type="text" />
			<input_param name="nodata2expr" jt="12" type="text" />
			<input_param name="nodatanodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebraexpr" id="Procedure_49de2f2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_mapAlgebraExpr$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="expression" jt="12" type="text" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebraexpr" id="Procedure_3eee257" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebraexpr($1, 1, $2, $3, $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="expression" jt="12" type="text" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebraexpr" id="Procedure_40662c0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_mapAlgebra2$function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="band1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="band2" jt="4" type="int4" />
			<input_param name="expression" jt="12" type="text" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="nodata1expr" jt="12" type="text" />
			<input_param name="nodata2expr" jt="12" type="text" />
			<input_param name="nodatanodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebraexpr" id="Procedure_1b0897" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebraexpr($1, 1, $2, 1, $3, $4, $5, $6, $7, $8) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="expression" jt="12" type="text" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="nodata1expr" jt="12" type="text" />
			<input_param name="nodata2expr" jt="12" type="text" />
			<input_param name="nodatanodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebrafct" id="Procedure_1afe372" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_mapAlgebraFct$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="onerastuserfunc" jt="1111" type="regprocedure" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebrafct" id="Procedure_17c9193" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebrafct($1, $2, $3, $4, NULL) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="onerastuserfunc" jt="1111" type="regprocedure" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebrafct" id="Procedure_27647" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebrafct($1, $2, NULL, $3, VARIADIC $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="onerastuserfunc" jt="1111" type="regprocedure" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebrafct" id="Procedure_1ca934f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebrafct($1, $2, NULL, $3, NULL) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="onerastuserfunc" jt="1111" type="regprocedure" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebrafct" id="Procedure_54e85fc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebrafct($1, 1, $2, $3, VARIADIC $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="onerastuserfunc" jt="1111" type="regprocedure" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebrafct" id="Procedure_5db31d5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebrafct($1, 1, $2, $3, NULL) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="onerastuserfunc" jt="1111" type="regprocedure" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebrafct" id="Procedure_4fc8209" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebrafct($1, 1, NULL, $2, VARIADIC $3) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="onerastuserfunc" jt="1111" type="regprocedure" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebrafct" id="Procedure_42232c9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebrafct($1, 1, NULL, $2, NULL) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="onerastuserfunc" jt="1111" type="regprocedure" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebrafct" id="Procedure_4ba079" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_mapAlgebra2$function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="band1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="band2" jt="4" type="int4" />
			<input_param name="tworastuserfunc" jt="1111" type="regprocedure" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebrafct" id="Procedure_44d0110" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_mapalgebrafct($1, 1, $2, 1, $3, $4, $5, VARIADIC $6) $function$
]]></string>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="tworastuserfunc" jt="1111" type="regprocedure" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="extenttype" jt="12" type="text" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_mapalgebrafctngb" id="Procedure_3afc98f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_mapAlgebraFctNgb$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="ngbwidth" jt="4" type="int4" />
			<input_param name="ngbheight" jt="4" type="int4" />
			<input_param name="onerastngbuserfunc" jt="1111" type="regprocedure" />
			<input_param name="nodatamode" jt="12" type="text" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_max4ma" id="Procedure_29f67c6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
    DECLARE
        _matrix float[][];
        max float;
    BEGIN
        _matrix := matrix;
        max := '-Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF max < _matrix[x][y] THEN
                    max := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN max;
    END;
    $function$
]]></string>
			<input_param name="matrix" jt="2003" type="_float8" />
			<input_param name="nodatamode" jt="12" type="text" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_max4ma" id="Procedure_2ef510b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_value double precision[][][];
		max double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		max := '-Infinity'::double precision;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;
					IF _value[z][y][x] > max THEN
						max := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;
		IF max = '-Infinity'::double precision THEN
			RETURN NULL;
		END IF;
		RETURN max;
	END;
	$function$
]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_maxdistance" id="Procedure_c0afda" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_maxdistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public._ST_MaxDistance(public.ST_ConvexHull($1), public.ST_ConvexHull($2))$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional largest distance between two geometries in projected units.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_mean4ma" id="Procedure_3d81d5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
    DECLARE
        _matrix float[][];
        sum float;
        count float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        count := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                        count := count + 1;
                    END IF;
                ELSE
                    count := count + 1;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        IF count = 0 THEN
            RETURN NULL;
        END IF;
        RETURN sum / count;
    END;
    $function$
]]></string>
			<input_param name="matrix" jt="2003" type="_float8" />
			<input_param name="nodatamode" jt="12" type="text" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_mean4ma" id="Procedure_3eedb59" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_value double precision[][][];
		sum double precision;
		count int;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		sum := 0;
		count := 0;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;
					sum := sum + _value[z][y][x];
					count := count + 1;
				END LOOP;
			END LOOP;
		END LOOP;
		IF count < 1 THEN
			RETURN NULL;
		END IF;
		RETURN sum / count::double precision;
	END;
	$function$
]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_mem_size" id="Procedure_331e5fb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mem_size(geometry)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Mem_Size', 'ST_MemSize', '2.2.0');
    SELECT public.ST_MemSize($1);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_memsize" id="Procedure_2f221bc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_memsize(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 5
AS '$libdir/postgis-2.4', $function$LWGEOM_mem_size$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the amount of space (in bytes) the geometry takes.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_memsize" id="Procedure_38fce96" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_memsize(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_memsize$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the amount of space (in bytes) the raster takes.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_metadata" id="Procedure_513ef81" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer)
 RETURNS record
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_metadata$function$
]]></string>
			<comment><![CDATA[args: rast - Returns basic meta data about a raster object such as pixel size, rotation (skew), upper, lower left, etc.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="upperleftx" jt="8" type="float8" />
			<input_param name="upperlefty" jt="8" type="float8" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="srid" jt="4" type="int4" />
			<input_param name="numbands" jt="4" type="int4" />
		</procedure>
		<procedure name="st_min4ma" id="Procedure_101f8bb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
    DECLARE
        _matrix float[][];
        min float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN min;
    END;
    $function$
]]></string>
			<input_param name="matrix" jt="2003" type="_float8" />
			<input_param name="nodatamode" jt="12" type="text" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_min4ma" id="Procedure_4584587" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_value double precision[][][];
		min double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		min := 'Infinity'::double precision;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;
					IF _value[z][y][x] < min THEN
						min := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;
		IF min = 'Infinity'::double precision THEN
			RETURN NULL;
		END IF;
		RETURN min;
	END;
	$function$
]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_minconvexhull" id="Procedure_23d0fa5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_minconvexhull(rast raster, nband integer DEFAULT NULL::integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_convex_hull$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mindist4ma" id="Procedure_f0c95c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_value double precision[][][];
		ndims int;
		d double precision DEFAULT NULL;
		_d double precision;
		z integer;
		x integer;
		y integer;
		cx integer;
		cy integer;
		cv double precision;
		w integer;
		h integer;
		max_dx double precision;
		max_dy double precision;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);
		-- width and height (0-based)
		h := array_upper(_value, 2) - array_lower(_value, 2);
		w := array_upper(_value, 3) - array_lower(_value, 3);
		-- max distance from center pixel
		max_dx := w / 2;
		max_dy := h / 2;
		-- correct width and height (1-based)
		w := w + 1;
		h := h + 1;
		-- width and height should be odd numbers
		IF w % 2. != 1 THEN
			RAISE EXCEPTION 'Width of neighborhood array does not permit for a center pixel';
		END IF;
		IF h % 2. != 1 THEN
			RAISE EXCEPTION 'Height of neighborhood array does not permit for a center pixel';
		END IF;
		-- center pixel's coordinates
		cy := max_dy + array_lower(_value, 2);
		cx := max_dx + array_lower(_value, 3);
		-- center pixel value
		cv := _value[z][cy][cx];
		-- check to see if center pixel has value
		IF cv IS NOT NULL THEN
			RETURN 0.;
		END IF;
		FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
			FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
				-- skip NODATA values and center pixel
				IF _value[z][y][x] IS NULL OR (x = cx AND y = cy) THEN
					CONTINUE;
				END IF;
				-- use pythagorean theorem
				_d := sqrt(power(cx - x, 2) + power(cy - y, 2));
--				RAISE NOTICE 'distance = %', _d;
				IF d IS NULL OR _d < d THEN
					d := _d;
				END IF;
			END LOOP;
		END LOOP;
--		RAISE NOTICE 'd = %', d;
		RETURN d;
	END;
	$function$
]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_minimumboundingcircle" id="Procedure_2e5202f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer DEFAULT 48)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_MinimumBoundingCircle$function$
]]></string>
			<comment><![CDATA[args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.]]></comment>
			<input_param name="inputgeom" jt="1111" type="geometry" />
			<input_param name="segs_per_quarter" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_minimumboundingradius" id="Procedure_65c92e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision)
 RETURNS record
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_MinimumBoundingRadius$function$
]]></string>
			<comment><![CDATA[args: geom - Returns the center point and radius of the smallest circle that can fully contain a geometry.]]></comment>
			<input_param name="" jt="1111" type="geometry" />
			<input_param name="center" jt="1111" type="geometry" />
			<input_param name="radius" jt="8" type="float8" />
		</procedure>
		<procedure name="st_minimumclearance" id="Procedure_39c72bb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_minimumclearance(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_MinimumClearance$function$
]]></string>
			<comment><![CDATA[args: g - Returns the minimum clearance of a geometry, a measure of a geometrys robustness.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_minimumclearanceline" id="Procedure_3006aea" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_minimumclearanceline(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_MinimumClearanceLine$function$
]]></string>
			<comment><![CDATA[args: g - Returns the two-point LineString spanning a geometrys minimum clearance.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_minpossiblevalue" id="Procedure_47a556" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_minpossiblevalue(pixeltype text)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_minPossibleValue$function$
]]></string>
			<input_param name="pixeltype" jt="12" type="text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_mlinefromtext" id="Procedure_53c413c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mlinefromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE
	WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Return a specified ST_MultiLineString value from WKT representation.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mlinefromtext" id="Procedure_4bcf525" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mlinefromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT - Return a specified ST_MultiLineString value from WKT representation.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mlinefromwkb" id="Procedure_315ce75" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mlinefromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mlinefromwkb" id="Procedure_107a73e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mlinefromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mpointfromtext" id="Procedure_352ac05" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpointfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mpointfromtext" id="Procedure_20e7ca" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpointfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'MULTIPOINT'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mpointfromwkb" id="Procedure_30ca15d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpointfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mpointfromwkb" id="Procedure_2592865" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpointfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mpolyfromtext" id="Procedure_36d0e42" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpolyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mpolyfromtext" id="Procedure_13a93d6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpolyfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mpolyfromwkb" id="Procedure_2f67825" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpolyfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_mpolyfromwkb" id="Procedure_5df0f6a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpolyfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_multi" id="Procedure_1a3932a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multi(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_force_multi$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the geometry as a MULTI* geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_multilinefromwkb" id="Procedure_1e6ce00" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multilinefromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_multilinestringfromtext" id="Procedure_482262f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multilinestringfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_MLineFromText($1)$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_multilinestringfromtext" id="Procedure_45cacb0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multilinestringfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_MLineFromText($1, $2)$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_multipointfromtext" id="Procedure_4ac663e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipointfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_MPointFromText($1)$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_multipointfromwkb" id="Procedure_5564115" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipointfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_multipointfromwkb" id="Procedure_3f5c4f0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipointfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_multipolyfromwkb" id="Procedure_3deacd6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipolyfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_multipolyfromwkb" id="Procedure_2a516f8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipolyfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_multipolygonfromtext" id="Procedure_343daeb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipolygonfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_MPolyFromText($1, $2)$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_multipolygonfromtext" id="Procedure_4d8c3d7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipolygonfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_MPolyFromText($1)$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_ndims" id="Procedure_1bd8514" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ndims(geometry)
 RETURNS smallint
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 5
AS '$libdir/postgis-2.4', $function$LWGEOM_ndims$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns coordinate dimension of the geometry as a small int. Values are: 2,3 or 4.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="5" type="int2" />
		</procedure>
		<procedure name="st_nearestvalue" id="Procedure_5f529f5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_nearestValue$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, pt, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="pt" jt="1111" type="geometry" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_nearestvalue" id="Procedure_4010c9f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT st_nearestvalue($1, 1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, pt, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="pt" jt="1111" type="geometry" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_nearestvalue" id="Procedure_75bce" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT st_nearestvalue($1, $2, st_setsrid(st_makepoint(st_rastertoworldcoordx($1, $3, $4), st_rastertoworldcoordy($1, $3, $4)), st_srid($1)), $5) $function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, columnx, rowy, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="columnx" jt="4" type="int4" />
			<input_param name="rowy" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_nearestvalue" id="Procedure_3c64315" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT st_nearestvalue($1, 1, st_setsrid(st_makepoint(st_rastertoworldcoordx($1, $2, $3), st_rastertoworldcoordy($1, $2, $3)), st_srid($1)), $4) $function$
]]></string>
			<comment><![CDATA[args: rast, columnx, rowy, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="columnx" jt="4" type="int4" />
			<input_param name="rowy" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_neighborhood" id="Procedure_1679840" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision[]
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_neighborhood($1, $2, $3, $4, $5, $6, $7) $function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, columnX, rowY, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="columnx" jt="4" type="int4" />
			<input_param name="rowy" jt="4" type="int4" />
			<input_param name="distancex" jt="4" type="int4" />
			<input_param name="distancey" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="2003" type="_float8" />
		</procedure>
		<procedure name="st_neighborhood" id="Procedure_5ac03d8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision[]
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_neighborhood($1, 1, $2, $3, $4, $5, $6) $function$
]]></string>
			<comment><![CDATA[args: rast, columnX, rowY, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="columnx" jt="4" type="int4" />
			<input_param name="rowy" jt="4" type="int4" />
			<input_param name="distancex" jt="4" type="int4" />
			<input_param name="distancey" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="2003" type="_float8" />
		</procedure>
		<procedure name="st_neighborhood" id="Procedure_210f0c9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision[]
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		wx double precision;
		wy double precision;
		rtn double precision[][];
	BEGIN
		IF (st_geometrytype($3) != 'ST_Point') THEN
			RAISE EXCEPTION 'Attempting to get the neighbor of a pixel with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		wx := st_x($3);
		wy := st_y($3);
		SELECT public._ST_neighborhood(
			$1, $2,
			st_worldtorastercoordx(rast, wx, wy),
			st_worldtorastercoordy(rast, wx, wy),
			$4, $5,
			$6
		) INTO rtn;
		RETURN rtn;
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, pt, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="pt" jt="1111" type="geometry" />
			<input_param name="distancex" jt="4" type="int4" />
			<input_param name="distancey" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="2003" type="_float8" />
		</procedure>
		<procedure name="st_neighborhood" id="Procedure_15a1268" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision[]
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT st_neighborhood($1, 1, $2, $3, $4, $5) $function$
]]></string>
			<comment><![CDATA[args: rast, pt, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="pt" jt="1111" type="geometry" />
			<input_param name="distancex" jt="4" type="int4" />
			<input_param name="distancey" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="2003" type="_float8" />
		</procedure>
		<procedure name="st_node" id="Procedure_530b704" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_node(g geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_Node$function$
]]></string>
			<comment><![CDATA[args: geom - Node a set of linestrings.]]></comment>
			<input_param name="g" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_normalize" id="Procedure_3846c47" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_normalize(geom geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_Normalize$function$
]]></string>
			<comment><![CDATA[args: geom - Return the geometry in its canonical form.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_notsamealignmentreason" id="Procedure_306301d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_notsamealignmentreason(rast1 raster, rast2 raster)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_notSameAlignmentReason$function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Returns text stating if rasters are aligned and if not aligned, a reason why.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_npoints" id="Procedure_30d4d8c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_npoints(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_npoints$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the number of points (vertexes) in a geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_nrings" id="Procedure_1d59f8d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_nrings(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_nrings$function$
]]></string>
			<comment><![CDATA[args: geomA - If the geometry is a polygon or multi-polygon returns the number of rings.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_numbands" id="Procedure_272f16f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numbands(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getNumBands$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the number of bands in the raster object.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_numgeometries" id="Procedure_10c350f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numgeometries(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_numgeometries_collection$function$
]]></string>
			<comment><![CDATA[args: geom - If geometry is a GEOMETRYCOLLECTION (or MULTI*) return the number of geometries, for single geometries will return 1, otherwise return NULL.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_numinteriorring" id="Procedure_4053712" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numinteriorring(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_numinteriorrings_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Return the number of interior rings of a polygon in the geometry. Synonym for ST_NumInteriorRings.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_numinteriorrings" id="Procedure_194531e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numinteriorrings(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_numinteriorrings_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Return the number of interior rings of a polygon geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_numpatches" id="Procedure_a806ee" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numpatches(geometry)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN public.ST_NumGeometries($1)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the number of faces on a Polyhedral Surface. Will return null for non-polyhedral geometries.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_numpoints" id="Procedure_55cb273" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numpoints(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_numpoints_linestring$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the number of points in an ST_LineString or ST_CircularString value.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_offsetcurve" id="Procedure_292ca17" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_offsetcurve(line geometry, distance double precision, params text DEFAULT ''::text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_OffsetCurve$function$
]]></string>
			<comment><![CDATA[args: line, signed_distance, style_parameters=' - Return an offset line at a given distance and side from an input line. Useful for computing parallel lines about a center line]]></comment>
			<input_param name="line" jt="1111" type="geometry" />
			<input_param name="distance" jt="8" type="float8" />
			<input_param name="params" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_orderingequals" id="Procedure_26d8045" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_orderingequals(geometrya geometry, geometryb geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$
	SELECT $1 OPERATOR(public.~=) $2 AND public._ST_OrderingEquals($1, $2)
	$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns true if the given geometries represent the same geometry and points are in the same directional order.]]></comment>
			<input_param name="geometrya" jt="1111" type="geometry" />
			<input_param name="geometryb" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_overlaps" id="Procedure_5cbb039" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_overlaps(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Overlaps($1,$2)$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_overlaps" id="Procedure_4a232bd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_overlaps(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._ST_overlaps($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA and rastB intersect but one does not completely contain the other.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_overlaps" id="Procedure_2da6498" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_overlaps(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT public.st_overlaps($1, NULL::integer, $2, NULL::integer) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Return true if raster rastA and rastB intersect but one does not completely contain the other.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_patchn" id="Procedure_5057b4c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_patchn(geometry, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN public.ST_GeometryN($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: geomA, n - Return the 1-based Nth geometry (face) if the geometry is a POLYHEDRALSURFACE, POLYHEDRALSURFACEM. Otherwise, return NULL.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_perimeter" id="Procedure_1d2fd98" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_perimeter(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_perimeter2d_poly$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, MultiPolygon). geometry measurement is in units of spatial reference and geography is in meters.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_perimeter" id="Procedure_5840501" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_perimeter(geog geography, use_spheroid boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$geography_perimeter$function$
]]></string>
			<comment><![CDATA[args: geog, use_spheroid=true - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, MultiPolygon). geometry measurement is in units of spatial reference and geography is in meters.]]></comment>
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="use_spheroid" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_perimeter2d" id="Procedure_94aaa0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_perimeter2d(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 10
AS '$libdir/postgis-2.4', $function$LWGEOM_perimeter2d_poly$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the 2-dimensional perimeter of the geometry, if it is a polygon or multi-polygon. This is currently an alias for ST_Perimeter.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_pixelascentroid" id="Procedure_47a00b1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelascentroid(rast raster, x integer, y integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_Centroid(geom) FROM public._ST_pixelaspolygons($1, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, x, y - Returns the centroid (point geometry) of the area represented by a pixel.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_pixelascentroids" id="Procedure_43281da" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelascentroids(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_Centroid(geom), val, x, y FROM public._ST_pixelaspolygons($1, $2, NULL, NULL, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns the centroid (point geometry) for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel. The point geometry is the centroid of the area represented by a pixel.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="val" jt="8" type="float8" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
		</procedure>
		<procedure name="st_pixelaspoint" id="Procedure_17be09f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelaspoint(rast raster, x integer, y integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ST_PointN(ST_ExteriorRing(geom), 1) FROM public._ST_pixelaspolygons($1, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, columnx, rowy - Returns a point geometry of the pixels upper-left corner.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_pixelaspoints" id="Procedure_3a7a088" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelaspoints(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_PointN(  public.ST_ExteriorRing(geom), 1), val, x, y FROM public._ST_pixelaspolygons($1, $2, NULL, NULL, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns a point geometry for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel. The coordinates of the point geometry are of the pixels upper-left corner.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="val" jt="8" type="float8" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
		</procedure>
		<procedure name="st_pixelaspolygon" id="Procedure_2dad1ef" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelaspolygon(rast raster, x integer, y integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT geom FROM public._ST_pixelaspolygons($1, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, columnx, rowy - Returns the polygon geometry that bounds the pixel for a particular row and column.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_pixelaspolygons" id="Procedure_5e5c6ea" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelaspolygons(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT geom, val, x, y FROM public._ST_pixelaspolygons($1, $2, NULL, NULL, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns the polygon geometry that bounds every pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="val" jt="8" type="float8" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
		</procedure>
		<procedure name="st_pixelheight" id="Procedure_4d39db2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelheight(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getPixelHeight$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the pixel height in geometric units of the spatial reference system.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_pixelofvalue" id="Procedure_5b95cb7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean DEFAULT true, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_pixelOfValue$function$
]]></string>
			<comment><![CDATA[args: rast, nband, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="search" jt="2003" type="_float8" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="val" jt="8" type="float8" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
		</procedure>
		<procedure name="st_pixelofvalue" id="Procedure_cf4f76" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean DEFAULT true, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT val, x, y FROM public.ST_PixelOfValue($1, 1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="search" jt="2003" type="_float8" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="val" jt="8" type="float8" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
		</procedure>
		<procedure name="st_pixelofvalue" id="Procedure_22cd6b9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean DEFAULT true, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT x, y FROM public.ST_PixelofValue($1, $2, ARRAY[$3], $4) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="search" jt="8" type="float8" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
		</procedure>
		<procedure name="st_pixelofvalue" id="Procedure_5f525c7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean DEFAULT true, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT x, y FROM public.ST_PixelOfValue($1, 1, ARRAY[$2], $3) $function$
]]></string>
			<comment><![CDATA[args: rast, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="search" jt="8" type="float8" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
		</procedure>
		<procedure name="st_pixelwidth" id="Procedure_3a7ca5c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelwidth(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getPixelWidth$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the pixel width in geometric units of the spatial reference system.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_point" id="Procedure_b17a71" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_point(double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_makepoint$function$
]]></string>
			<comment><![CDATA[args: x_lon, y_lat - Returns an ST_Point with the given coordinate values. OGC alias for ST_MakePoint.]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_point_inside_circle" id="Procedure_51e6099" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_point_inside_circle(geometry, double precision, double precision, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Point_Inside_Circle', 'ST_PointInsideCircle', '2.2.0');
    SELECT public.ST_PointInsideCircle($1,$2,$3,$4);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_pointfromgeohash" id="Procedure_4cdcc32" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointfromgeohash(text, integer DEFAULT NULL::integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/postgis-2.4', $function$point_from_geohash$function$
]]></string>
			<comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a point from a GeoHash string.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_pointfromtext" id="Procedure_3297c92" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'POINT'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_pointfromtext" id="Procedure_5e2f7c1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'POINT'
	THEN public.ST_GeomFromText($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_pointfromwkb" id="Procedure_3b8df4f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'POINT'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_pointfromwkb" id="Procedure_41a9af3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'POINT'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_pointinsidecircle" id="Procedure_35c1b64" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointinsidecircle(geometry, double precision, double precision, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_inside_circle_point$function$
]]></string>
			<comment><![CDATA[args: a_point, center_x, center_y, radius - Is the point geometry inside the circle defined by center_x, center_y, radius]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_pointn" id="Procedure_5353fc7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointn(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_pointn_linestring$function$
]]></string>
			<comment><![CDATA[args: a_linestring, n - Return the Nth point in the first LineString or circular LineString in the geometry. Negative values are counted backwards from the end of the LineString. Returns NULL if there is no linestring in the geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_pointonsurface" id="Procedure_3b4866" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointonsurface(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$pointonsurface$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a POINT guaranteed to lie on the surface.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_points" id="Procedure_5c5ad68" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_points(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_Points$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a MultiPoint containing all of the coordinates of a geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polyfromtext" id="Procedure_5e741d6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polyfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1)) = 'POLYGON'
	THEN public.ST_GeomFromText($1)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polyfromtext" id="Procedure_4ccbf5e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromText($1, $2)) = 'POLYGON'
	THEN public.ST_GeomFromText($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polyfromwkb" id="Procedure_4eb7e64" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polyfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1, $2)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polyfromwkb" id="Procedure_115c7ce" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polyfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polygon" id="Procedure_2a5dcc5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygon(geometry, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT public.ST_SetSRID(public.ST_MakePolygon($1), $2)
	$function$
]]></string>
			<comment><![CDATA[args: aLineString, srid - Returns a polygon built from the specified linestring and SRID.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polygon" id="Procedure_2fd9a75" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygon(rast raster, band integer DEFAULT 1)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getPolygon$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polygonfromtext" id="Procedure_3b7a2c1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygonfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_PolyFromText($1, $2)$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polygonfromtext" id="Procedure_342ad2a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygonfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_PolyFromText($1)$function$
]]></string>
			<comment><![CDATA[args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polygonfromwkb" id="Procedure_3313734" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygonfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1,$2)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polygonfromwkb" id="Procedure_437a468" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygonfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	SELECT CASE WHEN public.geometrytype(public.ST_GeomFromWKB($1)) = 'POLYGON'
	THEN public.ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polygonize" id="Procedure_31e13f1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygonize(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$polygonize_garray$function$
]]></string>
			<comment><![CDATA[args: geom_array - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.]]></comment>
			<input_param name="$1" jt="2003" type="_geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_polygonize" id="Procedure_3410d90" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_polygonize polygonize_garray]]></string>
			<comment><![CDATA[args: geomfield - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_project" id="Procedure_5455405" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_project(geog geography, distance double precision, azimuth double precision)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE COST 100
AS '$libdir/postgis-2.4', $function$geography_project$function$
]]></string>
			<comment><![CDATA[args: g1, distance, azimuth - Returns a POINT projected from a start point using a distance in meters and bearing (azimuth) in radians.]]></comment>
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="distance" jt="8" type="float8" />
			<input_param name="azimuth" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_30ae476" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_quantile($1, $2, $3, 1, $4) $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_828c5d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_quantile($1, $2, TRUE, 1, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_3dab32d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_quantile($1, 1, TRUE, 1, $2) $function$
]]></string>
			<comment><![CDATA[args: rast, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_b38593" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_quantile($1, $2, $3, 1, ARRAY[$4]::double precision[])).value $function$
]]></string>
			<comment><![CDATA[args: rast, nband, exclude_nodata_value, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_3b2b3c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_quantile($1, $2, TRUE, 1, ARRAY[$3]::double precision[])).value $function$
]]></string>
			<comment><![CDATA[args: rast, nband, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_1bdab55" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT ( public._ST_quantile($1, 1, $2, 1, ARRAY[$3]::double precision[])).value $function$
]]></string>
			<comment><![CDATA[args: rast, exclude_nodata_value, quantile=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_20f2f98" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_quantile($1, 1, TRUE, 1, ARRAY[$2]::double precision[])).value $function$
]]></string>
			<comment><![CDATA[args: rast, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_3bb75dd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT public._ST_quantile($1, $2, $3, $4, 1, $5) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_34ebf33" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_quantile($1, $2, $3, TRUE, 1, $4) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_3f5a7ed" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT public._ST_quantile($1, $2, 1, TRUE, 1, $3) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="quantiles" jt="2003" type="_float8" />
			<input_param name="quantile" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_474276" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_quantile($1, $2, $3, $4, 1, ARRAY[$5]::double precision[])).value $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_3139a72" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_quantile($1, $2, $3, TRUE, 1, ARRAY[$4]::double precision[])).value $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_1701b1a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE
AS $function$ SELECT ( public._ST_quantile($1, $2, 1, $3, 1, ARRAY[$4]::double precision[])).value $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_quantile" id="Procedure_3365242" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_quantile($1, $2, 1, TRUE, 1, ARRAY[$3]::double precision[])).value $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="quantile" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_range4ma" id="Procedure_4985ed7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
    DECLARE
        _matrix float[][];
        min float;
        max float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        max := '-Infinity'::float;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min = _matrix[x][y];
                END IF;
                IF max < _matrix[x][y] THEN
                    max = _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        IF max = '-Infinity'::float OR min = 'Infinity'::float THEN
            RETURN NULL;
        END IF;
        RETURN max - min;
    END;
    $function$
]]></string>
			<input_param name="matrix" jt="2003" type="_float8" />
			<input_param name="nodatamode" jt="12" type="text" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_range4ma" id="Procedure_17bb525" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_value double precision[][][];
		min double precision;
		max double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		min := 'Infinity'::double precision;
		max := '-Infinity'::double precision;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;
					IF _value[z][y][x] < min THEN
						min := _value[z][y][x];
					END IF;
					IF _value[z][y][x] > max THEN
						max := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;
		IF max = '-Infinity'::double precision OR min = 'Infinity'::double precision THEN
			RETURN NULL;
		END IF;
		RETURN max - min;
	END;
	$function$
]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_rastertoworldcoord" id="Procedure_56ad3cd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT longitude, latitude FROM public._ST_rastertoworldcoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xcolumn, yrow - Returns the rasters upper left corner as geometric X and Y (longitude and latitude) given a column and row. Column and row starts at 1.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="columnx" jt="4" type="int4" />
			<input_param name="rowy" jt="4" type="int4" />
			<input_param name="longitude" jt="8" type="float8" />
			<input_param name="latitude" jt="8" type="float8" />
		</procedure>
		<procedure name="st_rastertoworldcoordx" id="Procedure_977825" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rastertoworldcoordx(rast raster, xr integer, yr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT longitude FROM public._ST_rastertoworldcoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xcolumn, yrow - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="xr" jt="4" type="int4" />
			<input_param name="yr" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_rastertoworldcoordx" id="Procedure_1f024d7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rastertoworldcoordx(rast raster, xr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT longitude FROM public._ST_rastertoworldcoord($1, $2, NULL) $function$
]]></string>
			<comment><![CDATA[args: rast, xcolumn - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="xr" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_rastertoworldcoordy" id="Procedure_5730cc6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rastertoworldcoordy(rast raster, xr integer, yr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT latitude FROM public._ST_rastertoworldcoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xcolumn, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="xr" jt="4" type="int4" />
			<input_param name="yr" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_rastertoworldcoordy" id="Procedure_2b03744" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rastertoworldcoordy(rast raster, yr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT latitude FROM public._ST_rastertoworldcoord($1, NULL, $2) $function$
]]></string>
			<comment><![CDATA[args: rast, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="yr" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_reclass" id="Procedure_1d4786f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reclass(rast raster, VARIADIC reclassargset reclassarg[])
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		i int;
		expr text;
	BEGIN
		-- for each reclassarg, validate elements as all except nodataval cannot be NULL
		FOR i IN SELECT * FROM generate_subscripts($2, 1) LOOP
			IF $2[i].nband IS NULL OR $2[i].reclassexpr IS NULL OR $2[i].pixeltype IS NULL THEN
				RAISE WARNING 'Values are required for the nband, reclassexpr and pixeltype attributes.';
				RETURN rast;
			END IF;
		END LOOP;
		RETURN public._ST_reclass($1, VARIADIC $2);
	END;
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="reclassargset" jt="2003" type="_reclassarg" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_reclass" id="Procedure_2234b4a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT st_reclass($1, ROW($2, $3, $4, $5)) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="reclassexpr" jt="12" type="text" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_reclass" id="Procedure_5ad4720" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reclass(rast raster, reclassexpr text, pixeltype text)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT st_reclass($1, ROW(1, $2, $3, NULL)) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="reclassexpr" jt="12" type="text" />
			<input_param name="pixeltype" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_relate" id="Procedure_a6abf0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_relate(geom1 geometry, geom2 geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$relate_full$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_relate" id="Procedure_1e4f4b2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_relate(geom1 geometry, geom2 geometry, integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$relate_full$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB, BoundaryNodeRule - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_relate" id="Procedure_4101033" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_relate(geom1 geometry, geom2 geometry, text)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$relate_pattern$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB, intersectionMatrixPattern - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_relatematch" id="Procedure_2695237" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_relatematch(text, text)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$ST_RelateMatch$function$
]]></string>
			<comment><![CDATA[args: intersectionMatrix, intersectionMatrixPattern - Returns true if intersectionMattrixPattern1 implies intersectionMatrixPattern2]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_removepoint" id="Procedure_31ffbd0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_removepoint(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_removepoint$function$
]]></string>
			<comment><![CDATA[args: linestring, offset - Remove point from a linestring.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_removerepeatedpoints" id="Procedure_1df72f1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_removerepeatedpoints(geom geometry, tolerance double precision DEFAULT 0.0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_RemoveRepeatedPoints$function$
]]></string>
			<comment><![CDATA[args: geom, tolerance - Returns a version of the given geometry with duplicated points removed.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="tolerance" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_resample" id="Procedure_1f37dd1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_resample(rast raster, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_gdalwarp($1, $8,	$9, NULL, $2, $3, $4, $5, $6, $7) $function$
]]></string>
			<comment><![CDATA[args: rast, scalex=0, scaley=0, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbor, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="gridx" jt="8" type="float8" />
			<input_param name="gridy" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_resample" id="Procedure_2b51b89" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_resample(rast raster, width integer, height integer, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_gdalwarp($1, $8,	$9, NULL, NULL, NULL, $4, $5, $6, $7, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, width, height, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="gridx" jt="8" type="float8" />
			<input_param name="gridy" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_resample" id="Procedure_9dd313" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_resample(rast raster, ref raster, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, usescale boolean DEFAULT true)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		rastsrid int;
		_srid int;
		_dimx int;
		_dimy int;
		_scalex double precision;
		_scaley double precision;
		_gridx double precision;
		_gridy double precision;
		_skewx double precision;
		_skewy double precision;
	BEGIN
		SELECT srid, width, height, scalex, scaley, upperleftx, upperlefty, skewx, skewy INTO _srid, _dimx, _dimy, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy FROM st_metadata($2);
		rastsrid := public.ST_SRID($1);
		-- both rasters must have the same SRID
		IF (rastsrid != _srid) THEN
			RAISE EXCEPTION 'The raster to be resampled has a different SRID from the reference raster';
			RETURN NULL;
		END IF;
		IF usescale IS TRUE THEN
			_dimx := NULL;
			_dimy := NULL;
		ELSE
			_scalex := NULL;
			_scaley := NULL;
		END IF;
		RETURN public._ST_gdalwarp($1, $3, $4, NULL, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy, _dimx, _dimy);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, ref, algorithm=NearestNeighbour, maxerr=0.125, usescale=true - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="ref" jt="1111" type="raster" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<input_param name="usescale" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_resample" id="Procedure_59fbb89" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_resample(rast raster, ref raster, usescale boolean, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.st_resample($1, $2, $4, $5, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, ref, usescale, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="ref" jt="1111" type="raster" />
			<input_param name="usescale" jt="-7" type="bool" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_rescale" id="Procedure_9eb09f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT  public._ST_GdalWarp($1, $4, $5, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_rescale" id="Procedure_99caed" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rescale(rast raster, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT  public._ST_GdalWarp($1, $3, $4, NULL, $2, $2) $function$
]]></string>
			<comment><![CDATA[args: rast, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="scalexy" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_resize" id="Procedure_2b0225f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_resize(rast raster, width text, height text, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		i integer;
		wh text[2];
		whi integer[2];
		whd double precision[2];
		_width integer;
		_height integer;
	BEGIN
		wh[1] := trim(both from $2);
		wh[2] := trim(both from $3);
		-- see if width and height are percentages
		FOR i IN 1..2 LOOP
			IF position('%' in wh[i]) > 0 THEN
				BEGIN
					wh[i] := (regexp_matches(wh[i], E'^(\\d*.?\\d*)%{1}$'))[1];
					IF length(wh[i]) < 1 THEN
						RAISE invalid_parameter_value;
					END IF;
					whd[i] := wh[i]::double precision * 0.01;
				EXCEPTION WHEN OTHERS THEN -- TODO: WHEN invalid_parameter_value !
					RAISE EXCEPTION 'Invalid percentage value provided for width/height';
					RETURN NULL;
				END;
			ELSE
				BEGIN
					whi[i] := abs(wh[i]::integer);
				EXCEPTION WHEN OTHERS THEN -- TODO: only handle appropriate SQLSTATE
					RAISE EXCEPTION 'Non-integer value provided for width/height';
					RETURN NULL;
				END;
			END IF;
		END LOOP;
		IF whd[1] IS NOT NULL OR whd[2] IS NOT NULL THEN
			SELECT foo.width, foo.height INTO _width, _height FROM public.ST_Metadata($1) AS foo;
			IF whd[1] IS NOT NULL THEN
				whi[1] := round(_width::double precision * whd[1])::integer;
			END IF;
			IF whd[2] IS NOT NULL THEN
				whi[2] := round(_height::double precision * whd[2])::integer;
			END IF;
		END IF;
		-- should NEVER be here
		IF whi[1] IS NULL OR whi[2] IS NULL THEN
			RAISE EXCEPTION 'Unable to determine appropriate width or height';
			RETURN NULL;
		END IF;
		FOR i IN 1..2 LOOP
			IF whi[i] < 1 THEN
				whi[i] = 1;
			END IF;
		END LOOP;
		RETURN public._ST_gdalwarp(
			$1,
			$4, $5,
			NULL,
			NULL, NULL,
			NULL, NULL,
			NULL, NULL,
			whi[1], whi[2]
		);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, width, height, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="width" jt="12" type="text" />
			<input_param name="height" jt="12" type="text" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_resize" id="Procedure_43b67e2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_resize(rast raster, width integer, height integer, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_gdalwarp($1, $4, $5, NULL, NULL, NULL, NULL, NULL, NULL, NULL, abs($2), abs($3)) $function$
]]></string>
			<comment><![CDATA[args: rast, width, height, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_resize" id="Procedure_4c2ac14" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		_width integer;
		_height integer;
	BEGIN
		-- range check
		IF $2 <= 0. OR $2 > 1. OR $3 <= 0. OR $3 > 1. THEN
			RAISE EXCEPTION 'Percentages must be a value greater than zero and less than or equal to one, e.g. 0.5 for 50%%';
		END IF;
		SELECT width, height INTO _width, _height FROM public.ST_Metadata($1);
		_width := round(_width::double precision * $2)::integer;
		_height:= round(_height::double precision * $3)::integer;
		IF _width < 1 THEN
			_width := 1;
		END IF;
		IF _height < 1 THEN
			_height := 1;
		END IF;
		RETURN public._ST_gdalwarp(
			$1,
			$4, $5,
			NULL,
			NULL, NULL,
			NULL, NULL,
			NULL, NULL,
			_width, _height
		);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, percentwidth, percentheight, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="percentwidth" jt="8" type="float8" />
			<input_param name="percentheight" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_reskew" id="Procedure_1c5cb07" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_GdalWarp($1, $4, $5, NULL, 0, 0, NULL, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, skewx, skewy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_reskew" id="Procedure_2dea920" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reskew(rast raster, skewxy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_GdalWarp($1, $3, $4, NULL, 0, 0, NULL, NULL, $2, $2) $function$
]]></string>
			<comment><![CDATA[args: rast, skewxy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="skewxy" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_retile" id="Procedure_464f00b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_retile(tab regclass, col name, ext geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text DEFAULT 'NearestNeighbour'::text)
 RETURNS SETOF raster
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
  rec RECORD;
  ipx FLOAT8;
  ipy FLOAT8;
  tx int;
  ty int;
  te GEOMETRY; -- tile extent
  ncols int;
  nlins int;
  srid int;
  sql TEXT;
BEGIN
  RAISE DEBUG 'Target coverage will have sfx=%, sfy=%', sfx, sfy;
  -- 2. Loop over each target tile and build it from source tiles
  ipx := st_xmin(ext);
  ncols := ceil((st_xmax(ext)-ipx)/sfx/tw);
  IF sfy < 0 THEN
    ipy := st_ymax(ext);
    nlins := ceil((st_ymin(ext)-ipy)/sfy/th);
  ELSE
    ipy := st_ymin(ext);
    nlins := ceil((st_ymax(ext)-ipy)/sfy/th);
  END IF;
  srid := ST_Srid(ext);
  RAISE DEBUG 'Target coverage will have % x % tiles, each of approx size % x %', ncols, nlins, tw, th;
  RAISE DEBUG 'Target coverage will cover extent %', ext::box2d;
  FOR tx IN 0..ncols-1 LOOP
    FOR ty IN 0..nlins-1 LOOP
      te := ST_MakeEnvelope(ipx + tx     *  tw  * sfx,
                             ipy + ty     *  th  * sfy,
                             ipx + (tx+1) *  tw  * sfx,
                             ipy + (ty+1) *  th  * sfy,
                             srid);
      --RAISE DEBUG 'sfx/sfy: %, %', sfx, sfy;
      --RAISE DEBUG 'tile extent %', te;
      sql := 'SELECT count(*),  public.ST_Clip(  public.ST_Union(  public.ST_SnapToGrid(  public.ST_Rescale(  public.ST_Clip(' || quote_ident(col)
          || ',  public.ST_Expand($3, greatest($1,$2))),$1, $2, $6), $4, $5, $1, $2)), $3) g FROM ' || tab::text
          || ' WHERE  public.ST_Intersects(' || quote_ident(col) || ', $3)';
      --RAISE DEBUG 'SQL: %', sql;
      FOR rec IN EXECUTE sql USING sfx, sfy, te, ipx, ipy, algo LOOP
        --RAISE DEBUG '% source tiles intersect target tile %,% with extent %', rec.count, tx, ty, te::box2d;
        IF rec.g IS NULL THEN
          RAISE WARNING 'No source tiles cover target tile %,% with extent %',
            tx, ty, te::box2d;
        ELSE
          --RAISE DEBUG 'Tile for extent % has size % x %', te::box2d, st_width(rec.g), st_height(rec.g);
          RETURN NEXT rec.g;
        END IF;
      END LOOP;
    END LOOP;
  END LOOP;
  RETURN;
END;
$function$
]]></string>
			<comment><![CDATA[args: tab, col, ext, sfx, sfy, tw, th, algo='NearestNeighbor' - Return a set of configured tiles from an arbitrarily tiled raster coverage.]]></comment>
			<input_param name="tab" jt="1111" type="regclass" />
			<input_param name="col" jt="12" type="name" />
			<input_param name="ext" jt="1111" type="geometry" />
			<input_param name="sfx" jt="8" type="float8" />
			<input_param name="sfy" jt="8" type="float8" />
			<input_param name="tw" jt="4" type="int4" />
			<input_param name="th" jt="4" type="int4" />
			<input_param name="algo" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_reverse" id="Procedure_49be283" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reverse(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_reverse$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the geometry with vertex order reversed.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_rotate" id="Procedure_4a77ef3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotate(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_rotate" id="Procedure_22a5a65" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotate(geometry, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1,	$3 - cos($2) * $3 + sin($2) * $4, $4 - sin($2) * $3 - cos($2) * $4, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians, x0, y0 - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_rotate" id="Procedure_1bc6fa1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotate(geometry, double precision, geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1, public.ST_X($3) - cos($2) * public.ST_X($3) + sin($2) * public.ST_Y($3), public.ST_Y($3) - sin($2) * public.ST_X($3) - cos($2) * public.ST_Y($3), 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians, pointOrigin - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_rotatex" id="Procedure_2845066" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotatex(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the X axis.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_rotatey" id="Procedure_baf008" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotatey(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the Y axis.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_rotatez" id="Procedure_3b94c95" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotatez(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Rotate($1, $2)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the Z axis.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_rotation" id="Procedure_1fdf39e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotation(raster)
 RETURNS double precision
 LANGUAGE sql
AS $function$ SELECT ( public.ST_Geotransform($1)).theta_i $function$
]]></string>
			<comment><![CDATA[args: rast - Returns the rotation of the raster in radian.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_roughness" id="Procedure_5121a6f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_roughness(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_roughness4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_roughness" id="Procedure_16a4a02" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_roughness(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_roughness($1, $2, NULL::raster, $3, $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_samealignment" id="Procedure_38cb3cd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_samealignment(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_sameAlignment$function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Returns true if rasters have same skew, scale, spatial ref, and offset (pixels can be put on same grid without cutting into pixels) and false if they dont with notice detailing issue.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_samealignment" id="Procedure_faacd8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT st_samealignment(st_makeemptyraster(1, 1, $1, $2, $3, $4, $5, $6), st_makeemptyraster(1, 1, $7, $8, $9, $10, $11, $12)) $function$
]]></string>
			<comment><![CDATA[args: ulx1, uly1, scalex1, scaley1, skewx1, skewy1, ulx2, uly2, scalex2, scaley2, skewx2, skewy2 - Returns true if rasters have same skew, scale, spatial ref, and offset (pixels can be put on same grid without cutting into pixels) and false if they dont with notice detailing issue.]]></comment>
			<input_param name="ulx1" jt="8" type="float8" />
			<input_param name="uly1" jt="8" type="float8" />
			<input_param name="scalex1" jt="8" type="float8" />
			<input_param name="scaley1" jt="8" type="float8" />
			<input_param name="skewx1" jt="8" type="float8" />
			<input_param name="skewy1" jt="8" type="float8" />
			<input_param name="ulx2" jt="8" type="float8" />
			<input_param name="uly2" jt="8" type="float8" />
			<input_param name="scalex2" jt="8" type="float8" />
			<input_param name="scaley2" jt="8" type="float8" />
			<input_param name="skewx2" jt="8" type="float8" />
			<input_param name="skewy2" jt="8" type="float8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_samealignment" id="Procedure_109bba6" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_samealignment RASTER_sameAlignment
create function st_samealignment  SELECT st_samealignment(st_makeemptyraster(1, 1, $1, $2, $3, $4, $5, $6), st_makeemptyraster(1, 1, $7, $8, $9, $10, $11, $12)) ]]></string>
			<comment><![CDATA[args: rastfield - Returns true if rasters have same skew, scale, spatial ref, and offset (pixels can be put on same grid without cutting into pixels) and false if they dont with notice detailing issue.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_scale" id="Procedure_4314413" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_scale(geometry, geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_Scale$function$
]]></string>
			<comment><![CDATA[args: geom, factor - Scale a geometry by given factors.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_scale" id="Procedure_516dea9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_scale(geometry, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Scale($1, public.ST_MakePoint($2, $3, $4))$function$
]]></string>
			<comment><![CDATA[args: geomA, XFactor, YFactor, ZFactor - Scale a geometry by given factors.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_scale" id="Procedure_54f7cdf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_scale(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Scale($1, $2, $3, 1)$function$
]]></string>
			<comment><![CDATA[args: geomA, XFactor, YFactor - Scale a geometry by given factors.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_scalex" id="Procedure_413346" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_scalex(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getXScale$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the X component of the pixel width in units of coordinate reference system.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_scaley" id="Procedure_489f054" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_scaley(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getYScale$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the Y component of the pixel height in units of coordinate reference system.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_segmentize" id="Procedure_2fed21b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_segmentize(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_segmentize2d$function$
]]></string>
			<comment><![CDATA[args: geom, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_segmentize" id="Procedure_8c661b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_segmentize(geog geography, max_segment_length double precision)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$geography_segmentize$function$
]]></string>
			<comment><![CDATA[args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance.]]></comment>
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="max_segment_length" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="st_setbandisnodata" id="Procedure_213c3aa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setbandisnodata(rast raster, band integer DEFAULT 1)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_setBandIsNoData$function$
]]></string>
			<comment><![CDATA[args: rast, band=1 - Sets the isnodata flag of the band to TRUE.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setbandnodatavalue" id="Procedure_4c0cf34" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean DEFAULT false)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_setBandNoDataValue$function$
]]></string>
			<comment><![CDATA[args: rast, band, nodatavalue, forcechecking=false - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="nodatavalue" jt="8" type="float8" />
			<input_param name="forcechecking" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setbandnodatavalue" id="Procedure_5680337" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setbandnodatavalue(rast raster, nodatavalue double precision)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT public.ST_setbandnodatavalue($1, 1, $2, FALSE) $function$
]]></string>
			<comment><![CDATA[args: rast, nodatavalue - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nodatavalue" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_seteffectivearea" id="Procedure_3023194" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_seteffectivearea(geometry, double precision DEFAULT '-1'::integer, integer DEFAULT 1)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_SetEffectiveArea$function$
]]></string>
			<comment><![CDATA[args: geomA, threshold = 0, set_area = 1 - Sets the effective area for each vertex, storing the value in the M ordinate. A simplified geometry can then be generated by filtering on the M ordinate.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_setgeoreference" id="Procedure_37f4ac3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setgeoreference(rast raster, georef text, format text DEFAULT 'GDAL'::text)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
    DECLARE
        params text[];
        rastout raster;
    BEGIN
        IF rast IS NULL THEN
            RAISE WARNING 'Cannot set georeferencing on a null raster in st_setgeoreference.';
            RETURN rastout;
        END IF;
        SELECT regexp_matches(georef,
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s' ||
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)') INTO params;
        IF NOT FOUND THEN
            RAISE EXCEPTION 'st_setgeoreference requires a string with 6 floating point values.';
        END IF;
        IF format = 'ESRI' THEN
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}
            rastout := public.ST_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := public.ST_setskew(rastout, params[3]::float8, params[2]::float8);
            rastout := public.ST_setupperleft(rastout,
                                   params[5]::float8 - (params[1]::float8 * 0.5),
                                   params[6]::float8 - (params[4]::float8 * 0.5));
        ELSE
            IF format != 'GDAL' THEN
                RAISE WARNING 'Format ''%'' is not recognized, defaulting to GDAL format.', format;
            END IF;
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}
            rastout := public.ST_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := public.ST_setskew( rastout, params[3]::float8, params[2]::float8);
            rastout := public.ST_setupperleft(rastout, params[5]::float8, params[6]::float8);
        END IF;
        RETURN rastout;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: rast, georefcoords, format=GDAL - Set Georeference 6 georeference parameters in a single call. Numbers should be separated by white space. Accepts inputs in GDAL or ESRI format. Default is GDAL.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="georef" jt="12" type="text" />
			<input_param name="format" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setgeoreference" id="Procedure_2978aa1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_setgeoreference($1, array_to_string(ARRAY[$4, $7, $6, $5, $2, $3], ' ')) $function$
]]></string>
			<comment><![CDATA[args: rast, upperleftx, upperlefty, scalex, scaley, skewx, skewy - Set Georeference 6 georeference parameters in a single call. Numbers should be separated by white space. Accepts inputs in GDAL or ESRI format. Default is GDAL.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="upperleftx" jt="8" type="float8" />
			<input_param name="upperlefty" jt="8" type="float8" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setgeotransform" id="Procedure_5ecbc3c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_setGeotransform$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="imag" jt="8" type="float8" />
			<input_param name="jmag" jt="8" type="float8" />
			<input_param name="theta_i" jt="8" type="float8" />
			<input_param name="theta_ij" jt="8" type="float8" />
			<input_param name="xoffset" jt="8" type="float8" />
			<input_param name="yoffset" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setpoint" id="Procedure_15bbd3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setpoint(geometry, integer, geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_setpoint_linestring$function$
]]></string>
			<comment><![CDATA[args: linestring, zerobasedposition, point - Replace point of a linestring with a given point.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_setrotation" id="Procedure_123cd4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setrotation(rast raster, rotation double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_setRotation$function$
]]></string>
			<comment><![CDATA[args: rast, rotation - Set the rotation of the raster in radian.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="rotation" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setscale" id="Procedure_aaa9db" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setscale(rast raster, scale double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_setScale$function$
]]></string>
			<comment><![CDATA[args: rast, xy - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="scale" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setscale" id="Procedure_1fa3c3a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setscale(rast raster, scalex double precision, scaley double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_setScaleXY$function$
]]></string>
			<comment><![CDATA[args: rast, x, y - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setskew" id="Procedure_31829d1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setskew(rast raster, skew double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_setSkew$function$
]]></string>
			<comment><![CDATA[args: rast, skewxy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="skew" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setskew" id="Procedure_34d1ac0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setskew(rast raster, skewx double precision, skewy double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_setSkewXY$function$
]]></string>
			<comment><![CDATA[args: rast, skewx, skewy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="skewx" jt="8" type="float8" />
			<input_param name="skewy" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setsrid" id="Procedure_f0298f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setsrid(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_set_srid$function$
]]></string>
			<comment><![CDATA[args: geom, srid - Set the SRID on a geometry to a particular integer value.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_setsrid" id="Procedure_5e866db" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setsrid(geog geography, srid integer)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_set_srid$function$
]]></string>
			<input_param name="geog" jt="1111" type="geography" />
			<input_param name="srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geography" />
		</procedure>
		<procedure name="st_setsrid" id="Procedure_2db5a8e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setsrid(rast raster, srid integer)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_setSRID$function$
]]></string>
			<comment><![CDATA[args: rast, srid - Sets the SRID of a raster to a particular integer srid defined in the spatial_ref_sys table.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setupperleft" id="Procedure_29fdd8b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_setUpperLeftXY$function$
]]></string>
			<comment><![CDATA[args: rast, x, y - Sets the value of the upper left corner of the pixel of the raster to projected X and Y coordinates.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="upperleftx" jt="8" type="float8" />
			<input_param name="upperlefty" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setvalue" id="Procedure_593b673" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_setPixelValue$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<input_param name="newvalue" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setvalue" id="Procedure_3b3d43b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, x integer, y integer, newvalue double precision)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT public.ST_SetValue($1, 1, $2, $3, $4) $function$
]]></string>
			<comment><![CDATA[args: rast, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<input_param name="newvalue" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setvalue" id="Procedure_78592f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_setvalues($1, $2, ARRAY[ROW($3, $4)]::geomval[], FALSE) $function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, geom, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="newvalue" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setvalue" id="Procedure_3a5cd9b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, geom geometry, newvalue double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_setvalues($1, 1, ARRAY[ROW($2, $3)]::geomval[], FALSE) $function$
]]></string>
			<comment><![CDATA[args: rast, geom, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="newvalue" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setvalues" id="Procedure_37c0f1f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[] DEFAULT NULL::boolean[], keepnodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_setvalues($1, $2, $3, $4, $5, $6, FALSE, NULL, $7) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, columnx, rowy, newvalueset, noset=NULL, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<input_param name="newvalueset" jt="2003" type="_float8" />
			<input_param name="noset" jt="2003" type="_bool" />
			<input_param name="keepnodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setvalues" id="Procedure_191e4c1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_setvalues($1, $2, $3, $4, $5, NULL, TRUE, $6, $7) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, columnx, rowy, newvalueset, nosetvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<input_param name="newvalueset" jt="2003" type="_float8" />
			<input_param name="nosetvalue" jt="8" type="float8" />
			<input_param name="keepnodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setvalues" id="Procedure_5d0674c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	BEGIN
		IF width <= 0 OR height <= 0 THEN
			RAISE EXCEPTION 'Values for width and height must be greater than zero';
			RETURN NULL;
		END IF;
		RETURN public._ST_setvalues($1, $2, $3, $4, array_fill($7, ARRAY[$6, $5]::int[]), NULL, FALSE, NULL, $8);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, nband, columnx, rowy, width, height, newvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="newvalue" jt="8" type="float8" />
			<input_param name="keepnodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setvalues" id="Procedure_1d45509" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	BEGIN
		IF width <= 0 OR height <= 0 THEN
			RAISE EXCEPTION 'Values for width and height must be greater than zero';
			RETURN NULL;
		END IF;
		RETURN public._ST_setvalues($1, 1, $2, $3, array_fill($6, ARRAY[$5, $4]::int[]), NULL, FALSE, NULL, $7);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, columnx, rowy, width, height, newvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="newvalue" jt="8" type="float8" />
			<input_param name="keepnodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_setvalues" id="Procedure_16d4e9e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE
AS '$libdir/rtpostgis-2.4', $function$RASTER_setPixelValuesGeomval$function$
]]></string>
			<comment><![CDATA[args: rast, nband, geomvalset, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="geomvalset" jt="2003" type="_geomval" />
			<input_param name="keepnodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_sharedpaths" id="Procedure_10e9a1a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_sharedpaths(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_SharedPaths$function$
]]></string>
			<comment><![CDATA[args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_shift_longitude" id="Procedure_3431deb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_shift_longitude(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._postgis_deprecate('ST_Shift_Longitude', 'ST_ShiftLongitude', '2.2.0');
    SELECT public.ST_ShiftLongitude($1);
  $function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_shiftlongitude" id="Procedure_3d73794" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_shiftlongitude(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_longitude_shift$function$
]]></string>
			<comment><![CDATA[args: geomA - Toggle geometry coordinates between -180..180 and 0..360 ranges.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_shortestline" id="Procedure_264d9e7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_shortestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_shortestline2d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional shortest line between two geometries]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_simplify" id="Procedure_2182c9a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_simplify(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_simplify2d$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_simplify" id="Procedure_262c01a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_simplify(geometry, double precision, boolean)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_simplify2d$function$
]]></string>
			<comment><![CDATA[args: geomA, tolerance, preserveCollapsed - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_simplifypreservetopology" id="Procedure_3d4348f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_simplifypreservetopology(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$topologypreservesimplify$function$
]]></string>
			<comment><![CDATA[args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm. Will avoid creating derived geometries (polygons in particular) that are invalid.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_simplifyvw" id="Procedure_1bdfcb0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_simplifyvw(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_SetEffectiveArea$function$
]]></string>
			<comment><![CDATA[args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Visvalingam-Whyatt algorithm]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_skewx" id="Procedure_295e3c9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_skewx(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getXSkew$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the georeference X skew (or rotation parameter).]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_skewy" id="Procedure_3dfa546" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_skewy(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getYSkew$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the georeference Y skew (or rotation parameter).]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_slope" id="Procedure_52c3d22" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_slope(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM public.ST_Metadata(_rast);
		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_slope4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_pixwidth::text, _pixheight::text,
			_width::text, _height::text,
			units::text, scale::text
		);
	END;
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="units" jt="12" type="text" />
			<input_param name="scale" jt="8" type="float8" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_slope" id="Procedure_3a14f18" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_slope(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_slope($1, $2, NULL::raster, $3, $4, $5, $6) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="units" jt="12" type="text" />
			<input_param name="scale" jt="8" type="float8" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_snap" id="Procedure_32f4047" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snap(geom1 geometry, geom2 geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_Snap$function$
]]></string>
			<comment><![CDATA[args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_snaptogrid" id="Procedure_eea008" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snaptogrid(geometry, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_snaptogrid$function$
]]></string>
			<comment><![CDATA[args: geomA, originX, originY, sizeX, sizeY - Snap all points of the input geometry to a regular grid.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="8" type="float8" />
			<input_param name="$5" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_snaptogrid" id="Procedure_4fa3deb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snaptogrid(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT COST 1
AS $function$SELECT public.ST_SnapToGrid($1, 0, 0, $2, $3)$function$
]]></string>
			<comment><![CDATA[args: geomA, sizeX, sizeY - Snap all points of the input geometry to a regular grid.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_snaptogrid" id="Procedure_95cfe4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snaptogrid(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_SnapToGrid($1, 0, 0, $2, $2)$function$
]]></string>
			<comment><![CDATA[args: geomA, size - Snap all points of the input geometry to a regular grid.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_snaptogrid" id="Procedure_448bd22" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_snaptogrid_pointoff$function$
]]></string>
			<comment><![CDATA[args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<input_param name="" jt="8" type="float8" />
			<input_param name="" jt="8" type="float8" />
			<input_param name="" jt="8" type="float8" />
			<input_param name="" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_snaptogrid" id="Procedure_2b8d19b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_GdalWarp($1, $4, $5, NULL, $6, $7, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, gridx, gridy, algorithm=NearestNeighbour, maxerr=0.125, scalex=DEFAULT 0, scaley=DEFAULT 0 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="gridx" jt="8" type="float8" />
			<input_param name="gridy" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_snaptogrid" id="Procedure_20f5098" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_gdalwarp($1, $6, $7, NULL, $4, $5, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, gridx, gridy, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="gridx" jt="8" type="float8" />
			<input_param name="gridy" jt="8" type="float8" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_snaptogrid" id="Procedure_47335c6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_gdalwarp($1, $5, $6, NULL, $4, $4, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, gridx, gridy, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="gridx" jt="8" type="float8" />
			<input_param name="gridy" jt="8" type="float8" />
			<input_param name="scalexy" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_split" id="Procedure_484868" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_split(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_Split$function$
]]></string>
			<comment><![CDATA[args: input, blade - Returns a collection of geometries resulting by splitting a geometry.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_srid" id="Procedure_3a56383" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_srid(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 5
AS '$libdir/postgis-2.4', $function$LWGEOM_get_srid$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the spatial reference identifier for the ST_Geometry as defined in spatial_ref_sys table.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_srid" id="Procedure_125230a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_srid(geog geography)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_get_srid$function$
]]></string>
			<input_param name="geog" jt="1111" type="geography" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_srid" id="Procedure_132d877" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_srid(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getSRID$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the spatial reference identifier of the raster as defined in spatial_ref_sys table.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_startpoint" id="Procedure_41fa8dc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_startpoint(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_startpoint_linestring$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the first point of a LINESTRING geometry as a POINT.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_stddev4ma" id="Procedure_361a6df" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT stddev(unnest) FROM unnest($1) $function$
]]></string>
			<input_param name="matrix" jt="2003" type="_float8" />
			<input_param name="nodatamode" jt="12" type="text" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_stddev4ma" id="Procedure_3ab768" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT stddev(unnest) FROM unnest($1) $function$
]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_subdivide" id="Procedure_15fe8c1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_subdivide(geom geometry, maxvertices integer DEFAULT 256)
 RETURNS SETOF geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 100
AS '$libdir/postgis-2.4', $function$ST_Subdivide$function$
]]></string>
			<comment><![CDATA[args: geom, max_vertices=256 - Returns a set of geometry where no geometry in the set has more than the specified number of vertices.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="maxvertices" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_sum4ma" id="Procedure_bdcea" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
    DECLARE
        _matrix float[][];
        sum float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        RETURN sum;
    END;
    $function$
]]></string>
			<input_param name="matrix" jt="2003" type="_float8" />
			<input_param name="nodatamode" jt="12" type="text" />
			<input_param name="args" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_sum4ma" id="Procedure_570558a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_value double precision[][][];
		sum double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		sum := 0;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := public._ST_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;
					sum := sum + _value[z][y][x];
				END LOOP;
			END LOOP;
		END LOOP;
		RETURN sum;
	END;
	$function$
]]></string>
			<input_param name="value" jt="2003" type="_float8" />
			<input_param name="pos" jt="2003" type="_int4" />
			<input_param name="userargs" jt="2003" type="_text" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_summary" id="Procedure_4f287c2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_summary(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 25
AS '$libdir/postgis-2.4', $function$LWGEOM_summary$function$
]]></string>
			<comment><![CDATA[args: g - Returns a text summary of the contents of the geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_summary" id="Procedure_3f03b98" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_summary(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_summary$function$
]]></string>
			<comment><![CDATA[args: g - Returns a text summary of the contents of the geometry.]]></comment>
			<input_param name="$1" jt="1111" type="geography" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_summary" id="Procedure_2985534" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_summary(rast raster)
 RETURNS text
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
	DECLARE
		extent box2d;
		metadata record;
		bandmetadata record;
		msg text;
		msgset text[];
	BEGIN
		extent := public.ST_Extent(rast::geometry);
		metadata := public.ST_Metadata(rast);
		msg := 'Raster of ' || metadata.width || 'x' || metadata.height || ' pixels has ' || metadata.numbands || ' ';
		IF metadata.numbands = 1 THEN
			msg := msg || 'band ';
		ELSE
			msg := msg || 'bands ';
		END IF;
		msg := msg || 'and extent of ' || extent;
		IF
			round(metadata.skewx::numeric, 10) <> round(0::numeric, 10) OR
			round(metadata.skewy::numeric, 10) <> round(0::numeric, 10)
		THEN
			msg := 'Skewed ' || overlay(msg placing 'r' from 1 for 1);
		END IF;
		msgset := Array[]::text[] || msg;
		FOR bandmetadata IN SELECT * FROM public.ST_BandMetadata(rast, ARRAY[]::int[]) LOOP
			msg := 'band ' || bandmetadata.bandnum || ' of pixtype ' || bandmetadata.pixeltype || ' is ';
			IF bandmetadata.isoutdb IS FALSE THEN
				msg := msg || 'in-db ';
			ELSE
				msg := msg || 'out-db ';
			END IF;
			msg := msg || 'with ';
			IF bandmetadata.nodatavalue IS NOT NULL THEN
				msg := msg || 'NODATA value of ' || bandmetadata.nodatavalue;
			ELSE
				msg := msg || 'no NODATA value';
			END IF;
			msgset := msgset || ('    ' || msg);
		END LOOP;
		RETURN array_to_string(msgset, E'\n');
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast - Returns a text summary of the contents of the raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="st_summarystats" id="Procedure_aaab95" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_summarystats(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, $2, $3, 1) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, exclude_nodata_value - Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_summarystats" id="Procedure_4b5cf19" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_summarystats(rast raster, exclude_nodata_value boolean)
 RETURNS summarystats
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, 1, $2, 1) $function$
]]></string>
			<comment><![CDATA[args: rast, exclude_nodata_value - Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_summarystats" id="Procedure_15feb03" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_summarystats(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS summarystats
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, $2, $3, $4, 1) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_summarystats" id="Procedure_47fedb1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean)
 RETURNS summarystats
 LANGUAGE sql
 STABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_summarystats($1, $2, 1, $3, 1) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, exclude_nodata_value - Returns summarystats consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
			<input_param name="count" jt="-5" type="int8" />
			<input_param name="sum" jt="8" type="float8" />
			<input_param name="mean" jt="8" type="float8" />
			<input_param name="stddev" jt="8" type="float8" />
			<input_param name="min" jt="8" type="float8" />
			<input_param name="max" jt="8" type="float8" />
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_swapordinates" id="Procedure_32da9ee" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_swapordinates(geom geometry, ords cstring)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_SwapOrdinates$function$
]]></string>
			<comment><![CDATA[args: geom, ords - Returns a version of the given geometry with given ordinate values swapped.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="ords" jt="1111" type="cstring" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_symdifference" id="Procedure_290c761" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_symdifference(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$symdifference$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns a geometry that represents the portions of A and B that do not intersect. It is called a symmetric difference because ST_SymDifference(A,B) = ST_SymDifference(B,A).]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_symmetricdifference" id="Procedure_54e4fad" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_symmetricdifference(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$symdifference$function$
]]></string>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_tile" id="Procedure_48961ac" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean DEFAULT false, nodataval double precision DEFAULT NULL::double precision)
 RETURNS SETOF raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_tile($1, $3, $4, $2, $5, $6) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="2003" type="_int4" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="padwithnodata" jt="-7" type="bool" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_tile" id="Procedure_35b00b9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean DEFAULT false, nodataval double precision DEFAULT NULL::double precision)
 RETURNS SETOF raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_tile($1, $3, $4, ARRAY[$2]::integer[], $5, $6) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="padwithnodata" jt="-7" type="bool" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_tile" id="Procedure_30c35d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_tile(rast raster, width integer, height integer, padwithnodata boolean DEFAULT false, nodataval double precision DEFAULT NULL::double precision)
 RETURNS SETOF raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public._ST_tile($1, $2, $3, NULL::integer[], $4, $5) $function$
]]></string>
			<comment><![CDATA[args: rast, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="width" jt="4" type="int4" />
			<input_param name="height" jt="4" type="int4" />
			<input_param name="padwithnodata" jt="-7" type="bool" />
			<input_param name="nodataval" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_touches" id="Procedure_31d800e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_touches(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $1 OPERATOR(public.&&) $2 AND public._ST_Touches($1,$2)$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_touches" id="Procedure_102e52f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_touches(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_touches($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA and rastB have at least one point in common but their interiors do not intersect.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_touches" id="Procedure_44889b7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_touches(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT public.st_touches($1, NULL::integer, $2, NULL::integer) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Return true if raster rastA and rastB have at least one point in common but their interiors do not intersect.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_tpi" id="Procedure_3402be2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_tpi(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM public.ST_Metadata(_rast);
		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_tpi4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_tpi" id="Procedure_a5c3e8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_tpi(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_tpi($1, $2, NULL::raster, $3, $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_transform" id="Procedure_5733bc5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transform(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$transform$function$
]]></string>
			<comment><![CDATA[args: g1, srid - Return a new geometry with its coordinates transformed to a different spatial reference.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_transform" id="Procedure_58e122e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transform(geom geometry, to_proj text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.postgis_transform_geometry($1, proj4text, $2, 0)
FROM spatial_ref_sys WHERE srid=public.ST_SRID($1);$function$
]]></string>
			<comment><![CDATA[args: geom, to_proj - Return a new geometry with its coordinates transformed to a different spatial reference.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="to_proj" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_transform" id="Procedure_4d1531f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transform(geom geometry, from_proj text, to_proj text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.postgis_transform_geometry($1, $2, $3, 0)$function$
]]></string>
			<comment><![CDATA[args: geom, from_proj, to_proj - Return a new geometry with its coordinates transformed to a different spatial reference.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="from_proj" jt="12" type="text" />
			<input_param name="to_proj" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_transform" id="Procedure_3c7da5f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transform(geom geometry, from_proj text, to_srid integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.postgis_transform_geometry($1, $2, proj4text, $3)
FROM spatial_ref_sys WHERE srid=$3;$function$
]]></string>
			<comment><![CDATA[args: geom, from_proj, to_srid - Return a new geometry with its coordinates transformed to a different spatial reference.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="from_proj" jt="12" type="text" />
			<input_param name="to_srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_transform" id="Procedure_50bf716" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transform(rast raster, srid integer, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_gdalwarp($1, $3, $4, $2, $5, $6) $function$
]]></string>
			<comment><![CDATA[args: rast, srid, algorithm=NearestNeighbor, maxerr=0.125, scalex, scaley - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="srid" jt="4" type="int4" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_transform" id="Procedure_5807df5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_gdalwarp($1, $5, $6, $2, $3, $4) $function$
]]></string>
			<comment><![CDATA[args: rast, srid, scalex, scaley, algorithm=NearestNeighbor, maxerr=0.125 - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="srid" jt="4" type="int4" />
			<input_param name="scalex" jt="8" type="float8" />
			<input_param name="scaley" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_transform" id="Procedure_4b3aa51" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transform(rast raster, srid integer, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public._ST_gdalwarp($1, $4, $5, $2, $3, $3) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="srid" jt="4" type="int4" />
			<input_param name="scalexy" jt="8" type="float8" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_transform" id="Procedure_214f6e2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transform(rast raster, alignto raster, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		_srid integer;
		_scalex double precision;
		_scaley double precision;
		_gridx double precision;
		_gridy double precision;
		_skewx double precision;
		_skewy double precision;
	BEGIN
		SELECT srid, scalex, scaley, upperleftx, upperlefty, skewx, skewy INTO _srid, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy FROM st_metadata($2);
		RETURN public._ST_gdalwarp($1, $3, $4, _srid, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy, NULL, NULL);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, alignto, algorithm=NearestNeighbor, maxerr=0.125 - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="alignto" jt="1111" type="raster" />
			<input_param name="algorithm" jt="12" type="text" />
			<input_param name="maxerr" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_translate" id="Procedure_2717e82" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_translate(geometry, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)$function$
]]></string>
			<comment><![CDATA[args: g1, deltax, deltay, deltaz - Translate a geometry by given offsets.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_translate" id="Procedure_574a471" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_translate(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Translate($1, $2, $3, 0)$function$
]]></string>
			<comment><![CDATA[args: g1, deltax, deltay - Translate a geometry by given offsets.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_transscale" id="Procedure_47e4b72" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transscale(geometry, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$SELECT public.ST_Affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, deltaX, deltaY, XFactor, YFactor - Translate a geometry by given factors and offsets.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<input_param name="$2" jt="8" type="float8" />
			<input_param name="$3" jt="8" type="float8" />
			<input_param name="$4" jt="8" type="float8" />
			<input_param name="$5" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_tri" id="Procedure_4347ee" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_tri(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := public.ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		-- get properties
		_pixwidth := public.ST_PixelWidth(_rast);
		_pixheight := public.ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM public.ST_Metadata(_rast);
		RETURN public.ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			' public._ST_tri4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	$function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="customextent" jt="1111" type="raster" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_tri" id="Procedure_3866f4d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_tri(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT public.ST_tri($1, $2, NULL::raster, $3, $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="pixeltype" jt="12" type="text" />
			<input_param name="interpolate_nodata" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_unaryunion" id="Procedure_4d1f4b2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_unaryunion(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_UnaryUnion$function$
]]></string>
			<comment><![CDATA[args: geom - Like ST_Union, but working at the geometry component level.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_union" id="Procedure_1301207" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_union(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$geomunion$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns a geometry that represents the point set union of the Geometries.]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_union" id="Procedure_1ddb5c6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_union(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$pgis_union_geometry_array$function$
]]></string>
			<comment><![CDATA[args: g1_array - Returns a geometry that represents the point set union of the Geometries.]]></comment>
			<input_param name="$1" jt="2003" type="_geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_union" id="Procedure_548a49f" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_union geomunion
create function st_union pgis_union_geometry_array]]></string>
			<comment><![CDATA[args: g1field - Returns a geometry that represents the point set union of the Geometries.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_union" id="Procedure_1218af9" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_union geomunion
create function st_union pgis_union_geometry_array]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="2003" type="_unionarg" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_union" id="Procedure_ca0b8b" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_union geomunion
create function st_union pgis_union_geometry_array]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_union" id="Procedure_1244f99" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_union geomunion
create function st_union pgis_union_geometry_array]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_union" id="Procedure_121404a" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_union geomunion
create function st_union pgis_union_geometry_array]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_union" id="Procedure_b07627" isSystem="false" params_known="y" >
			<string><![CDATA[create function st_union geomunion
create function st_union pgis_union_geometry_array]]></string>
			<input_param name="$1" jt="1111" type="raster" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="raster" />
		</procedure>
		<procedure name="st_upperleftx" id="Procedure_3476733" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_upperleftx(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getXUpperLeft$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the upper left X coordinate of raster in projected spatial ref.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_upperlefty" id="Procedure_4e06fa6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_upperlefty(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getYUpperLeft$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the upper left Y coordinate of raster in projected spatial ref.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_value" id="Procedure_3a6130d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getPixelValue$function$
]]></string>
			<comment><![CDATA[args: rast, band, x, y, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_value" id="Procedure_4ec1591" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_value(rast raster, x integer, y integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT st_value($1, 1, $2, $3, $4) $function$
]]></string>
			<comment><![CDATA[args: rast, x, y, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="x" jt="4" type="int4" />
			<input_param name="y" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_value" id="Procedure_b41a51" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
    DECLARE
        x float8;
        y float8;
        gtype text;
    BEGIN
        gtype := public.ST_GeometryType(pt);
        IF ( gtype != 'ST_Point' ) THEN
            RAISE EXCEPTION 'Attempting to get the value of a pixel with a non-point geometry';
        END IF;
				IF public.ST_SRID(pt) != public.ST_SRID(rast) THEN
            RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
				END IF;
        x := public.ST_x(pt);
        y := public.ST_y(pt);
        RETURN public.ST_value(rast,
                        band,
                        public.ST_worldtorastercoordx(rast, x, y),
                        public.ST_worldtorastercoordy(rast, x, y),
                        exclude_nodata_value);
    END;
    $function$
]]></string>
			<comment><![CDATA[args: rast, band, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="band" jt="4" type="int4" />
			<input_param name="pt" jt="1111" type="geometry" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_value" id="Procedure_1250ec1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_value(rast raster, pt geometry, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT public.ST_value($1, 1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="pt" jt="1111" type="geometry" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_4430179" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT value, count FROM public._ST_valuecount($1, $2, $3, $4, $5) $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="count" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_26ceded" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT value, count FROM public._ST_valuecount($1, $2, TRUE, $3, $4) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="count" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_bcdb28" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT value, count FROM public._ST_valuecount($1, 1, TRUE, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="count" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_3ff30bb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).count $function$
]]></string>
			<comment><![CDATA[args: rast, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_3363532" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).count $function$
]]></string>
			<comment><![CDATA[args: rast, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_5c05c55" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).count $function$
]]></string>
			<comment><![CDATA[args: rast, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_4788a27" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, count FROM public._ST_valuecount($1, $2, $3, $4, $5, $6) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="count" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_37a98dd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, count FROM public._ST_valuecount($1, $2, $3, TRUE, $4, $5) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="count" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_b553bc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, count FROM public._ST_valuecount($1, $2, 1, TRUE, $3, $4) $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="count" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_40b318" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).count $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_38b0ff1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).count $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuecount" id="Procedure_15e738a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).count $function$
]]></string>
			<comment><![CDATA[args: rastertable, rastercolumn, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_539042b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT value, percent FROM public._ST_valuecount($1, $2, $3, $4, $5) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_521a075" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT value, percent FROM public._ST_valuecount($1, $2, TRUE, $3, $4) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_e09667" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$ SELECT value, percent FROM public._ST_valuecount($1, 1, TRUE, $2, $3) $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_356fc6d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).percent $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_25ab247" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).percent $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_2c44c94" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).percent $function$
]]></string>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_3c5b758" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, percent FROM public._ST_valuecount($1, $2, $3, $4, $5, $6) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_615cc2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, percent FROM public._ST_valuecount($1, $2, $3, TRUE, $4, $5) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_3a53611" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, percent FROM public._ST_valuecount($1, $2, 1, TRUE, $3, $4) $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="searchvalues" jt="2003" type="_float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<input_param name="value" jt="8" type="float8" />
			<input_param name="percent" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_5ea24a6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).percent $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="exclude_nodata_value" jt="-7" type="bool" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_14d761f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).percent $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="nband" jt="4" type="int4" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_valuepercent" id="Procedure_43c46b8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT ( public._ST_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).percent $function$
]]></string>
			<input_param name="rastertable" jt="12" type="text" />
			<input_param name="rastercolumn" jt="12" type="text" />
			<input_param name="searchvalue" jt="8" type="float8" />
			<input_param name="roundto" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_voronoilines" id="Procedure_2393331" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_voronoilines(g1 geometry, tolerance double precision DEFAULT 0.0, extend_to geometry DEFAULT NULL::geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$ SELECT public._ST_Voronoi(g1, extend_to, tolerance, false) $function$
]]></string>
			<comment><![CDATA[args: g1, tolerance, extend_to - Returns the boundaries between the cells of the Voronoi diagram constructed from the vertices of a geometry.]]></comment>
			<input_param name="g1" jt="1111" type="geometry" />
			<input_param name="tolerance" jt="8" type="float8" />
			<input_param name="extend_to" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_voronoipolygons" id="Procedure_bf7d96" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_voronoipolygons(g1 geometry, tolerance double precision DEFAULT 0.0, extend_to geometry DEFAULT NULL::geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1
AS $function$ SELECT public._ST_Voronoi(g1, extend_to, tolerance, true) $function$
]]></string>
			<comment><![CDATA[args: g1, tolerance, extend_to - Returns the cells of the Voronoi diagram constructed from the vertices of a geometry.]]></comment>
			<input_param name="g1" jt="1111" type="geometry" />
			<input_param name="tolerance" jt="8" type="float8" />
			<input_param name="extend_to" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_width" id="Procedure_930766" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_width(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/rtpostgis-2.4', $function$RASTER_getWidth$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the width of the raster in pixels.]]></comment>
			<input_param name="$1" jt="1111" type="raster" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_within" id="Procedure_20640c6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_within(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE
AS $function$SELECT $2 OPERATOR(public.~) $1 AND public._ST_Contains($2,$1)$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns true if the geometry A is completely inside geometry B]]></comment>
			<input_param name="geom1" jt="1111" type="geometry" />
			<input_param name="geom2" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_within" id="Procedure_3e13e26" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT $1 OPERATOR(public.&&) $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN public._st_within(public.st_convexhull($1), public.st_convexhull($3)) ELSE public._st_contains($3, $4, $1, $2) END $function$
]]></string>
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastA lie in the exterior of raster rastB and at least one point of the interior of rastA lies in the interior of rastB.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="nband1" jt="4" type="int4" />
			<input_param name="rast2" jt="1111" type="raster" />
			<input_param name="nband2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_within" id="Procedure_135f4c8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_within(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE COST 1000
AS $function$ SELECT public.st_within($1, NULL::integer, $2, NULL::integer) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastA lie in the exterior of raster rastB and at least one point of the interior of rastA lies in the interior of rastB.]]></comment>
			<input_param name="rast1" jt="1111" type="raster" />
			<input_param name="rast2" jt="1111" type="raster" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="st_wkbtosql" id="Procedure_226c011" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_wkbtosql(wkb bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_from_WKB$function$
]]></string>
			<comment><![CDATA[args: WKB - Return a specified ST_Geometry value from Well-Known Binary representation (WKB). This is an alias name for ST_GeomFromWKB that takes no srid]]></comment>
			<input_param name="wkb" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_wkttosql" id="Procedure_32b2101" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_wkttosql(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_from_text$function$
]]></string>
			<comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_worldtorastercoord" id="Procedure_29e0699" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT columnx, rowy FROM public._ST_worldtorastercoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, longitude, latitude - Returns the upper left corner as column and row given geometric X and Y (longitude and latitude) or a point geometry expressed in the spatial reference coordinate system of the raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="longitude" jt="8" type="float8" />
			<input_param name="latitude" jt="8" type="float8" />
			<input_param name="columnx" jt="4" type="int4" />
			<input_param name="rowy" jt="4" type="int4" />
		</procedure>
		<procedure name="st_worldtorastercoord" id="Procedure_3d7cdfb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer)
 RETURNS record
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		rx integer;
		ry integer;
	BEGIN
		IF public.ST_geometrytype(pt) != 'ST_Point' THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF public.ST_SRID(rast) != public.ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT rc.columnx AS x, rc.rowy AS y INTO columnx, rowy FROM public._ST_worldtorastercoord($1, public.ST_x(pt), public.ST_y(pt)) AS rc;
		RETURN;
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, pt - Returns the upper left corner as column and row given geometric X and Y (longitude and latitude) or a point geometry expressed in the spatial reference coordinate system of the raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="pt" jt="1111" type="geometry" />
			<input_param name="columnx" jt="4" type="int4" />
			<input_param name="rowy" jt="4" type="int4" />
		</procedure>
		<procedure name="st_worldtorastercoordx" id="Procedure_5779107" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_worldtorastercoordx(rast raster, xw double precision, yw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT columnx FROM public._ST_worldtorastercoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xw, yw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="xw" jt="8" type="float8" />
			<input_param name="yw" jt="8" type="float8" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_worldtorastercoordx" id="Procedure_5028442" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_worldtorastercoordx(rast raster, xw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT columnx FROM public._ST_worldtorastercoord($1, $2, NULL) $function$
]]></string>
			<comment><![CDATA[args: rast, xw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="xw" jt="8" type="float8" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_worldtorastercoordx" id="Procedure_306143e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_worldtorastercoordx(rast raster, pt geometry)
 RETURNS integer
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		xr integer;
	BEGIN
		IF ( public.ST_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF public.ST_SRID(rast) != public.ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT columnx INTO xr FROM public._ST_worldtorastercoord($1, public.ST_x(pt), public.ST_y(pt));
		RETURN xr;
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, pt - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="pt" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_worldtorastercoordy" id="Procedure_77ca0f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_worldtorastercoordy(rast raster, xw double precision, yw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT rowy FROM public._ST_worldtorastercoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xw, yw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="xw" jt="8" type="float8" />
			<input_param name="yw" jt="8" type="float8" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_worldtorastercoordy" id="Procedure_53e5bdf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_worldtorastercoordy(rast raster, yw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$ SELECT rowy FROM public._ST_worldtorastercoord($1, NULL, $2) $function$
]]></string>
			<comment><![CDATA[args: rast, xw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="yw" jt="8" type="float8" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_worldtorastercoordy" id="Procedure_16aae08" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_worldtorastercoordy(rast raster, pt geometry)
 RETURNS integer
 LANGUAGE plpgsql
 IMMUTABLE PARALLEL SAFE STRICT
AS $function$
	DECLARE
		yr integer;
	BEGIN
		IF ( st_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT rowy INTO yr FROM public._ST_worldtorastercoord($1, st_x(pt), st_y(pt));
		RETURN yr;
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, pt - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
			<input_param name="rast" jt="1111" type="raster" />
			<input_param name="pt" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="st_wrapx" id="Procedure_4626dff" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_wrapx(geom geometry, wrap double precision, move double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$ST_WrapX$function$
]]></string>
			<comment><![CDATA[args: geom, wrap, move - Wrap a geometry around an X value.]]></comment>
			<input_param name="geom" jt="1111" type="geometry" />
			<input_param name="wrap" jt="8" type="float8" />
			<input_param name="move" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="geometry" />
		</procedure>
		<procedure name="st_x" id="Procedure_1a48e1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_x(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_x_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the X coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_xmax" id="Procedure_51666e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_xmax(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_xmax$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns X maxima of a bounding box 2d or 3d or a geometry.]]></comment>
			<input_param name="$1" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_xmin" id="Procedure_4848028" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_xmin(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_xmin$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns X minima of a bounding box 2d or 3d or a geometry.]]></comment>
			<input_param name="$1" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_y" id="Procedure_43e8802" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_y(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_y_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the Y coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_ymax" id="Procedure_135be9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ymax(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_ymax$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Y maxima of a bounding box 2d or 3d or a geometry.]]></comment>
			<input_param name="$1" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_ymin" id="Procedure_ba0ee9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ymin(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_ymin$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Y minima of a bounding box 2d or 3d or a geometry.]]></comment>
			<input_param name="$1" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_z" id="Procedure_3c6b706" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_z(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$LWGEOM_z_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the Z coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_zmax" id="Procedure_3d13859" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_zmax(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_zmax$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.]]></comment>
			<input_param name="$1" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="st_zmflag" id="Procedure_5c238e0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_zmflag(geometry)
 RETURNS smallint
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 5
AS '$libdir/postgis-2.4', $function$LWGEOM_zmflag$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns ZM (dimension semantic) flag of the geometries as a small int. Values are: 0=2d, 1=3dm, 2=3dz, 3=4d.]]></comment>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="5" type="int2" />
		</procedure>
		<procedure name="st_zmin" id="Procedure_ad5551" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_zmin(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/postgis-2.4', $function$BOX3D_zmin$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.]]></comment>
			<input_param name="$1" jt="1111" type="box3d" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="text" id="Procedure_3e12d08" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.text(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT COST 25
AS '$libdir/postgis-2.4', $function$LWGEOM_to_text$function$
]]></string>
			<input_param name="$1" jt="1111" type="geometry" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="text_soundex" id="Procedure_23c25c6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.text_soundex(text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE PARALLEL SAFE STRICT
AS '$libdir/fuzzystrmatch', $function$soundex$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="unlockrows" id="Procedure_407e63d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.unlockrows(text)
 RETURNS integer
 LANGUAGE plpgsql
 STRICT
AS $function$ 
DECLARE
	ret int;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;
	EXECUTE 'DELETE FROM authorization_table where authid = ' ||
		quote_literal($1);
	GET DIAGNOSTICS ret = ROW_COUNT;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: auth_token - Remove all locks held by specified authorization id. Returns the number of locks released.]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="updategeometrysrid" id="Procedure_3566a68" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;
	unknown_srid integer;
	new_srid integer := new_srid_in;
BEGIN

	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;
		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;
		IF ( okay <> true ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;
	-- Ensure that column_name is in geometry_columns
	okay = false;
	FOR myrec IN SELECT type, coord_dimension FROM public.geometry_columns WHERE f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (NOT okay) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;
	-- Ensure that new_srid is valid
	IF ( new_srid > 0 ) THEN
		IF ( SELECT count(*) = 0 from spatial_ref_sys where srid = new_srid ) THEN
			RAISE EXCEPTION 'invalid SRID: % not found in spatial_ref_sys', new_srid;
			RETURN false;
		END IF;
	ELSE
		unknown_srid := public.ST_SRID('POINT EMPTY'::public.geometry);
		IF ( new_srid != unknown_srid ) THEN
			new_srid := unknown_srid;
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;
	IF postgis_constraint_srid(real_schema, table_name, column_name) IS NOT NULL THEN
	-- srid was enforced with constraints before, keep it that way.
        -- Make up constraint name
        cname = 'enforce_srid_'  || column_name;
        -- Drop enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' DROP constraint ' || quote_ident(cname);
        -- Update geometries SRID
        EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' SET ' || quote_ident(column_name) ||
            ' = public.ST_SetSRID(' || quote_ident(column_name) ||
            ', ' || new_srid::text || ')';
        -- Reset enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' ADD constraint ' || quote_ident(cname) ||
            ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')';
    ELSE
        -- We will use typmod to enforce if no srid constraints
        -- We are using postgis_type_name to lookup the new name
        -- (in case Paul changes his mind and flips geometry_columns to return old upper case name)
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' || quote_ident(table_name) ||
        ' ALTER COLUMN ' || quote_ident(column_name) || ' TYPE  geometry(' || public.postgis_type_name(myrec.type, myrec.coord_dimension, true) || ', ' || new_srid::text || ') USING public.ST_SetSRID(' || quote_ident(column_name) || ',' || new_srid::text || ');' ;
    END IF;
	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
			<input_param name="catalogn_name" jt="12" type="varchar" />
			<input_param name="schema_name" jt="12" type="varchar" />
			<input_param name="table_name" jt="12" type="varchar" />
			<input_param name="column_name" jt="12" type="varchar" />
			<input_param name="new_srid_in" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="updategeometrysrid" id="Procedure_6c1495" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategeometrysrid(character varying, character varying, character varying, integer)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT public.UpdateGeometrySRID('',$1,$2,$3,$4) into ret;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
			<input_param name="$1" jt="12" type="varchar" />
			<input_param name="$2" jt="12" type="varchar" />
			<input_param name="$3" jt="12" type="varchar" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="updategeometrysrid" id="Procedure_3701ff8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategeometrysrid(character varying, character varying, integer)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT public.UpdateGeometrySRID('','',$1,$2,$3) into ret;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
			<input_param name="$1" jt="12" type="varchar" />
			<input_param name="$2" jt="12" type="varchar" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="updaterastersrid" id="Procedure_48fa39d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT  public._UpdateRasterSRID($1, $2, $3, $4) $function$
]]></string>
			<comment><![CDATA[args: schema_name, table_name, column_name, new_srid - Change the SRID of all rasters in the user-specified column and table.]]></comment>
			<input_param name="schema_name" jt="12" type="name" />
			<input_param name="table_name" jt="12" type="name" />
			<input_param name="column_name" jt="12" type="name" />
			<input_param name="new_srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="updaterastersrid" id="Procedure_31c1218" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updaterastersrid(table_name name, column_name name, new_srid integer)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT  public._UpdateRasterSRID('', $1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: table_name, column_name, new_srid - Change the SRID of all rasters in the user-specified column and table.]]></comment>
			<input_param name="table_name" jt="12" type="name" />
			<input_param name="column_name" jt="12" type="name" />
			<input_param name="new_srid" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
	</schema>
	<connector name="synapseDB" database="PostgreSQL" driver_class="org.postgresql.Driver" driver_jar="postgresql-42.2.2.jar" driver_desc="Standard" host="atbigdawg" port="5432" instance="postgres" user="postgres" passwd="c3luYXBzZWRi" />
	<layout name="Default Layout" id="Layout_496ed8e" joined_routing="y" show_relation="columns" >
		<entity schema="public" name="alembic_version" color="c8f5bf" x="1110" y="285" />
		<entity schema="public" name="spatial_ref_sys" color="c8f5bf" x="1110" y="105" />
		<entity schema="public" name="geography_columns" color="c8f5bf" x="1275" y="285" />
		<entity schema="public" name="geometry_columns" color="c8f5bf" x="1080" y="405" />
		<entity schema="public" name="raster_columns" color="c8f5bf" x="930" y="45" />
		<entity schema="public" name="raster_overviews" color="c8f5bf" x="1305" y="480" />
		<entity schema="public" name="link" color="bfd4f5" x="135" y="45" />
		<entity schema="public" name="rating" color="bfd4f5" x="720" y="330" />
		<entity schema="public" name="volume" color="bfd4f5" x="240" y="240" />
		<entity schema="public" name="data_set" color="bfd4f5" x="45" y="240" />
		<entity schema="public" name="classificationtype" color="bfd4f5" x="855" y="555" />
		<entity schema="public" name="ratingsource" color="bfd4f5" x="705" y="570" />
		<entity schema="public" name="sourcechannel" color="bfd4f5" x="690" y="150" />
		<entity schema="public" name="bioobjectcollection" color="bfd4f5" x="105" y="480" />
		<entity schema="public" name="bioobject" color="bfd4f5" x="465" y="525" />
		<browser id="Browse_3c98b18" name="bioobject" confirm_updates="y" >
			<browse_table schema="public" entity="bioobject" x="20" y="20" width="400" height="300" />
		</browser>
		<browser id="Browse_3d001f3" name="bioobject_001" confirm_updates="y" >
			<browse_table schema="public" entity="bioobject" x="20" y="20" width="400" height="300" />
		</browser>
		<browser id="Browse_389d396" name="bioobjectcollection" confirm_updates="y" >
			<browse_table schema="public" entity="bioobjectcollection" x="20" y="20" width="400" height="300" />
		</browser>
		<browser id="Browse_4138fdf" name="classificationtype" confirm_updates="y" >
			<browse_table schema="public" entity="classificationtype" x="20" y="20" width="400" height="300" />
		</browser>
		<browser id="Browse_525e800" name="link" confirm_updates="y" >
			<browse_table schema="public" entity="link" x="20" y="20" width="400" height="300" />
		</browser>
	</layout>
	<layout name="Sample Layout with Tools" id="Layout_2458375" show_column_type="y" show_relation="columns" >
		<entity schema="public" name="alembic_version" color="c8f5bf" x="1350" y="315" />
		<entity schema="public" name="bioobject" color="bfd4f5" x="465" y="615" />
		<entity schema="public" name="bioobjectcollection" color="bfd4f5" x="180" y="435" />
		<entity schema="public" name="classificationtype" color="bfd4f5" x="690" y="540" />
		<entity schema="public" name="data_set" color="bfd4f5" x="45" y="270" />
		<entity schema="public" name="link" color="bfd4f5" x="270" y="105" />
		<entity schema="public" name="rating" color="bfd4f5" x="465" y="285" />
		<entity schema="public" name="ratingsource" color="bfd4f5" x="690" y="285" />
		<entity schema="public" name="sourcechannel" color="bfd4f5" x="465" y="75" />
		<entity schema="public" name="spatial_ref_sys" color="c8f5bf" x="1350" y="135" />
		<entity schema="public" name="volume" color="bfd4f5" x="270" y="285" />
		<entity schema="public" name="geography_columns" color="c8f5bf" x="1575" y="315" />
		<entity schema="public" name="geometry_columns" color="c8f5bf" x="1335" y="435" />
		<entity schema="public" name="raster_columns" color="c8f5bf" x="1140" y="75" />
		<entity schema="public" name="raster_overviews" color="c8f5bf" x="930" y="435" />
		<callout x="270" y="210" pointer="NO" >
			<comment><![CDATA[Double-click any table, column or foreign key to edit, right-click to start one of the tools below.
Use the Relational Data Browse for simultaneously exploring data from multiple tables.
All tools will be saved to project file and can be reopen.]]></comment>
		</callout>
		<group name="volume" color="ecf0f7" >
			<entity schema="public" name="volume" />
			<entity schema="public" name="rating" />
			<entity schema="public" name="bioobjectcollection" />
			<entity schema="public" name="bioobject" />
			<entity schema="public" name="data_set" />
			<entity schema="public" name="link" />
			<entity schema="public" name="sourcechannel" />
			<entity schema="public" name="ratingsource" />
			<entity schema="public" name="classificationtype" />
		</group>
		<group name="alembic_version" color="eef7ec" >
			<entity schema="public" name="alembic_version" />
			<entity schema="public" name="geography_columns" />
			<entity schema="public" name="geometry_columns" />
			<entity schema="public" name="raster_columns" />
			<entity schema="public" name="spatial_ref_sys" />
			<entity schema="public" name="raster_overviews" />
		</group>
		<script name="Sample SQL Editor" id="Editor_4788e94" language="SQL" >
			<string><![CDATA[SELECT * 
FROM
	"public".volume e;]]></string>
		</script>
		<browser id="Browse_57176cb" name="Sample Relational Data Browse" confirm_updates="y" >
			<browse_table schema="public" entity="volume" x="20" y="20" width="400" height="300" >
				<browse_table schema="public" entity="bioobjectcollection" fk="bioobjectcollection_volume_id_fkey" x="440" y="20" width="500" height="350" >
					<browse_table schema="public" entity="bioobject" fk="bioobject_object_collection_id_fkey" x="960" y="20" width="500" height="350" />
				</browse_table>
			</browse_table>
		</browser>
		<query id="Query_18e66ae" name="Sample Query Builder" >
			<query_table schema="public" name="volume" alias="v" x="45" y="45" >
				<column name="id" />
				<column name="name" />
				<column name="dataset_id" />
				<query_table schema="public" name="bioobjectcollection" alias="b" x="195" y="45" fk="bioobjectcollection_volume_id_fkey" type="Inner Join" >
					<column name="id" />
					<column name="name" />
					<column name="volume_id" />
					<column name="type" />
					<column name="synapse_collection_type" />
					<query_table schema="public" name="bioobject" alias="b1" x="420" y="45" fk="bioobject_object_collection_id_fkey" type="Inner Join" >
						<column name="id" />
						<column name="object_collection_id" />
						<column name="type" />
						<column name="oid" />
						<column name="areas" />
					</query_table>
				</query_table>
			</query_table>
		</query>
	</layout>
</project>