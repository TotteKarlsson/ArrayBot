// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 1/16/2018 10:34:38 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files (x86)\VideoLAN\VLC\axvlc.dll (1)
// LIBID: {DF2BBE39-40A8-433B-A279-073F48DA94B6}
// LCID: 0
// Helpfile: 
// HelpString: VideoLAN VLC ActiveX Plugin
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   AXVLC_TLBH
#define   AXVLC_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Axvlc_tlb
{

// *********************************************************************//
// HelpString: VideoLAN VLC ActiveX Plugin
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_AXVLC;
extern __declspec (package) const GUID IID_IVLCAudio;
extern __declspec (package) const GUID IID_IVLCChapter;
extern __declspec (package) const GUID IID_IVLCInput;
extern __declspec (package) const GUID IID_IVLCTitle;
extern __declspec (package) const GUID IID_IVLCLogo;
extern __declspec (package) const GUID IID_IVLCDeinterlace;
extern __declspec (package) const GUID IID_IVLCMarquee;
extern __declspec (package) const GUID IID_IVLCPlaylist;
extern __declspec (package) const GUID IID_IVLCPlaylistItems;
extern __declspec (package) const GUID IID_IVLCSubtitle;
extern __declspec (package) const GUID IID_IVLCVideo;
extern __declspec (package) const GUID IID_IPictureDisp;
extern __declspec (package) const GUID IID_IVLCControl2;
extern __declspec (package) const GUID IID_IVLCMediaDescription;
extern __declspec (package) const GUID DIID_DVLCEvents;
extern __declspec (package) const GUID GUID_VLCPlaylistMode;
extern __declspec (package) const GUID GUID_eVLCPlaylistMode;
extern __declspec (package) const GUID CLSID_VLCPlugin2;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    VLCPlaylistMode;
interface DECLSPEC_UUID("{9E0BD17B-2D3C-4656-B94D-03084F3FD9D4}") IVLCAudio;
typedef TComInterface<IVLCAudio, &IID_IVLCAudio> IVLCAudioPtr;

interface DECLSPEC_UUID("{5AF314CF-8849-4A79-A3FC-8DE6625D9E72}") IVLCChapter;
typedef TComInterface<IVLCChapter, &IID_IVLCChapter> IVLCChapterPtr;

interface DECLSPEC_UUID("{49E0DBD1-9440-466C-9C97-95C67190C603}") IVLCInput;
typedef TComInterface<IVLCInput, &IID_IVLCInput> IVLCInputPtr;

interface DECLSPEC_UUID("{B5DEF5A1-FFB6-4E68-B3D8-A12AC60FDA54}") IVLCTitle;
typedef TComInterface<IVLCTitle, &IID_IVLCTitle> IVLCTitlePtr;

interface DECLSPEC_UUID("{8A4A20C2-93F3-44E8-8644-BEB2E3487E84}") IVLCLogo;
typedef TComInterface<IVLCLogo, &IID_IVLCLogo> IVLCLogoPtr;

interface DECLSPEC_UUID("{BC97469F-CB11-4037-8DCE-5FC9F5F85307}") IVLCDeinterlace;
typedef TComInterface<IVLCDeinterlace, &IID_IVLCDeinterlace> IVLCDeinterlacePtr;

interface DECLSPEC_UUID("{8D076AD6-9B6F-4150-A0FD-5D7E8C8CB02C}") IVLCMarquee;
typedef TComInterface<IVLCMarquee, &IID_IVLCMarquee> IVLCMarqueePtr;

interface DECLSPEC_UUID("{54613049-40BF-4035-9E70-0A9312C0188D}") IVLCPlaylist;
typedef TComInterface<IVLCPlaylist, &IID_IVLCPlaylist> IVLCPlaylistPtr;

interface DECLSPEC_UUID("{FD37FE32-82BC-4A25-B056-315F4DBB194D}") IVLCPlaylistItems;
typedef TComInterface<IVLCPlaylistItems, &IID_IVLCPlaylistItems> IVLCPlaylistItemsPtr;

interface DECLSPEC_UUID("{465E787A-0556-452F-9477-954E4A940003}") IVLCSubtitle;
typedef TComInterface<IVLCSubtitle, &IID_IVLCSubtitle> IVLCSubtitlePtr;

interface DECLSPEC_UUID("{0AAEDF0B-D333-4B27-A0C6-BBF31413A42E}") IVLCVideo;
typedef TComInterface<IVLCVideo, &IID_IVLCVideo> IVLCVideoPtr;

interface DECLSPEC_UUID("{7BF80981-BF32-101A-8BBB-00AA00300CAB}") IPictureDisp;
typedef TComInterface<IPictureDisp, &IID_IPictureDisp> IPictureDispPtr;

interface DECLSPEC_UUID("{2D719729-5333-406C-BF12-8DE787FD65E3}") IVLCControl2;
typedef TComInterface<IVLCControl2, &IID_IVLCControl2> IVLCControl2Ptr;

interface DECLSPEC_UUID("{796A2C2D-5B11-4FB5-9077-56D5E674972B}") IVLCMediaDescription;
typedef TComInterface<IVLCMediaDescription, &IID_IVLCMediaDescription> IVLCMediaDescriptionPtr;

interface DECLSPEC_UUID("{DF48072F-5EF8-434E-9B40-E2F3AE759B5F}") DVLCEvents;
typedef TComInterface<DVLCEvents, &DIID_DVLCEvents> DVLCEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IVLCControl2 VLCPlugin2;
typedef IVLCControl2Ptr VLCPlugin2Ptr;

#define LIBID_OF_VLCPlugin2 (&LIBID_AXVLC)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef Axvlc_tlb::VLCPlaylistMode eVLCPlaylistMode;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class VLCPlaylistMode
{
  VLCPlayListInsert = 1, 
  VLCPlayListInsertAndGo = 9, 
  VLCPlayListReplace = 2, 
  VLCPlayListReplaceAndGo = 10, 
  VLCPlayListAppend = 4, 
  VLCPlayListAppendAndGo = 12, 
  VLCPlayListCheckInsert = 16
};

// *********************************************************************//
// Interface: IVLCAudio
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9E0BD17B-2D3C-4656-B94D-03084F3FD9D4}
// *********************************************************************//
interface IVLCAudio  : public IDispatch
{
public:
  // [-1] Returns/sets the audio mute state.
  virtual HRESULT STDMETHODCALLTYPE get_mute(VARIANT_BOOL* muted/*[out,retval]*/) = 0;
  // [1610743808] Returns/sets the audio mute state.
  virtual HRESULT STDMETHODCALLTYPE set_mute(VARIANT_BOOL muted/*[in]*/) = 0;
  // [-1] Returns/sets audio volume as a percent value.
  virtual HRESULT STDMETHODCALLTYPE get_volume(long* volume/*[out,retval]*/) = 0;
  // [1610743810] Returns/sets audio volume as a percent value.
  virtual HRESULT STDMETHODCALLTYPE set_volume(long volume/*[in]*/) = 0;
  // [-1] Mute/unmute audio playback.
  virtual HRESULT STDMETHODCALLTYPE toggleMute(void) = 0;
  // [-1] Returns/sets audio track used/to use.
  virtual HRESULT STDMETHODCALLTYPE get_track(long* track/*[out,retval]*/) = 0;
  // [1610743813] Returns/sets audio track used/to use.
  virtual HRESULT STDMETHODCALLTYPE set_track(long track/*[in]*/) = 0;
  // [-1] Returns the number of audio tracks available.
  virtual HRESULT STDMETHODCALLTYPE get_count(long* trackNumber/*[out,retval]*/) = 0;
  // [-1] Returns audio track name.
  virtual HRESULT STDMETHODCALLTYPE description(long trackID/*[in]*/, BSTR* name/*[out,retval]*/) = 0;
  // [-1] Returns audio channel [1-5] indicating; stereo, reverse stereo, left, right, dolby.
  virtual HRESULT STDMETHODCALLTYPE get_channel(long* channel/*[out,retval]*/) = 0;
  // [1610743817] Returns audio channel [1-5] indicating; stereo, reverse stereo, left, right, dolby.
  virtual HRESULT STDMETHODCALLTYPE set_channel(long channel/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_mute(void)
  {
    VARIANT_BOOL muted;
    OLECHECK(this->get_mute((VARIANT_BOOL*)&muted));
    return muted;
  }

  long __fastcall get_volume(void)
  {
    long volume;
    OLECHECK(this->get_volume((long*)&volume));
    return volume;
  }

  long __fastcall get_track(void)
  {
    long track;
    OLECHECK(this->get_track((long*)&track));
    return track;
  }

  long __fastcall get_count(void)
  {
    long trackNumber;
    OLECHECK(this->get_count((long*)&trackNumber));
    return trackNumber;
  }

  BSTR __fastcall description(long trackID/*[in]*/)
  {
    BSTR name = 0;
    OLECHECK(this->description(trackID, (BSTR*)&name));
    return name;
  }

  long __fastcall get_channel(void)
  {
    long channel;
    OLECHECK(this->get_channel((long*)&channel));
    return channel;
  }


  __property   VARIANT_BOOL    mute = {read = get_mute, write = set_mute};
  __property   long            volume = {read = get_volume, write = set_volume};
  __property   long            track = {read = get_track, write = set_track};
  __property   long            count = {read = get_count};
  __property   long            channel = {read = get_channel, write = set_channel};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVLCChapter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5AF314CF-8849-4A79-A3FC-8DE6625D9E72}
// *********************************************************************//
interface IVLCChapter  : public IDispatch
{
public:
  // [-1] Returns the number of chapter tracks available.
  virtual HRESULT STDMETHODCALLTYPE get_count(long* countTracks/*[out,retval]*/) = 0;
  // [-1] Returns the number of chapter tracks available of a specific title.
  virtual HRESULT STDMETHODCALLTYPE countForTitle(long title/*[in]*/, 
                                                  long* countTracks/*[out,retval]*/) = 0;
  // [-1] Returns/sets chapter track used/to use.
  virtual HRESULT STDMETHODCALLTYPE get_track(long* track/*[out,retval]*/) = 0;
  // [1610743810] Returns/sets chapter track used/to use.
  virtual HRESULT STDMETHODCALLTYPE set_track(long track/*[in]*/) = 0;
  // [-1] Returns the current chapter track name.
  virtual HRESULT STDMETHODCALLTYPE description(long title/*[in]*/, long chapter/*[in]*/, 
                                                BSTR* name/*[out,retval]*/) = 0;
  // [-1] Advance to next chapter in current title.
  virtual HRESULT STDMETHODCALLTYPE next(void) = 0;
  // [-1] Advance to previous chapter in current title.
  virtual HRESULT STDMETHODCALLTYPE prev(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_count(void)
  {
    long countTracks;
    OLECHECK(this->get_count((long*)&countTracks));
    return countTracks;
  }

  long __fastcall countForTitle(long title/*[in]*/)
  {
    long countTracks;
    OLECHECK(this->countForTitle(title, (long*)&countTracks));
    return countTracks;
  }

  long __fastcall get_track(void)
  {
    long track;
    OLECHECK(this->get_track((long*)&track));
    return track;
  }

  BSTR __fastcall description(long title/*[in]*/, long chapter/*[in]*/)
  {
    BSTR name = 0;
    OLECHECK(this->description(title, chapter, (BSTR*)&name));
    return name;
  }


  __property   long            count = {read = get_count};
  __property   long            track = {read = get_track, write = set_track};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVLCInput
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {49E0DBD1-9440-466C-9C97-95C67190C603}
// *********************************************************************//
interface IVLCInput  : public IDispatch
{
public:
  // [-1] Returns the clip length, in milliseconds.
  virtual HRESULT STDMETHODCALLTYPE get_length(double* length/*[out,retval]*/) = 0;
  // [-1] Returns/sets playback position in current clip.  Position is ranging from 0.0 to 1.0.
  virtual HRESULT STDMETHODCALLTYPE get_position(double* position/*[out,retval]*/) = 0;
  // [1610743809] Returns/sets playback position in current clip.  Position is ranging from 0.0 to 1.0.
  virtual HRESULT STDMETHODCALLTYPE set_position(double position/*[in]*/) = 0;
  // [-1] Returns/sets playback time in current clip, in milliseconds.
  virtual HRESULT STDMETHODCALLTYPE get_time(double* time/*[out,retval]*/) = 0;
  // [1610743811] Returns/sets playback time in current clip, in milliseconds.
  virtual HRESULT STDMETHODCALLTYPE set_time(double time/*[in]*/) = 0;
  // [-1] Returns current playback state.
  virtual HRESULT STDMETHODCALLTYPE get_state(long* state/*[out,retval]*/) = 0;
  // [-1] Returns/sets current playback rate, normal rate is 1.0 
  virtual HRESULT STDMETHODCALLTYPE get_rate(double* rate/*[out,retval]*/) = 0;
  // [1610743814] Returns/sets current playback rate, normal rate is 1.0 
  virtual HRESULT STDMETHODCALLTYPE set_rate(double rate/*[in]*/) = 0;
  // [-1] Returns current playback frames per seconds if available.
  virtual HRESULT STDMETHODCALLTYPE get_fps(double* fps/*[out,retval]*/) = 0;
  // [-1] Returns whether current playback displays video.
  virtual HRESULT STDMETHODCALLTYPE get_hasVout(VARIANT_BOOL* hasVout/*[out,retval]*/) = 0;
  // [-1] Returns the title object.
  virtual HRESULT STDMETHODCALLTYPE get_title(Axvlc_tlb::IVLCTitle** obj/*[out,retval]*/) = 0;
  // [-1] Returns the chapter object.
  virtual HRESULT STDMETHODCALLTYPE get_chapter(Axvlc_tlb::IVLCChapter** obj/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  double __fastcall get_length(void)
  {
    double length;
    OLECHECK(this->get_length((double*)&length));
    return length;
  }

  double __fastcall get_position(void)
  {
    double position;
    OLECHECK(this->get_position((double*)&position));
    return position;
  }

  double __fastcall get_time(void)
  {
    double time;
    OLECHECK(this->get_time((double*)&time));
    return time;
  }

  long __fastcall get_state(void)
  {
    long state;
    OLECHECK(this->get_state((long*)&state));
    return state;
  }

  double __fastcall get_rate(void)
  {
    double rate;
    OLECHECK(this->get_rate((double*)&rate));
    return rate;
  }

  double __fastcall get_fps(void)
  {
    double fps;
    OLECHECK(this->get_fps((double*)&fps));
    return fps;
  }

  VARIANT_BOOL __fastcall get_hasVout(void)
  {
    VARIANT_BOOL hasVout;
    OLECHECK(this->get_hasVout((VARIANT_BOOL*)&hasVout));
    return hasVout;
  }

  Axvlc_tlb::IVLCTitlePtr __fastcall get_title(void)
  {
    Axvlc_tlb::IVLCTitlePtr obj;
    OLECHECK(this->get_title(&obj));
    return obj;
  }

  Axvlc_tlb::IVLCChapterPtr __fastcall get_chapter(void)
  {
    Axvlc_tlb::IVLCChapterPtr obj;
    OLECHECK(this->get_chapter(&obj));
    return obj;
  }


  __property   double          length = {read = get_length};
  __property   double          position = {read = get_position, write = set_position};
  __property   double          time = {read = get_time, write = set_time};
  __property   long            state = {read = get_state};
  __property   double          rate = {read = get_rate, write = set_rate};
  __property   double          fps = {read = get_fps};
  __property   VARIANT_BOOL    hasVout = {read = get_hasVout};
  __property   Axvlc_tlb::IVLCTitlePtr title = {read = get_title};
  __property   Axvlc_tlb::IVLCChapterPtr chapter = {read = get_chapter};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVLCTitle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B5DEF5A1-FFB6-4E68-B3D8-A12AC60FDA54}
// *********************************************************************//
interface IVLCTitle  : public IDispatch
{
public:
  // [-1] Returns the number of title tracks available.
  virtual HRESULT STDMETHODCALLTYPE get_count(long* countTracks/*[out,retval]*/) = 0;
  // [-1] Returns/sets title track used/to use.
  virtual HRESULT STDMETHODCALLTYPE get_track(long* track/*[out,retval]*/) = 0;
  // [1610743809] Returns/sets title track used/to use.
  virtual HRESULT STDMETHODCALLTYPE set_track(long track/*[in]*/) = 0;
  // [-1] Returns the current title track name.
  virtual HRESULT STDMETHODCALLTYPE description(long track/*[in]*/, BSTR* name/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_count(void)
  {
    long countTracks;
    OLECHECK(this->get_count((long*)&countTracks));
    return countTracks;
  }

  long __fastcall get_track(void)
  {
    long track;
    OLECHECK(this->get_track((long*)&track));
    return track;
  }

  BSTR __fastcall description(long track/*[in]*/)
  {
    BSTR name = 0;
    OLECHECK(this->description(track, (BSTR*)&name));
    return name;
  }


  __property   long            count = {read = get_count};
  __property   long            track = {read = get_track, write = set_track};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVLCLogo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A4A20C2-93F3-44E8-8644-BEB2E3487E84}
// *********************************************************************//
interface IVLCLogo  : public IDispatch
{
public:
  // [-1] Enable the logo filter.
  virtual HRESULT STDMETHODCALLTYPE enable(void) = 0;
  // [-1] Disable the logo filter.
  virtual HRESULT STDMETHODCALLTYPE disable(void) = 0;
  // [-1] specify input file[[,delay],alpha].
  virtual HRESULT STDMETHODCALLTYPE file(BSTR fname/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_delay(long* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_delay(long val/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE get_repeat(long* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_repeat(long val/*[in]*/) = 0; // [1610743813]
  // [-1] Returns the `global' alpha value.
  virtual HRESULT STDMETHODCALLTYPE get_opacity(long* val/*[out,retval]*/) = 0;
  // [1610743815] Returns the `global' alpha value.
  virtual HRESULT STDMETHODCALLTYPE set_opacity(long val/*[in]*/) = 0;
  // [-1] Retrieve picture position.
  virtual HRESULT STDMETHODCALLTYPE get_position(BSTR* val/*[out,retval]*/) = 0;
  // [1610743817] Retrieve picture position.
  virtual HRESULT STDMETHODCALLTYPE set_position(BSTR val/*[in]*/) = 0;
  // [-1] Picture x offset.
  virtual HRESULT STDMETHODCALLTYPE get_x(long* val/*[out,retval]*/) = 0;
  // [1610743819] Picture x offset.
  virtual HRESULT STDMETHODCALLTYPE set_x(long val/*[in]*/) = 0;
  // [-1] Picture y offset.
  virtual HRESULT STDMETHODCALLTYPE get_y(long* val/*[out,retval]*/) = 0;
  // [1610743821] Picture y offset.
  virtual HRESULT STDMETHODCALLTYPE set_y(long val/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_delay(void)
  {
    long val;
    OLECHECK(this->get_delay((long*)&val));
    return val;
  }

  long __fastcall get_repeat(void)
  {
    long val;
    OLECHECK(this->get_repeat((long*)&val));
    return val;
  }

  long __fastcall get_opacity(void)
  {
    long val;
    OLECHECK(this->get_opacity((long*)&val));
    return val;
  }

  BSTR __fastcall get_position(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_position((BSTR*)&val));
    return val;
  }

  long __fastcall get_x(void)
  {
    long val;
    OLECHECK(this->get_x((long*)&val));
    return val;
  }

  long __fastcall get_y(void)
  {
    long val;
    OLECHECK(this->get_y((long*)&val));
    return val;
  }


  __property   long            delay = {read = get_delay, write = set_delay};
  __property   long            repeat = {read = get_repeat, write = set_repeat};
  __property   long            opacity = {read = get_opacity, write = set_opacity};
  __property   BSTR            position = {read = get_position, write = set_position};
  __property   long            x = {read = get_x, write = set_x};
  __property   long            y = {read = get_y, write = set_y};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVLCDeinterlace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BC97469F-CB11-4037-8DCE-5FC9F5F85307}
// *********************************************************************//
interface IVLCDeinterlace  : public IDispatch
{
public:
  // [-1] Enable deinterlace filter and set method.
  virtual HRESULT STDMETHODCALLTYPE enable(BSTR mode/*[in]*/) = 0;
  // [-1] Disable deinterlace filter.
  virtual HRESULT STDMETHODCALLTYPE disable(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVLCMarquee
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8D076AD6-9B6F-4150-A0FD-5D7E8C8CB02C}
// *********************************************************************//
interface IVLCMarquee  : public IDispatch
{
public:
  // [-1] enable Marquee Filter.
  virtual HRESULT STDMETHODCALLTYPE enable(void) = 0;
  // [-1] disable Marquee Filter.
  virtual HRESULT STDMETHODCALLTYPE disable(void) = 0;
  // [-1] Retrieve marquee text.
  virtual HRESULT STDMETHODCALLTYPE get_text(BSTR* val/*[out,retval]*/) = 0;
  // [1610743810] Retrieve marquee text.
  virtual HRESULT STDMETHODCALLTYPE set_text(BSTR val/*[in]*/) = 0;
  // [-1] Retrieve text color.
  virtual HRESULT STDMETHODCALLTYPE get_color(long* val/*[out,retval]*/) = 0;
  // [1610743812] Retrieve text color.
  virtual HRESULT STDMETHODCALLTYPE set_color(long val/*[in]*/) = 0;
  // [-1] Retrieve text opacity.
  virtual HRESULT STDMETHODCALLTYPE get_opacity(long* val/*[out,retval]*/) = 0;
  // [1610743814] Retrieve text opacity.
  virtual HRESULT STDMETHODCALLTYPE set_opacity(long val/*[in]*/) = 0;
  // [-1] Retrieve text position.
  virtual HRESULT STDMETHODCALLTYPE get_position(BSTR* val/*[out,retval]*/) = 0;
  // [1610743816] Retrieve text position.
  virtual HRESULT STDMETHODCALLTYPE set_position(BSTR val/*[in]*/) = 0;
  // [-1] Retrieve text refresh time.
  virtual HRESULT STDMETHODCALLTYPE get_refresh(long* val/*[out,retval]*/) = 0;
  // [1610743818] Retrieve text refresh time.
  virtual HRESULT STDMETHODCALLTYPE set_refresh(long val/*[in]*/) = 0;
  // [-1] Retrieve text size.
  virtual HRESULT STDMETHODCALLTYPE get_size(long* val/*[out,retval]*/) = 0;
  // [1610743820] Retrieve text size.
  virtual HRESULT STDMETHODCALLTYPE set_size(long val/*[in]*/) = 0;
  // [-1] Retrieve timeout.
  virtual HRESULT STDMETHODCALLTYPE get_timeout(long* val/*[out,retval]*/) = 0;
  // [1610743822] Retrieve timeout.
  virtual HRESULT STDMETHODCALLTYPE set_timeout(long val/*[in]*/) = 0;
  // [-1] Retrieve text abcissa.
  virtual HRESULT STDMETHODCALLTYPE get_x(long* val/*[out,retval]*/) = 0;
  // [1610743824] Retrieve text abcissa.
  virtual HRESULT STDMETHODCALLTYPE set_x(long val/*[in]*/) = 0;
  // [-1] Retrieve text ordinate.
  virtual HRESULT STDMETHODCALLTYPE get_y(long* val/*[out,retval]*/) = 0;
  // [1610743826] Retrieve text ordinate.
  virtual HRESULT STDMETHODCALLTYPE set_y(long val/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_text(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_text((BSTR*)&val));
    return val;
  }

  long __fastcall get_color(void)
  {
    long val;
    OLECHECK(this->get_color((long*)&val));
    return val;
  }

  long __fastcall get_opacity(void)
  {
    long val;
    OLECHECK(this->get_opacity((long*)&val));
    return val;
  }

  BSTR __fastcall get_position(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_position((BSTR*)&val));
    return val;
  }

  long __fastcall get_refresh(void)
  {
    long val;
    OLECHECK(this->get_refresh((long*)&val));
    return val;
  }

  long __fastcall get_size(void)
  {
    long val;
    OLECHECK(this->get_size((long*)&val));
    return val;
  }

  long __fastcall get_timeout(void)
  {
    long val;
    OLECHECK(this->get_timeout((long*)&val));
    return val;
  }

  long __fastcall get_x(void)
  {
    long val;
    OLECHECK(this->get_x((long*)&val));
    return val;
  }

  long __fastcall get_y(void)
  {
    long val;
    OLECHECK(this->get_y((long*)&val));
    return val;
  }


  __property   BSTR            text = {read = get_text, write = set_text};
  __property   long            color = {read = get_color, write = set_color};
  __property   long            opacity = {read = get_opacity, write = set_opacity};
  __property   BSTR            position = {read = get_position, write = set_position};
  __property   long            refresh = {read = get_refresh, write = set_refresh};
  __property   long            size = {read = get_size, write = set_size};
  __property   long            timeout = {read = get_timeout, write = set_timeout};
  __property   long            x = {read = get_x, write = set_x};
  __property   long            y = {read = get_y, write = set_y};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVLCPlaylist
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {54613049-40BF-4035-9E70-0A9312C0188D}
// *********************************************************************//
interface IVLCPlaylist  : public IDispatch
{
public:
  // [-1] Returns number of items in playlist. (deprecated)
  virtual HRESULT STDMETHODCALLTYPE get_itemCount(long* count/*[out,retval]*/) = 0;
  // [-1] Returns whether playback displays video.
  virtual HRESULT STDMETHODCALLTYPE get_isPlaying(VARIANT_BOOL* playing/*[out,retval]*/) = 0;
  // [-1] Returns index of current item in playlist.
  virtual HRESULT STDMETHODCALLTYPE get_currentItem(long* index/*[out,retval]*/) = 0;
  // [-1] Add a playlist item.
  virtual HRESULT STDMETHODCALLTYPE add(BSTR uri/*[in]*/, VARIANT name/*[in,opt]*/, 
                                        VARIANT options/*[in,opt]*/, long* itemId/*[out,retval]*/) = 0;
  // [-1] Play/Resume the playlist.
  virtual HRESULT STDMETHODCALLTYPE play(void) = 0;
  // [-1] Play item in playlist.
  virtual HRESULT STDMETHODCALLTYPE playItem(long itemId/*[in]*/) = 0;
  // [-1] Pause the playlist.
  virtual HRESULT STDMETHODCALLTYPE pause(void) = 0;
  // [-1] Play/Pause current clip.
  virtual HRESULT STDMETHODCALLTYPE togglePause(void) = 0;
  // [-1] Stop current clip.
  virtual HRESULT STDMETHODCALLTYPE stop(void) = 0;
  // [-1] Advance to next item in playlist.
  virtual HRESULT STDMETHODCALLTYPE next(void) = 0;
  // [-1] Advance to previous item in playlist.
  virtual HRESULT STDMETHODCALLTYPE prev(void) = 0;
  // [-1] Remove all items from playlist. (deprecated)
  virtual HRESULT STDMETHODCALLTYPE clear(void) = 0;
  // [-1] Remove item from playlist. (deprecated)
  virtual HRESULT STDMETHODCALLTYPE removeItem(long item/*[in]*/) = 0;
  // [-1] Returns the playlist items collection object.
  virtual HRESULT STDMETHODCALLTYPE get_items(Axvlc_tlb::IVLCPlaylistItems** obj/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_itemCount(void)
  {
    long count;
    OLECHECK(this->get_itemCount((long*)&count));
    return count;
  }

  VARIANT_BOOL __fastcall get_isPlaying(void)
  {
    VARIANT_BOOL playing;
    OLECHECK(this->get_isPlaying((VARIANT_BOOL*)&playing));
    return playing;
  }

  long __fastcall get_currentItem(void)
  {
    long index;
    OLECHECK(this->get_currentItem((long*)&index));
    return index;
  }

  long __fastcall add(BSTR uri/*[in]*/, VARIANT name/*[in,opt]*/= TNoParam(), 
                      VARIANT options/*[in,opt]*/= TNoParam())
  {
    long itemId;
    OLECHECK(this->add(uri, name, options, (long*)&itemId));
    return itemId;
  }

  Axvlc_tlb::IVLCPlaylistItemsPtr __fastcall get_items(void)
  {
    Axvlc_tlb::IVLCPlaylistItemsPtr obj;
    OLECHECK(this->get_items(&obj));
    return obj;
  }


  __property   long            itemCount = {read = get_itemCount};
  __property   VARIANT_BOOL    isPlaying = {read = get_isPlaying};
  __property   long            currentItem = {read = get_currentItem};
  __property   Axvlc_tlb::IVLCPlaylistItemsPtr items = {read = get_items};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVLCPlaylistItems
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FD37FE32-82BC-4A25-B056-315F4DBB194D}
// *********************************************************************//
interface IVLCPlaylistItems  : public IDispatch
{
public:
  // [-1] Returns number of items in playlist.
  virtual HRESULT STDMETHODCALLTYPE get_count(long* count/*[out,retval]*/) = 0;
  // [-1] Remove all items from playlist.
  virtual HRESULT STDMETHODCALLTYPE clear(void) = 0;
  // [-1] remove item from playlist.
  virtual HRESULT STDMETHODCALLTYPE remove(long itemId/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_count(void)
  {
    long count;
    OLECHECK(this->get_count((long*)&count));
    return count;
  }


  __property   long            count = {read = get_count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVLCSubtitle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {465E787A-0556-452F-9477-954E4A940003}
// *********************************************************************//
interface IVLCSubtitle  : public IDispatch
{
public:
  // [-1] Returns video subtitle used.
  virtual HRESULT STDMETHODCALLTYPE get_track(long* spu/*[out,retval]*/) = 0;
  // [1610743808] Returns video subtitle used.
  virtual HRESULT STDMETHODCALLTYPE set_track(long spu/*[in]*/) = 0;
  // [-1] Returns the number of video subtitles available.
  virtual HRESULT STDMETHODCALLTYPE get_count(long* spuNumber/*[out,retval]*/) = 0;
  // [-1] Returns video subtitle name.
  virtual HRESULT STDMETHODCALLTYPE description(long nameID/*[in]*/, BSTR* name/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_track(void)
  {
    long spu;
    OLECHECK(this->get_track((long*)&spu));
    return spu;
  }

  long __fastcall get_count(void)
  {
    long spuNumber;
    OLECHECK(this->get_count((long*)&spuNumber));
    return spuNumber;
  }

  BSTR __fastcall description(long nameID/*[in]*/)
  {
    BSTR name = 0;
    OLECHECK(this->description(nameID, (BSTR*)&name));
    return name;
  }


  __property   long            track = {read = get_track, write = set_track};
  __property   long            count = {read = get_count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVLCVideo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0AAEDF0B-D333-4B27-A0C6-BBF31413A42E}
// *********************************************************************//
interface IVLCVideo  : public IDispatch
{
public:
  // [-1] Returns/sets the fullscreen state.
  virtual HRESULT STDMETHODCALLTYPE get_fullscreen(VARIANT_BOOL* fullscreen/*[out,retval]*/) = 0;
  // [1610743808] Returns/sets the fullscreen state.
  virtual HRESULT STDMETHODCALLTYPE set_fullscreen(VARIANT_BOOL fullscreen/*[in]*/) = 0;
  // [-1] Returns video original width.
  virtual HRESULT STDMETHODCALLTYPE get_width(long* width/*[out,retval]*/) = 0;
  // [-1] Returns video original height.
  virtual HRESULT STDMETHODCALLTYPE get_height(long* height/*[out,retval]*/) = 0;
  // [-1] Returns video aspect ratio.
  virtual HRESULT STDMETHODCALLTYPE get_aspectRatio(BSTR* aspect/*[out,retval]*/) = 0;
  // [1610743812] Returns video aspect ratio.
  virtual HRESULT STDMETHODCALLTYPE set_aspectRatio(BSTR aspect/*[in]*/) = 0;
  // [-1] Returns video subtitle used.
  virtual HRESULT STDMETHODCALLTYPE get_subtitle(long* spu/*[out,retval]*/) = 0;
  // [1610743814] Returns video subtitle used.
  virtual HRESULT STDMETHODCALLTYPE set_subtitle(long spu/*[in]*/) = 0;
  // [-1] Returns crop filter geometry.
  virtual HRESULT STDMETHODCALLTYPE get_crop(BSTR* geometry/*[out,retval]*/) = 0;
  // [1610743816] Returns crop filter geometry.
  virtual HRESULT STDMETHODCALLTYPE set_crop(BSTR geometry/*[in]*/) = 0;
  // [-1] Returns teletext page used.
  virtual HRESULT STDMETHODCALLTYPE get_teletext(long* page/*[out,retval]*/) = 0;
  // [1610743818] Returns teletext page used.
  virtual HRESULT STDMETHODCALLTYPE set_teletext(long page/*[in]*/) = 0;
  // [-1] toggle fullscreen/windowed state.
  virtual HRESULT STDMETHODCALLTYPE toggleFullscreen(void) = 0;
  // [-1] take video snapshot and save it into picture object.
  virtual HRESULT STDMETHODCALLTYPE takeSnapshot(Axvlc_tlb::IPictureDisp** picture/*[out,retval]*/) = 0;
  // [-1] toggle teletext transparent state.
  virtual HRESULT STDMETHODCALLTYPE toggleTeletext(void) = 0;
  // [-1] Returns the marquee object.
  virtual HRESULT STDMETHODCALLTYPE get_marquee(Axvlc_tlb::IVLCMarquee** obj/*[out,retval]*/) = 0;
  // [-1] Returns the logo object.
  virtual HRESULT STDMETHODCALLTYPE get_logo(Axvlc_tlb::IVLCLogo** obj/*[out,retval]*/) = 0;
  // [-1] Returns the logo object.
  virtual HRESULT STDMETHODCALLTYPE get_deinterlace(Axvlc_tlb::IVLCDeinterlace** obj/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_fullscreen(void)
  {
    VARIANT_BOOL fullscreen;
    OLECHECK(this->get_fullscreen((VARIANT_BOOL*)&fullscreen));
    return fullscreen;
  }

  long __fastcall get_width(void)
  {
    long width;
    OLECHECK(this->get_width((long*)&width));
    return width;
  }

  long __fastcall get_height(void)
  {
    long height;
    OLECHECK(this->get_height((long*)&height));
    return height;
  }

  BSTR __fastcall get_aspectRatio(void)
  {
    BSTR aspect = 0;
    OLECHECK(this->get_aspectRatio((BSTR*)&aspect));
    return aspect;
  }

  long __fastcall get_subtitle(void)
  {
    long spu;
    OLECHECK(this->get_subtitle((long*)&spu));
    return spu;
  }

  BSTR __fastcall get_crop(void)
  {
    BSTR geometry = 0;
    OLECHECK(this->get_crop((BSTR*)&geometry));
    return geometry;
  }

  long __fastcall get_teletext(void)
  {
    long page;
    OLECHECK(this->get_teletext((long*)&page));
    return page;
  }

  Axvlc_tlb::IPictureDisp* __fastcall takeSnapshot(void)
  {
    Axvlc_tlb::IPictureDisp* picture = 0;
    OLECHECK(this->takeSnapshot((Axvlc_tlb::IPictureDisp**)&picture));
    return picture;
  }

  Axvlc_tlb::IVLCMarqueePtr __fastcall get_marquee(void)
  {
    Axvlc_tlb::IVLCMarqueePtr obj;
    OLECHECK(this->get_marquee(&obj));
    return obj;
  }

  Axvlc_tlb::IVLCLogoPtr __fastcall get_logo(void)
  {
    Axvlc_tlb::IVLCLogoPtr obj;
    OLECHECK(this->get_logo(&obj));
    return obj;
  }

  Axvlc_tlb::IVLCDeinterlacePtr __fastcall get_deinterlace(void)
  {
    Axvlc_tlb::IVLCDeinterlacePtr obj;
    OLECHECK(this->get_deinterlace(&obj));
    return obj;
  }


  __property   VARIANT_BOOL    fullscreen = {read = get_fullscreen, write = set_fullscreen};
  __property   long            width = {read = get_width};
  __property   long            height = {read = get_height};
  __property   BSTR            aspectRatio = {read = get_aspectRatio, write = set_aspectRatio};
  __property   long            subtitle = {read = get_subtitle, write = set_subtitle};
  __property   BSTR            crop = {read = get_crop, write = set_crop};
  __property   long            teletext = {read = get_teletext, write = set_teletext};
  __property   Axvlc_tlb::IVLCMarqueePtr marquee = {read = get_marquee};
  __property   Axvlc_tlb::IVLCLogoPtr logo = {read = get_logo};
  __property   Axvlc_tlb::IVLCDeinterlacePtr deinterlace = {read = get_deinterlace};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPictureDisp
// Flags:     (4096) Dispatchable
// GUID:      {7BF80981-BF32-101A-8BBB-00AA00300CAB}
// *********************************************************************//
interface IPictureDisp  : public IDispatch
{
public:
};

// *********************************************************************//
// Interface: IVLCControl2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D719729-5333-406C-BF12-8DE787FD65E3}
// *********************************************************************//
interface IVLCControl2  : public IDispatch
{
public:
  // [-1] Returns/sets a value that determines whether the playlist is looped
  virtual HRESULT STDMETHODCALLTYPE get_AutoLoop(VARIANT_BOOL* AutoLoop/*[out,retval]*/) = 0;
  // [1610743808] Returns/sets a value that determines whether the playlist is looped
  virtual HRESULT STDMETHODCALLTYPE set_AutoLoop(VARIANT_BOOL AutoLoop/*[in]*/) = 0;
  // [-1] Returns/sets a value that determines whether the playlist is played on startup
  virtual HRESULT STDMETHODCALLTYPE get_AutoPlay(VARIANT_BOOL* AutoPlay/*[out,retval]*/) = 0;
  // [1610743810] Returns/sets a value that determines whether the playlist is played on startup
  virtual HRESULT STDMETHODCALLTYPE set_AutoPlay(VARIANT_BOOL AutoPlay/*[in]*/) = 0;
  // [-1] Returns/sets the base URL for relative paths
  virtual HRESULT STDMETHODCALLTYPE get_BaseURL(BSTR* url/*[out,retval]*/) = 0;
  // [1610743812] Returns/sets the base URL for relative paths
  virtual HRESULT STDMETHODCALLTYPE set_BaseURL(BSTR url/*[in]*/) = 0;
  // [-1] Returns/sets playback start time of URL.
  virtual HRESULT STDMETHODCALLTYPE get_StartTime(long* seconds/*[out,retval]*/) = 0;
  // [1610743814] Returns/sets playback start time of URL.
  virtual HRESULT STDMETHODCALLTYPE set_StartTime(long seconds/*[in]*/) = 0;
  // [-1] Returns/sets the default MRL in playlist
  virtual HRESULT STDMETHODCALLTYPE get_MRL(BSTR* MRL/*[out,retval]*/) = 0;
  // [1610743816] Returns/sets the default MRL in playlist
  virtual HRESULT STDMETHODCALLTYPE set_MRL(BSTR MRL/*[in]*/) = 0;
  // [-1] Returns the VLC version
  virtual HRESULT STDMETHODCALLTYPE get_VersionInfo(BSTR* version/*[out,retval]*/) = 0;
  // [-1] Returns the VLC version
  virtual HRESULT STDMETHODCALLTYPE getVersionInfo(BSTR* version/*[out,retval]*/) = 0;
  // [-1] Returns/sets a value that determines whether viewing area is visible or hidden.
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/) = 0;
  // [1610743820] Returns/sets a value that determines whether viewing area is visible or hidden.
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Visible/*[in]*/) = 0;
  // [-1] Returns/sets default audio volume.
  virtual HRESULT STDMETHODCALLTYPE get_volume(long* volume/*[out,retval]*/) = 0;
  // [1610743822] Returns/sets default audio volume.
  virtual HRESULT STDMETHODCALLTYPE set_volume(long volume/*[in]*/) = 0;
  // [-1] Returns/sets background color.
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(unsigned_long* BackColor/*[out,retval]*/) = 0;
  // [1610743824] Returns/sets background color.
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(unsigned_long BackColor/*[in]*/) = 0;
  // [-1] Returns/sets visibility of the toolbar
  virtual HRESULT STDMETHODCALLTYPE get_Toolbar(VARIANT_BOOL* Visible/*[out,retval]*/) = 0;
  // [1610743826] Returns/sets visibility of the toolbar
  virtual HRESULT STDMETHODCALLTYPE set_Toolbar(VARIANT_BOOL Visible/*[in]*/) = 0;
  // [-1] Returns the audio object.
  virtual HRESULT STDMETHODCALLTYPE get_audio(Axvlc_tlb::IVLCAudio** obj/*[out,retval]*/) = 0;
  // [-1] Returns the input object.
  virtual HRESULT STDMETHODCALLTYPE get_input(Axvlc_tlb::IVLCInput** obj/*[out,retval]*/) = 0;
  // [-1] Returns the playlist object.
  virtual HRESULT STDMETHODCALLTYPE get_playlist(Axvlc_tlb::IVLCPlaylist** obj/*[out,retval]*/) = 0;
  // [-1] Returns the subtitle object.
  virtual HRESULT STDMETHODCALLTYPE get_subtitle(Axvlc_tlb::IVLCSubtitle** obj/*[out,retval]*/) = 0;
  // [-1] Returns the video object.
  virtual HRESULT STDMETHODCALLTYPE get_video(Axvlc_tlb::IVLCVideo** obj/*[out,retval]*/) = 0;
  // [-1] Returns/sets availability of fullscreen mode.
  virtual HRESULT STDMETHODCALLTYPE get_FullscreenEnabled(VARIANT_BOOL* enabled/*[out,retval]*/) = 0;
  // [1610743833] Returns/sets availability of fullscreen mode.
  virtual HRESULT STDMETHODCALLTYPE set_FullscreenEnabled(VARIANT_BOOL enabled/*[in]*/) = 0;
  // [-1] Returns the media description object.
  virtual HRESULT STDMETHODCALLTYPE get_mediaDescription(Axvlc_tlb::IVLCMediaDescription** obj/*[out,retval]*/) = 0;
  // [-1] Returns/sets visibility of the VLC branding.
  virtual HRESULT STDMETHODCALLTYPE get_Branding(VARIANT_BOOL* Visible/*[out,retval]*/) = 0;
  // [1610743836] Returns/sets visibility of the VLC branding.
  virtual HRESULT STDMETHODCALLTYPE set_Branding(VARIANT_BOOL Visible/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_AutoLoop(void)
  {
    VARIANT_BOOL AutoLoop;
    OLECHECK(this->get_AutoLoop((VARIANT_BOOL*)&AutoLoop));
    return AutoLoop;
  }

  VARIANT_BOOL __fastcall get_AutoPlay(void)
  {
    VARIANT_BOOL AutoPlay;
    OLECHECK(this->get_AutoPlay((VARIANT_BOOL*)&AutoPlay));
    return AutoPlay;
  }

  BSTR __fastcall get_BaseURL(void)
  {
    BSTR url = 0;
    OLECHECK(this->get_BaseURL((BSTR*)&url));
    return url;
  }

  long __fastcall get_StartTime(void)
  {
    long seconds;
    OLECHECK(this->get_StartTime((long*)&seconds));
    return seconds;
  }

  BSTR __fastcall get_MRL(void)
  {
    BSTR MRL = 0;
    OLECHECK(this->get_MRL((BSTR*)&MRL));
    return MRL;
  }

  BSTR __fastcall get_VersionInfo(void)
  {
    BSTR version = 0;
    OLECHECK(this->get_VersionInfo((BSTR*)&version));
    return version;
  }

  BSTR __fastcall getVersionInfo(void)
  {
    BSTR version = 0;
    OLECHECK(this->getVersionInfo((BSTR*)&version));
    return version;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Visible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Visible));
    return Visible;
  }

  long __fastcall get_volume(void)
  {
    long volume;
    OLECHECK(this->get_volume((long*)&volume));
    return volume;
  }

  unsigned_long __fastcall get_BackColor(void)
  {
    unsigned_long BackColor;
    OLECHECK(this->get_BackColor((unsigned_long*)&BackColor));
    return BackColor;
  }

  VARIANT_BOOL __fastcall get_Toolbar(void)
  {
    VARIANT_BOOL Visible;
    OLECHECK(this->get_Toolbar((VARIANT_BOOL*)&Visible));
    return Visible;
  }

  Axvlc_tlb::IVLCAudioPtr __fastcall get_audio(void)
  {
    Axvlc_tlb::IVLCAudioPtr obj;
    OLECHECK(this->get_audio(&obj));
    return obj;
  }

  Axvlc_tlb::IVLCInputPtr __fastcall get_input(void)
  {
    Axvlc_tlb::IVLCInputPtr obj;
    OLECHECK(this->get_input(&obj));
    return obj;
  }

  Axvlc_tlb::IVLCPlaylistPtr __fastcall get_playlist(void)
  {
    Axvlc_tlb::IVLCPlaylistPtr obj;
    OLECHECK(this->get_playlist(&obj));
    return obj;
  }

  Axvlc_tlb::IVLCSubtitlePtr __fastcall get_subtitle(void)
  {
    Axvlc_tlb::IVLCSubtitlePtr obj;
    OLECHECK(this->get_subtitle(&obj));
    return obj;
  }

  Axvlc_tlb::IVLCVideoPtr __fastcall get_video(void)
  {
    Axvlc_tlb::IVLCVideoPtr obj;
    OLECHECK(this->get_video(&obj));
    return obj;
  }

  VARIANT_BOOL __fastcall get_FullscreenEnabled(void)
  {
    VARIANT_BOOL enabled;
    OLECHECK(this->get_FullscreenEnabled((VARIANT_BOOL*)&enabled));
    return enabled;
  }

  Axvlc_tlb::IVLCMediaDescriptionPtr __fastcall get_mediaDescription(void)
  {
    Axvlc_tlb::IVLCMediaDescriptionPtr obj;
    OLECHECK(this->get_mediaDescription(&obj));
    return obj;
  }

  VARIANT_BOOL __fastcall get_Branding(void)
  {
    VARIANT_BOOL Visible;
    OLECHECK(this->get_Branding((VARIANT_BOOL*)&Visible));
    return Visible;
  }


  __property   VARIANT_BOOL    AutoLoop = {read = get_AutoLoop, write = set_AutoLoop};
  __property   VARIANT_BOOL    AutoPlay = {read = get_AutoPlay, write = set_AutoPlay};
  __property   BSTR            BaseURL = {read = get_BaseURL, write = set_BaseURL};
  __property   long            StartTime = {read = get_StartTime, write = set_StartTime};
  __property   BSTR            MRL = {read = get_MRL, write = set_MRL};
  __property   BSTR            VersionInfo = {read = get_VersionInfo};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   long            volume = {read = get_volume, write = set_volume};
  __property   unsigned_long   BackColor = {read = get_BackColor, write = set_BackColor};
  __property   VARIANT_BOOL    Toolbar = {read = get_Toolbar, write = set_Toolbar};
  __property   Axvlc_tlb::IVLCAudioPtr audio = {read = get_audio};
  __property   Axvlc_tlb::IVLCInputPtr input = {read = get_input};
  __property   Axvlc_tlb::IVLCPlaylistPtr playlist = {read = get_playlist};
  __property   Axvlc_tlb::IVLCSubtitlePtr subtitle = {read = get_subtitle};
  __property   Axvlc_tlb::IVLCVideoPtr video = {read = get_video};
  __property   VARIANT_BOOL    FullscreenEnabled = {read = get_FullscreenEnabled, write = set_FullscreenEnabled};
  __property   Axvlc_tlb::IVLCMediaDescriptionPtr mediaDescription = {read = get_mediaDescription};
  __property   VARIANT_BOOL    Branding = {read = get_Branding, write = set_Branding};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVLCMediaDescription
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {796A2C2D-5B11-4FB5-9077-56D5E674972B}
// *********************************************************************//
interface IVLCMediaDescription  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_title(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_artist(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_genre(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_copyright(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_album(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_trackNumber(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_description(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_rating(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_date(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_setting(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_url(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_language(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_nowPlaying(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_publisher(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_encodedBy(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_artworkURL(BSTR* val/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_trackID(BSTR* val/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_title(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_title((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_artist(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_artist((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_genre(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_genre((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_copyright(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_copyright((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_album(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_album((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_trackNumber(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_trackNumber((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_description(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_description((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_rating(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_rating((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_date(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_date((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_setting(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_setting((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_url(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_url((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_language(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_language((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_nowPlaying(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_nowPlaying((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_publisher(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_publisher((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_encodedBy(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_encodedBy((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_artworkURL(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_artworkURL((BSTR*)&val));
    return val;
  }

  BSTR __fastcall get_trackID(void)
  {
    BSTR val = 0;
    OLECHECK(this->get_trackID((BSTR*)&val));
    return val;
  }


  __property   BSTR            title = {read = get_title};
  __property   BSTR            artist = {read = get_artist};
  __property   BSTR            genre = {read = get_genre};
  __property   BSTR            copyright = {read = get_copyright};
  __property   BSTR            album = {read = get_album};
  __property   BSTR            trackNumber = {read = get_trackNumber};
  __property   BSTR            description = {read = get_description};
  __property   BSTR            rating = {read = get_rating};
  __property   BSTR            date = {read = get_date};
  __property   BSTR            setting = {read = get_setting};
  __property   BSTR            url = {read = get_url};
  __property   BSTR            language = {read = get_language};
  __property   BSTR            nowPlaying = {read = get_nowPlaying};
  __property   BSTR            publisher = {read = get_publisher};
  __property   BSTR            encodedBy = {read = get_encodedBy};
  __property   BSTR            artworkURL = {read = get_artworkURL};
  __property   BSTR            trackID = {read = get_trackID};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DVLCEvents
// Flags:     (4096) Dispatchable
// GUID:      {DF48072F-5EF8-434E-9B40-E2F3AE759B5F}
// *********************************************************************//
interface DVLCEvents : public TDispWrapper<IDispatch>
{
  void __fastcall MediaPlayerNothingSpecial()
  {
    _TDispID _dispid(/* MediaPlayerNothingSpecial */ DISPID(200));
    OleProcedure(_dispid);
  }

  void __fastcall MediaPlayerOpening()
  {
    _TDispID _dispid(/* MediaPlayerOpening */ DISPID(201));
    OleProcedure(_dispid);
  }

  void __fastcall MediaPlayerBuffering(long cache/*[in]*/)
  {
    _TDispID _dispid(/* MediaPlayerBuffering */ DISPID(202));
    TAutoArgs<1> _args;
    _args[1] = cache /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaPlayerPlaying()
  {
    _TDispID _dispid(/* MediaPlayerPlaying */ DISPID(203));
    OleProcedure(_dispid);
  }

  void __fastcall MediaPlayerPaused()
  {
    _TDispID _dispid(/* MediaPlayerPaused */ DISPID(204));
    OleProcedure(_dispid);
  }

  void __fastcall MediaPlayerForward()
  {
    _TDispID _dispid(/* MediaPlayerForward */ DISPID(205));
    OleProcedure(_dispid);
  }

  void __fastcall MediaPlayerBackward()
  {
    _TDispID _dispid(/* MediaPlayerBackward */ DISPID(206));
    OleProcedure(_dispid);
  }

  void __fastcall MediaPlayerEncounteredError()
  {
    _TDispID _dispid(/* MediaPlayerEncounteredError */ DISPID(207));
    OleProcedure(_dispid);
  }

  void __fastcall MediaPlayerEndReached()
  {
    _TDispID _dispid(/* MediaPlayerEndReached */ DISPID(208));
    OleProcedure(_dispid);
  }

  void __fastcall MediaPlayerStopped()
  {
    _TDispID _dispid(/* MediaPlayerStopped */ DISPID(209));
    OleProcedure(_dispid);
  }

  void __fastcall MediaPlayerTimeChanged(long time/*[in]*/)
  {
    _TDispID _dispid(/* MediaPlayerTimeChanged */ DISPID(210));
    TAutoArgs<1> _args;
    _args[1] = time /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaPlayerPositionChanged(float position/*[in]*/)
  {
    _TDispID _dispid(/* MediaPlayerPositionChanged */ DISPID(211));
    TAutoArgs<1> _args;
    _args[1] = position /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaPlayerSeekableChanged(VARIANT_BOOL seekable/*[in]*/)
  {
    _TDispID _dispid(/* MediaPlayerSeekableChanged */ DISPID(212));
    TAutoArgs<1> _args;
    _args[1] = seekable /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaPlayerPausableChanged(VARIANT_BOOL pausable/*[in]*/)
  {
    _TDispID _dispid(/* MediaPlayerPausableChanged */ DISPID(213));
    TAutoArgs<1> _args;
    _args[1] = pausable /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaPlayerMediaChanged()
  {
    _TDispID _dispid(/* MediaPlayerMediaChanged */ DISPID(214));
    OleProcedure(_dispid);
  }

  void __fastcall MediaPlayerTitleChanged(int title/*[in]*/)
  {
    _TDispID _dispid(/* MediaPlayerTitleChanged */ DISPID(215));
    TAutoArgs<1> _args;
    _args[1] = title /*[VT_INT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MediaPlayerLengthChanged(long length/*[in]*/)
  {
    _TDispID _dispid(/* MediaPlayerLengthChanged */ DISPID(216));
    TAutoArgs<1> _args;
    _args[1] = length /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IVLCAudio>  TCOMIVLCAudio;

// *********************************************************************//
// DispIntf:  IVLCAudio
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9E0BD17B-2D3C-4656-B94D-03084F3FD9D4}
// *********************************************************************//
template<class T>
class IVLCAudioDispT : public TAutoDriver<IVLCAudio>
{
public:
  IVLCAudioDispT(){}

  IVLCAudioDispT(IVLCAudio *pintf)
  {
    TAutoDriver<IVLCAudio>::Bind(pintf, false);
  }

  IVLCAudioDispT(IVLCAudioPtr pintf)
  {
    TAutoDriver<IVLCAudio>::Bind(pintf, true);
  }

  IVLCAudioDispT& operator=(IVLCAudio *pintf)
  {
    TAutoDriver<IVLCAudio>::Bind(pintf, false);
    return *this;
  }

  IVLCAudioDispT& operator=(IVLCAudioPtr pintf)
  {
    TAutoDriver<IVLCAudio>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_mute(VARIANT_BOOL* muted/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_mute(void);
  HRESULT         __fastcall set_mute(VARIANT_BOOL muted/*[in]*/);
  HRESULT         __fastcall get_volume(long* volume/*[out,retval]*/);
  long            __fastcall get_volume(void);
  HRESULT         __fastcall set_volume(long volume/*[in]*/);
  HRESULT         __fastcall toggleMute();
  HRESULT         __fastcall get_track(long* track/*[out,retval]*/);
  long            __fastcall get_track(void);
  HRESULT         __fastcall set_track(long track/*[in]*/);
  HRESULT         __fastcall get_count(long* trackNumber/*[out,retval]*/);
  long            __fastcall get_count(void);
  HRESULT         __fastcall description(long trackID/*[in]*/, BSTR* name/*[out,retval]*/);
  BSTR            __fastcall description(long trackID/*[in]*/);
  HRESULT         __fastcall get_channel(long* channel/*[out,retval]*/);
  long            __fastcall get_channel(void);
  HRESULT         __fastcall set_channel(long channel/*[in]*/);

  __property   VARIANT_BOOL    mute = {read = get_mute, write = set_mute};
  __property   long            volume = {read = get_volume, write = set_volume};
  __property   long            track = {read = get_track, write = set_track};
  __property   long            count = {read = get_count};
  __property   long            channel = {read = get_channel, write = set_channel};
};
typedef IVLCAudioDispT<IVLCAudio> IVLCAudioDisp;

typedef TComInterface<IVLCChapter>  TCOMIVLCChapter;

// *********************************************************************//
// DispIntf:  IVLCChapter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5AF314CF-8849-4A79-A3FC-8DE6625D9E72}
// *********************************************************************//
template<class T>
class IVLCChapterDispT : public TAutoDriver<IVLCChapter>
{
public:
  IVLCChapterDispT(){}

  IVLCChapterDispT(IVLCChapter *pintf)
  {
    TAutoDriver<IVLCChapter>::Bind(pintf, false);
  }

  IVLCChapterDispT(IVLCChapterPtr pintf)
  {
    TAutoDriver<IVLCChapter>::Bind(pintf, true);
  }

  IVLCChapterDispT& operator=(IVLCChapter *pintf)
  {
    TAutoDriver<IVLCChapter>::Bind(pintf, false);
    return *this;
  }

  IVLCChapterDispT& operator=(IVLCChapterPtr pintf)
  {
    TAutoDriver<IVLCChapter>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_count(long* countTracks/*[out,retval]*/);
  long            __fastcall get_count(void);
  HRESULT         __fastcall countForTitle(long title/*[in]*/, long* countTracks/*[out,retval]*/);
  long            __fastcall countForTitle(long title/*[in]*/);
  HRESULT         __fastcall get_track(long* track/*[out,retval]*/);
  long            __fastcall get_track(void);
  HRESULT         __fastcall set_track(long track/*[in]*/);
  HRESULT         __fastcall description(long title/*[in]*/, long chapter/*[in]*/, 
                                         BSTR* name/*[out,retval]*/);
  BSTR            __fastcall description(long title/*[in]*/, long chapter/*[in]*/);
  HRESULT         __fastcall next();
  HRESULT         __fastcall prev();

  __property   long            count = {read = get_count};
  __property   long            track = {read = get_track, write = set_track};
};
typedef IVLCChapterDispT<IVLCChapter> IVLCChapterDisp;

typedef TComInterface<IVLCInput>  TCOMIVLCInput;

// *********************************************************************//
// DispIntf:  IVLCInput
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {49E0DBD1-9440-466C-9C97-95C67190C603}
// *********************************************************************//
template<class T>
class IVLCInputDispT : public TAutoDriver<IVLCInput>
{
public:
  IVLCInputDispT(){}

  IVLCInputDispT(IVLCInput *pintf)
  {
    TAutoDriver<IVLCInput>::Bind(pintf, false);
  }

  IVLCInputDispT(IVLCInputPtr pintf)
  {
    TAutoDriver<IVLCInput>::Bind(pintf, true);
  }

  IVLCInputDispT& operator=(IVLCInput *pintf)
  {
    TAutoDriver<IVLCInput>::Bind(pintf, false);
    return *this;
  }

  IVLCInputDispT& operator=(IVLCInputPtr pintf)
  {
    TAutoDriver<IVLCInput>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_length(double* length/*[out,retval]*/);
  double          __fastcall get_length(void);
  HRESULT         __fastcall get_position(double* position/*[out,retval]*/);
  double          __fastcall get_position(void);
  HRESULT         __fastcall set_position(double position/*[in]*/);
  HRESULT         __fastcall get_time(double* time/*[out,retval]*/);
  double          __fastcall get_time(void);
  HRESULT         __fastcall set_time(double time/*[in]*/);
  HRESULT         __fastcall get_state(long* state/*[out,retval]*/);
  long            __fastcall get_state(void);
  HRESULT         __fastcall get_rate(double* rate/*[out,retval]*/);
  double          __fastcall get_rate(void);
  HRESULT         __fastcall set_rate(double rate/*[in]*/);
  HRESULT         __fastcall get_fps(double* fps/*[out,retval]*/);
  double          __fastcall get_fps(void);
  HRESULT         __fastcall get_hasVout(VARIANT_BOOL* hasVout/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_hasVout(void);
  HRESULT         __fastcall get_title(Axvlc_tlb::IVLCTitle** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCTitlePtr __fastcall get_title(void);
  HRESULT         __fastcall get_chapter(Axvlc_tlb::IVLCChapter** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCChapterPtr __fastcall get_chapter(void);

  __property   double          length = {read = get_length};
  __property   double          position = {read = get_position, write = set_position};
  __property   double          time = {read = get_time, write = set_time};
  __property   long            state = {read = get_state};
  __property   double          rate = {read = get_rate, write = set_rate};
  __property   double          fps = {read = get_fps};
  __property   VARIANT_BOOL    hasVout = {read = get_hasVout};
  __property   Axvlc_tlb::IVLCTitlePtr title = {read = get_title};
  __property   Axvlc_tlb::IVLCChapterPtr chapter = {read = get_chapter};
};
typedef IVLCInputDispT<IVLCInput> IVLCInputDisp;

typedef TComInterface<IVLCTitle>  TCOMIVLCTitle;

// *********************************************************************//
// DispIntf:  IVLCTitle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B5DEF5A1-FFB6-4E68-B3D8-A12AC60FDA54}
// *********************************************************************//
template<class T>
class IVLCTitleDispT : public TAutoDriver<IVLCTitle>
{
public:
  IVLCTitleDispT(){}

  IVLCTitleDispT(IVLCTitle *pintf)
  {
    TAutoDriver<IVLCTitle>::Bind(pintf, false);
  }

  IVLCTitleDispT(IVLCTitlePtr pintf)
  {
    TAutoDriver<IVLCTitle>::Bind(pintf, true);
  }

  IVLCTitleDispT& operator=(IVLCTitle *pintf)
  {
    TAutoDriver<IVLCTitle>::Bind(pintf, false);
    return *this;
  }

  IVLCTitleDispT& operator=(IVLCTitlePtr pintf)
  {
    TAutoDriver<IVLCTitle>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_count(long* countTracks/*[out,retval]*/);
  long            __fastcall get_count(void);
  HRESULT         __fastcall get_track(long* track/*[out,retval]*/);
  long            __fastcall get_track(void);
  HRESULT         __fastcall set_track(long track/*[in]*/);
  HRESULT         __fastcall description(long track/*[in]*/, BSTR* name/*[out,retval]*/);
  BSTR            __fastcall description(long track/*[in]*/);

  __property   long            count = {read = get_count};
  __property   long            track = {read = get_track, write = set_track};
};
typedef IVLCTitleDispT<IVLCTitle> IVLCTitleDisp;

typedef TComInterface<IVLCLogo>  TCOMIVLCLogo;

// *********************************************************************//
// DispIntf:  IVLCLogo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A4A20C2-93F3-44E8-8644-BEB2E3487E84}
// *********************************************************************//
template<class T>
class IVLCLogoDispT : public TAutoDriver<IVLCLogo>
{
public:
  IVLCLogoDispT(){}

  IVLCLogoDispT(IVLCLogo *pintf)
  {
    TAutoDriver<IVLCLogo>::Bind(pintf, false);
  }

  IVLCLogoDispT(IVLCLogoPtr pintf)
  {
    TAutoDriver<IVLCLogo>::Bind(pintf, true);
  }

  IVLCLogoDispT& operator=(IVLCLogo *pintf)
  {
    TAutoDriver<IVLCLogo>::Bind(pintf, false);
    return *this;
  }

  IVLCLogoDispT& operator=(IVLCLogoPtr pintf)
  {
    TAutoDriver<IVLCLogo>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall enable();
  HRESULT         __fastcall disable();
  HRESULT         __fastcall file(BSTR fname/*[in]*/);
  HRESULT         __fastcall get_delay(long* val/*[out,retval]*/);
  long            __fastcall get_delay(void);
  HRESULT         __fastcall set_delay(long val/*[in]*/);
  HRESULT         __fastcall get_repeat(long* val/*[out,retval]*/);
  long            __fastcall get_repeat(void);
  HRESULT         __fastcall set_repeat(long val/*[in]*/);
  HRESULT         __fastcall get_opacity(long* val/*[out,retval]*/);
  long            __fastcall get_opacity(void);
  HRESULT         __fastcall set_opacity(long val/*[in]*/);
  HRESULT         __fastcall get_position(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_position(void);
  HRESULT         __fastcall set_position(BSTR val/*[in]*/);
  HRESULT         __fastcall get_x(long* val/*[out,retval]*/);
  long            __fastcall get_x(void);
  HRESULT         __fastcall set_x(long val/*[in]*/);
  HRESULT         __fastcall get_y(long* val/*[out,retval]*/);
  long            __fastcall get_y(void);
  HRESULT         __fastcall set_y(long val/*[in]*/);

  __property   long            delay = {read = get_delay, write = set_delay};
  __property   long            repeat = {read = get_repeat, write = set_repeat};
  __property   long            opacity = {read = get_opacity, write = set_opacity};
  __property   BSTR            position = {read = get_position, write = set_position};
  __property   long            x = {read = get_x, write = set_x};
  __property   long            y = {read = get_y, write = set_y};
};
typedef IVLCLogoDispT<IVLCLogo> IVLCLogoDisp;

typedef TComInterface<IVLCDeinterlace>  TCOMIVLCDeinterlace;

// *********************************************************************//
// DispIntf:  IVLCDeinterlace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BC97469F-CB11-4037-8DCE-5FC9F5F85307}
// *********************************************************************//
template<class T>
class IVLCDeinterlaceDispT : public TAutoDriver<IVLCDeinterlace>
{
public:
  IVLCDeinterlaceDispT(){}

  IVLCDeinterlaceDispT(IVLCDeinterlace *pintf)
  {
    TAutoDriver<IVLCDeinterlace>::Bind(pintf, false);
  }

  IVLCDeinterlaceDispT(IVLCDeinterlacePtr pintf)
  {
    TAutoDriver<IVLCDeinterlace>::Bind(pintf, true);
  }

  IVLCDeinterlaceDispT& operator=(IVLCDeinterlace *pintf)
  {
    TAutoDriver<IVLCDeinterlace>::Bind(pintf, false);
    return *this;
  }

  IVLCDeinterlaceDispT& operator=(IVLCDeinterlacePtr pintf)
  {
    TAutoDriver<IVLCDeinterlace>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall enable(BSTR mode/*[in]*/);
  HRESULT         __fastcall disable();

};
typedef IVLCDeinterlaceDispT<IVLCDeinterlace> IVLCDeinterlaceDisp;

typedef TComInterface<IVLCMarquee>  TCOMIVLCMarquee;

// *********************************************************************//
// DispIntf:  IVLCMarquee
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8D076AD6-9B6F-4150-A0FD-5D7E8C8CB02C}
// *********************************************************************//
template<class T>
class IVLCMarqueeDispT : public TAutoDriver<IVLCMarquee>
{
public:
  IVLCMarqueeDispT(){}

  IVLCMarqueeDispT(IVLCMarquee *pintf)
  {
    TAutoDriver<IVLCMarquee>::Bind(pintf, false);
  }

  IVLCMarqueeDispT(IVLCMarqueePtr pintf)
  {
    TAutoDriver<IVLCMarquee>::Bind(pintf, true);
  }

  IVLCMarqueeDispT& operator=(IVLCMarquee *pintf)
  {
    TAutoDriver<IVLCMarquee>::Bind(pintf, false);
    return *this;
  }

  IVLCMarqueeDispT& operator=(IVLCMarqueePtr pintf)
  {
    TAutoDriver<IVLCMarquee>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall enable();
  HRESULT         __fastcall disable();
  HRESULT         __fastcall get_text(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR val/*[in]*/);
  HRESULT         __fastcall get_color(long* val/*[out,retval]*/);
  long            __fastcall get_color(void);
  HRESULT         __fastcall set_color(long val/*[in]*/);
  HRESULT         __fastcall get_opacity(long* val/*[out,retval]*/);
  long            __fastcall get_opacity(void);
  HRESULT         __fastcall set_opacity(long val/*[in]*/);
  HRESULT         __fastcall get_position(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_position(void);
  HRESULT         __fastcall set_position(BSTR val/*[in]*/);
  HRESULT         __fastcall get_refresh(long* val/*[out,retval]*/);
  long            __fastcall get_refresh(void);
  HRESULT         __fastcall set_refresh(long val/*[in]*/);
  HRESULT         __fastcall get_size(long* val/*[out,retval]*/);
  long            __fastcall get_size(void);
  HRESULT         __fastcall set_size(long val/*[in]*/);
  HRESULT         __fastcall get_timeout(long* val/*[out,retval]*/);
  long            __fastcall get_timeout(void);
  HRESULT         __fastcall set_timeout(long val/*[in]*/);
  HRESULT         __fastcall get_x(long* val/*[out,retval]*/);
  long            __fastcall get_x(void);
  HRESULT         __fastcall set_x(long val/*[in]*/);
  HRESULT         __fastcall get_y(long* val/*[out,retval]*/);
  long            __fastcall get_y(void);
  HRESULT         __fastcall set_y(long val/*[in]*/);

  __property   BSTR            text = {read = get_text, write = set_text};
  __property   long            color = {read = get_color, write = set_color};
  __property   long            opacity = {read = get_opacity, write = set_opacity};
  __property   BSTR            position = {read = get_position, write = set_position};
  __property   long            refresh = {read = get_refresh, write = set_refresh};
  __property   long            size = {read = get_size, write = set_size};
  __property   long            timeout = {read = get_timeout, write = set_timeout};
  __property   long            x = {read = get_x, write = set_x};
  __property   long            y = {read = get_y, write = set_y};
};
typedef IVLCMarqueeDispT<IVLCMarquee> IVLCMarqueeDisp;

typedef TComInterface<IVLCPlaylist>  TCOMIVLCPlaylist;

// *********************************************************************//
// DispIntf:  IVLCPlaylist
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {54613049-40BF-4035-9E70-0A9312C0188D}
// *********************************************************************//
template<class T>
class IVLCPlaylistDispT : public TAutoDriver<IVLCPlaylist>
{
public:
  IVLCPlaylistDispT(){}

  IVLCPlaylistDispT(IVLCPlaylist *pintf)
  {
    TAutoDriver<IVLCPlaylist>::Bind(pintf, false);
  }

  IVLCPlaylistDispT(IVLCPlaylistPtr pintf)
  {
    TAutoDriver<IVLCPlaylist>::Bind(pintf, true);
  }

  IVLCPlaylistDispT& operator=(IVLCPlaylist *pintf)
  {
    TAutoDriver<IVLCPlaylist>::Bind(pintf, false);
    return *this;
  }

  IVLCPlaylistDispT& operator=(IVLCPlaylistPtr pintf)
  {
    TAutoDriver<IVLCPlaylist>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_itemCount(long* count/*[out,retval]*/);
  long            __fastcall get_itemCount(void);
  HRESULT         __fastcall get_isPlaying(VARIANT_BOOL* playing/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_isPlaying(void);
  HRESULT         __fastcall get_currentItem(long* index/*[out,retval]*/);
  long            __fastcall get_currentItem(void);
  HRESULT         __fastcall add(BSTR uri/*[in]*/, VARIANT name/*[in,opt]*/, 
                                 VARIANT options/*[in,opt]*/, long* itemId/*[out,retval]*/);
  long            __fastcall add(BSTR uri/*[in]*/, VARIANT name/*[in,opt]*/= TNoParam(), 
                                 VARIANT options/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall play();
  HRESULT         __fastcall playItem(long itemId/*[in]*/);
  HRESULT         __fastcall pause();
  HRESULT         __fastcall togglePause();
  HRESULT         __fastcall stop();
  HRESULT         __fastcall next();
  HRESULT         __fastcall prev();
  HRESULT         __fastcall clear();
  HRESULT         __fastcall removeItem(long item/*[in]*/);
  HRESULT         __fastcall get_items(Axvlc_tlb::IVLCPlaylistItems** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCPlaylistItemsPtr __fastcall get_items(void);

  __property   long            itemCount = {read = get_itemCount};
  __property   VARIANT_BOOL    isPlaying = {read = get_isPlaying};
  __property   long            currentItem = {read = get_currentItem};
  __property   Axvlc_tlb::IVLCPlaylistItemsPtr items = {read = get_items};
};
typedef IVLCPlaylistDispT<IVLCPlaylist> IVLCPlaylistDisp;

typedef TComInterface<IVLCPlaylistItems>  TCOMIVLCPlaylistItems;

// *********************************************************************//
// DispIntf:  IVLCPlaylistItems
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FD37FE32-82BC-4A25-B056-315F4DBB194D}
// *********************************************************************//
template<class T>
class IVLCPlaylistItemsDispT : public TAutoDriver<IVLCPlaylistItems>
{
public:
  IVLCPlaylistItemsDispT(){}

  IVLCPlaylistItemsDispT(IVLCPlaylistItems *pintf)
  {
    TAutoDriver<IVLCPlaylistItems>::Bind(pintf, false);
  }

  IVLCPlaylistItemsDispT(IVLCPlaylistItemsPtr pintf)
  {
    TAutoDriver<IVLCPlaylistItems>::Bind(pintf, true);
  }

  IVLCPlaylistItemsDispT& operator=(IVLCPlaylistItems *pintf)
  {
    TAutoDriver<IVLCPlaylistItems>::Bind(pintf, false);
    return *this;
  }

  IVLCPlaylistItemsDispT& operator=(IVLCPlaylistItemsPtr pintf)
  {
    TAutoDriver<IVLCPlaylistItems>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_count(long* count/*[out,retval]*/);
  long            __fastcall get_count(void);
  HRESULT         __fastcall clear();
  HRESULT         __fastcall remove(long itemId/*[in]*/);

  __property   long            count = {read = get_count};
};
typedef IVLCPlaylistItemsDispT<IVLCPlaylistItems> IVLCPlaylistItemsDisp;

typedef TComInterface<IVLCSubtitle>  TCOMIVLCSubtitle;

// *********************************************************************//
// DispIntf:  IVLCSubtitle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {465E787A-0556-452F-9477-954E4A940003}
// *********************************************************************//
template<class T>
class IVLCSubtitleDispT : public TAutoDriver<IVLCSubtitle>
{
public:
  IVLCSubtitleDispT(){}

  IVLCSubtitleDispT(IVLCSubtitle *pintf)
  {
    TAutoDriver<IVLCSubtitle>::Bind(pintf, false);
  }

  IVLCSubtitleDispT(IVLCSubtitlePtr pintf)
  {
    TAutoDriver<IVLCSubtitle>::Bind(pintf, true);
  }

  IVLCSubtitleDispT& operator=(IVLCSubtitle *pintf)
  {
    TAutoDriver<IVLCSubtitle>::Bind(pintf, false);
    return *this;
  }

  IVLCSubtitleDispT& operator=(IVLCSubtitlePtr pintf)
  {
    TAutoDriver<IVLCSubtitle>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_track(long* spu/*[out,retval]*/);
  long            __fastcall get_track(void);
  HRESULT         __fastcall set_track(long spu/*[in]*/);
  HRESULT         __fastcall get_count(long* spuNumber/*[out,retval]*/);
  long            __fastcall get_count(void);
  HRESULT         __fastcall description(long nameID/*[in]*/, BSTR* name/*[out,retval]*/);
  BSTR            __fastcall description(long nameID/*[in]*/);

  __property   long            track = {read = get_track, write = set_track};
  __property   long            count = {read = get_count};
};
typedef IVLCSubtitleDispT<IVLCSubtitle> IVLCSubtitleDisp;

typedef TComInterface<IVLCVideo>  TCOMIVLCVideo;

// *********************************************************************//
// DispIntf:  IVLCVideo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0AAEDF0B-D333-4B27-A0C6-BBF31413A42E}
// *********************************************************************//
template<class T>
class IVLCVideoDispT : public TAutoDriver<IVLCVideo>
{
public:
  IVLCVideoDispT(){}

  IVLCVideoDispT(IVLCVideo *pintf)
  {
    TAutoDriver<IVLCVideo>::Bind(pintf, false);
  }

  IVLCVideoDispT(IVLCVideoPtr pintf)
  {
    TAutoDriver<IVLCVideo>::Bind(pintf, true);
  }

  IVLCVideoDispT& operator=(IVLCVideo *pintf)
  {
    TAutoDriver<IVLCVideo>::Bind(pintf, false);
    return *this;
  }

  IVLCVideoDispT& operator=(IVLCVideoPtr pintf)
  {
    TAutoDriver<IVLCVideo>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_fullscreen(VARIANT_BOOL* fullscreen/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_fullscreen(void);
  HRESULT         __fastcall set_fullscreen(VARIANT_BOOL fullscreen/*[in]*/);
  HRESULT         __fastcall get_width(long* width/*[out,retval]*/);
  long            __fastcall get_width(void);
  HRESULT         __fastcall get_height(long* height/*[out,retval]*/);
  long            __fastcall get_height(void);
  HRESULT         __fastcall get_aspectRatio(BSTR* aspect/*[out,retval]*/);
  BSTR            __fastcall get_aspectRatio(void);
  HRESULT         __fastcall set_aspectRatio(BSTR aspect/*[in]*/);
  HRESULT         __fastcall get_subtitle(long* spu/*[out,retval]*/);
  long            __fastcall get_subtitle(void);
  HRESULT         __fastcall set_subtitle(long spu/*[in]*/);
  HRESULT         __fastcall get_crop(BSTR* geometry/*[out,retval]*/);
  BSTR            __fastcall get_crop(void);
  HRESULT         __fastcall set_crop(BSTR geometry/*[in]*/);
  HRESULT         __fastcall get_teletext(long* page/*[out,retval]*/);
  long            __fastcall get_teletext(void);
  HRESULT         __fastcall set_teletext(long page/*[in]*/);
  HRESULT         __fastcall toggleFullscreen();
  HRESULT         __fastcall takeSnapshot(Axvlc_tlb::IPictureDisp** picture/*[out,retval]*/);
  Axvlc_tlb::IPictureDisp* __fastcall takeSnapshot(void);
  HRESULT         __fastcall toggleTeletext();
  HRESULT         __fastcall get_marquee(Axvlc_tlb::IVLCMarquee** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCMarqueePtr __fastcall get_marquee(void);
  HRESULT         __fastcall get_logo(Axvlc_tlb::IVLCLogo** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCLogoPtr __fastcall get_logo(void);
  HRESULT         __fastcall get_deinterlace(Axvlc_tlb::IVLCDeinterlace** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCDeinterlacePtr __fastcall get_deinterlace(void);

  __property   VARIANT_BOOL    fullscreen = {read = get_fullscreen, write = set_fullscreen};
  __property   long            width = {read = get_width};
  __property   long            height = {read = get_height};
  __property   BSTR            aspectRatio = {read = get_aspectRatio, write = set_aspectRatio};
  __property   long            subtitle = {read = get_subtitle, write = set_subtitle};
  __property   BSTR            crop = {read = get_crop, write = set_crop};
  __property   long            teletext = {read = get_teletext, write = set_teletext};
  __property   Axvlc_tlb::IVLCMarqueePtr marquee = {read = get_marquee};
  __property   Axvlc_tlb::IVLCLogoPtr logo = {read = get_logo};
  __property   Axvlc_tlb::IVLCDeinterlacePtr deinterlace = {read = get_deinterlace};
};
typedef IVLCVideoDispT<IVLCVideo> IVLCVideoDisp;

// *********************************************************************//
// DispIntf:  IPictureDisp
// Flags:     (4096) Dispatchable
// GUID:      {7BF80981-BF32-101A-8BBB-00AA00300CAB}
// *********************************************************************//
template<class T>
class IPictureDispDispT : public TAutoDriver<IPictureDisp>
{
public:
  IPictureDispDispT(){}

  IPictureDispDispT(IPictureDisp *pintf)
  {
    TAutoDriver<IPictureDisp>::Bind(pintf, false);
  }

  IPictureDispDispT(IPictureDispPtr pintf)
  {
    TAutoDriver<IPictureDisp>::Bind(pintf, true);
  }

  IPictureDispDispT& operator=(IPictureDisp *pintf)
  {
    TAutoDriver<IPictureDisp>::Bind(pintf, false);
    return *this;
  }

  IPictureDispDispT& operator=(IPictureDispPtr pintf)
  {
    TAutoDriver<IPictureDisp>::Bind(pintf, true);
    return *this;
  }


};
typedef IPictureDispDispT<IPictureDisp> IPictureDispDisp;

// *********************************************************************//
// SmartIntf: TCOMIVLCControl2
// Interface: IVLCControl2
// *********************************************************************//
template <class T /* IVLCControl2 */ >
class TCOMIVLCControl2T : public TComInterface<IVLCControl2>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIVLCControl2T() {}
  TCOMIVLCControl2T(IVLCControl2 *intf, bool addRef = false) : TComInterface<IVLCControl2>(intf, addRef) {}
  TCOMIVLCControl2T(const TCOMIVLCControl2T& src) : TComInterface<IVLCControl2>(src) {}
  TCOMIVLCControl2T& operator=(const TCOMIVLCControl2T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_AutoLoop(VARIANT_BOOL* AutoLoop/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoLoop(void);
  HRESULT         __fastcall set_AutoLoop(VARIANT_BOOL AutoLoop/*[in]*/);
  HRESULT         __fastcall get_AutoPlay(VARIANT_BOOL* AutoPlay/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoPlay(void);
  HRESULT         __fastcall set_AutoPlay(VARIANT_BOOL AutoPlay/*[in]*/);
  HRESULT         __fastcall get_BaseURL(BSTR* url/*[out,retval]*/);
  BSTR            __fastcall get_BaseURL(void);
  HRESULT         __fastcall set_BaseURL(BSTR url/*[in]*/);
  HRESULT         __fastcall get_StartTime(long* seconds/*[out,retval]*/);
  long            __fastcall get_StartTime(void);
  HRESULT         __fastcall set_StartTime(long seconds/*[in]*/);
  HRESULT         __fastcall get_MRL(BSTR* MRL/*[out,retval]*/);
  BSTR            __fastcall get_MRL(void);
  HRESULT         __fastcall set_MRL(BSTR MRL/*[in]*/);
  HRESULT         __fastcall get_VersionInfo(BSTR* version/*[out,retval]*/);
  BSTR            __fastcall get_VersionInfo(void);
  HRESULT         __fastcall getVersionInfo(BSTR* version/*[out,retval]*/);
  BSTR            __fastcall getVersionInfo(void);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Visible/*[in]*/);
  HRESULT         __fastcall get_volume(long* volume/*[out,retval]*/);
  long            __fastcall get_volume(void);
  HRESULT         __fastcall set_volume(long volume/*[in]*/);
  HRESULT         __fastcall get_BackColor(unsigned_long* BackColor/*[out,retval]*/);
  unsigned_long   __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(unsigned_long BackColor/*[in]*/);
  HRESULT         __fastcall get_Toolbar(VARIANT_BOOL* Visible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Toolbar(void);
  HRESULT         __fastcall set_Toolbar(VARIANT_BOOL Visible/*[in]*/);
  HRESULT         __fastcall get_audio(Axvlc_tlb::IVLCAudio** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCAudioPtr __fastcall get_audio(void);
  HRESULT         __fastcall get_input(Axvlc_tlb::IVLCInput** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCInputPtr __fastcall get_input(void);
  HRESULT         __fastcall get_playlist(Axvlc_tlb::IVLCPlaylist** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCPlaylistPtr __fastcall get_playlist(void);
  HRESULT         __fastcall get_subtitle(Axvlc_tlb::IVLCSubtitle** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCSubtitlePtr __fastcall get_subtitle(void);
  HRESULT         __fastcall get_video(Axvlc_tlb::IVLCVideo** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCVideoPtr __fastcall get_video(void);
  HRESULT         __fastcall get_FullscreenEnabled(VARIANT_BOOL* enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullscreenEnabled(void);
  HRESULT         __fastcall set_FullscreenEnabled(VARIANT_BOOL enabled/*[in]*/);
  HRESULT         __fastcall get_mediaDescription(Axvlc_tlb::IVLCMediaDescription** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCMediaDescriptionPtr __fastcall get_mediaDescription(void);
  HRESULT         __fastcall get_Branding(VARIANT_BOOL* Visible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Branding(void);
  HRESULT         __fastcall set_Branding(VARIANT_BOOL Visible/*[in]*/);

  __property   VARIANT_BOOL    AutoLoop = {read = get_AutoLoop, write = set_AutoLoop};
  __property   VARIANT_BOOL    AutoPlay = {read = get_AutoPlay, write = set_AutoPlay};
  __property   BSTR            BaseURL = {read = get_BaseURL, write = set_BaseURL};
  __property   long            StartTime = {read = get_StartTime, write = set_StartTime};
  __property   BSTR            MRL = {read = get_MRL, write = set_MRL};
  __property   BSTR            VersionInfo = {read = get_VersionInfo};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   long            volume = {read = get_volume, write = set_volume};
  __property   unsigned_long   BackColor = {read = get_BackColor, write = set_BackColor};
  __property   VARIANT_BOOL    Toolbar = {read = get_Toolbar, write = set_Toolbar};
  __property   Axvlc_tlb::IVLCAudioPtr audio = {read = get_audio};
  __property   Axvlc_tlb::IVLCInputPtr input = {read = get_input};
  __property   Axvlc_tlb::IVLCPlaylistPtr playlist = {read = get_playlist};
  __property   Axvlc_tlb::IVLCSubtitlePtr subtitle = {read = get_subtitle};
  __property   Axvlc_tlb::IVLCVideoPtr video = {read = get_video};
  __property   VARIANT_BOOL    FullscreenEnabled = {read = get_FullscreenEnabled, write = set_FullscreenEnabled};
  __property   Axvlc_tlb::IVLCMediaDescriptionPtr mediaDescription = {read = get_mediaDescription};
  __property   VARIANT_BOOL    Branding = {read = get_Branding, write = set_Branding};
};
typedef TCOMIVLCControl2T<IVLCControl2> TCOMIVLCControl2;

// *********************************************************************//
// DispIntf:  IVLCControl2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D719729-5333-406C-BF12-8DE787FD65E3}
// *********************************************************************//
template<class T>
class IVLCControl2DispT : public TAutoDriver<IVLCControl2>
{
public:
  IVLCControl2DispT(){}

  IVLCControl2DispT(IVLCControl2 *pintf)
  {
    TAutoDriver<IVLCControl2>::Bind(pintf, false);
  }

  IVLCControl2DispT(IVLCControl2Ptr pintf)
  {
    TAutoDriver<IVLCControl2>::Bind(pintf, true);
  }

  IVLCControl2DispT& operator=(IVLCControl2 *pintf)
  {
    TAutoDriver<IVLCControl2>::Bind(pintf, false);
    return *this;
  }

  IVLCControl2DispT& operator=(IVLCControl2Ptr pintf)
  {
    TAutoDriver<IVLCControl2>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_VLCPlugin2));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_VLCPlugin2);
  }

  HRESULT         __fastcall get_AutoLoop(VARIANT_BOOL* AutoLoop/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoLoop(void);
  HRESULT         __fastcall set_AutoLoop(VARIANT_BOOL AutoLoop/*[in]*/);
  HRESULT         __fastcall get_AutoPlay(VARIANT_BOOL* AutoPlay/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoPlay(void);
  HRESULT         __fastcall set_AutoPlay(VARIANT_BOOL AutoPlay/*[in]*/);
  HRESULT         __fastcall get_BaseURL(BSTR* url/*[out,retval]*/);
  BSTR            __fastcall get_BaseURL(void);
  HRESULT         __fastcall set_BaseURL(BSTR url/*[in]*/);
  HRESULT         __fastcall get_StartTime(long* seconds/*[out,retval]*/);
  long            __fastcall get_StartTime(void);
  HRESULT         __fastcall set_StartTime(long seconds/*[in]*/);
  HRESULT         __fastcall get_MRL(BSTR* MRL/*[out,retval]*/);
  BSTR            __fastcall get_MRL(void);
  HRESULT         __fastcall set_MRL(BSTR MRL/*[in]*/);
  HRESULT         __fastcall get_VersionInfo(BSTR* version/*[out,retval]*/);
  BSTR            __fastcall get_VersionInfo(void);
  HRESULT         __fastcall getVersionInfo(BSTR* version/*[out,retval]*/);
  BSTR            __fastcall getVersionInfo(void);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Visible/*[in]*/);
  HRESULT         __fastcall get_volume(long* volume/*[out,retval]*/);
  long            __fastcall get_volume(void);
  HRESULT         __fastcall set_volume(long volume/*[in]*/);
  HRESULT         __fastcall get_BackColor(unsigned_long* BackColor/*[out,retval]*/);
  unsigned_long   __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(unsigned_long BackColor/*[in]*/);
  HRESULT         __fastcall get_Toolbar(VARIANT_BOOL* Visible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Toolbar(void);
  HRESULT         __fastcall set_Toolbar(VARIANT_BOOL Visible/*[in]*/);
  HRESULT         __fastcall get_audio(Axvlc_tlb::IVLCAudio** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCAudioPtr __fastcall get_audio(void);
  HRESULT         __fastcall get_input(Axvlc_tlb::IVLCInput** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCInputPtr __fastcall get_input(void);
  HRESULT         __fastcall get_playlist(Axvlc_tlb::IVLCPlaylist** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCPlaylistPtr __fastcall get_playlist(void);
  HRESULT         __fastcall get_subtitle(Axvlc_tlb::IVLCSubtitle** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCSubtitlePtr __fastcall get_subtitle(void);
  HRESULT         __fastcall get_video(Axvlc_tlb::IVLCVideo** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCVideoPtr __fastcall get_video(void);
  HRESULT         __fastcall get_FullscreenEnabled(VARIANT_BOOL* enabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullscreenEnabled(void);
  HRESULT         __fastcall set_FullscreenEnabled(VARIANT_BOOL enabled/*[in]*/);
  HRESULT         __fastcall get_mediaDescription(Axvlc_tlb::IVLCMediaDescription** obj/*[out,retval]*/);
  Axvlc_tlb::IVLCMediaDescriptionPtr __fastcall get_mediaDescription(void);
  HRESULT         __fastcall get_Branding(VARIANT_BOOL* Visible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Branding(void);
  HRESULT         __fastcall set_Branding(VARIANT_BOOL Visible/*[in]*/);

  __property   VARIANT_BOOL    AutoLoop = {read = get_AutoLoop, write = set_AutoLoop};
  __property   VARIANT_BOOL    AutoPlay = {read = get_AutoPlay, write = set_AutoPlay};
  __property   BSTR            BaseURL = {read = get_BaseURL, write = set_BaseURL};
  __property   long            StartTime = {read = get_StartTime, write = set_StartTime};
  __property   BSTR            MRL = {read = get_MRL, write = set_MRL};
  __property   BSTR            VersionInfo = {read = get_VersionInfo};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   long            volume = {read = get_volume, write = set_volume};
  __property   unsigned_long   BackColor = {read = get_BackColor, write = set_BackColor};
  __property   VARIANT_BOOL    Toolbar = {read = get_Toolbar, write = set_Toolbar};
  __property   Axvlc_tlb::IVLCAudioPtr audio = {read = get_audio};
  __property   Axvlc_tlb::IVLCInputPtr input = {read = get_input};
  __property   Axvlc_tlb::IVLCPlaylistPtr playlist = {read = get_playlist};
  __property   Axvlc_tlb::IVLCSubtitlePtr subtitle = {read = get_subtitle};
  __property   Axvlc_tlb::IVLCVideoPtr video = {read = get_video};
  __property   VARIANT_BOOL    FullscreenEnabled = {read = get_FullscreenEnabled, write = set_FullscreenEnabled};
  __property   Axvlc_tlb::IVLCMediaDescriptionPtr mediaDescription = {read = get_mediaDescription};
  __property   VARIANT_BOOL    Branding = {read = get_Branding, write = set_Branding};
};
typedef IVLCControl2DispT<IVLCControl2> IVLCControl2Disp;

typedef TComInterface<IVLCMediaDescription>  TCOMIVLCMediaDescription;

// *********************************************************************//
// DispIntf:  IVLCMediaDescription
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {796A2C2D-5B11-4FB5-9077-56D5E674972B}
// *********************************************************************//
template<class T>
class IVLCMediaDescriptionDispT : public TAutoDriver<IVLCMediaDescription>
{
public:
  IVLCMediaDescriptionDispT(){}

  IVLCMediaDescriptionDispT(IVLCMediaDescription *pintf)
  {
    TAutoDriver<IVLCMediaDescription>::Bind(pintf, false);
  }

  IVLCMediaDescriptionDispT(IVLCMediaDescriptionPtr pintf)
  {
    TAutoDriver<IVLCMediaDescription>::Bind(pintf, true);
  }

  IVLCMediaDescriptionDispT& operator=(IVLCMediaDescription *pintf)
  {
    TAutoDriver<IVLCMediaDescription>::Bind(pintf, false);
    return *this;
  }

  IVLCMediaDescriptionDispT& operator=(IVLCMediaDescriptionPtr pintf)
  {
    TAutoDriver<IVLCMediaDescription>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_title(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_title(void);
  HRESULT         __fastcall get_artist(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_artist(void);
  HRESULT         __fastcall get_genre(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_genre(void);
  HRESULT         __fastcall get_copyright(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_copyright(void);
  HRESULT         __fastcall get_album(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_album(void);
  HRESULT         __fastcall get_trackNumber(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_trackNumber(void);
  HRESULT         __fastcall get_description(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_description(void);
  HRESULT         __fastcall get_rating(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_rating(void);
  HRESULT         __fastcall get_date(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_date(void);
  HRESULT         __fastcall get_setting(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_setting(void);
  HRESULT         __fastcall get_url(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_url(void);
  HRESULT         __fastcall get_language(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_language(void);
  HRESULT         __fastcall get_nowPlaying(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_nowPlaying(void);
  HRESULT         __fastcall get_publisher(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_publisher(void);
  HRESULT         __fastcall get_encodedBy(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_encodedBy(void);
  HRESULT         __fastcall get_artworkURL(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_artworkURL(void);
  HRESULT         __fastcall get_trackID(BSTR* val/*[out,retval]*/);
  BSTR            __fastcall get_trackID(void);

  __property   BSTR            title = {read = get_title};
  __property   BSTR            artist = {read = get_artist};
  __property   BSTR            genre = {read = get_genre};
  __property   BSTR            copyright = {read = get_copyright};
  __property   BSTR            album = {read = get_album};
  __property   BSTR            trackNumber = {read = get_trackNumber};
  __property   BSTR            description = {read = get_description};
  __property   BSTR            rating = {read = get_rating};
  __property   BSTR            date = {read = get_date};
  __property   BSTR            setting = {read = get_setting};
  __property   BSTR            url = {read = get_url};
  __property   BSTR            language = {read = get_language};
  __property   BSTR            nowPlaying = {read = get_nowPlaying};
  __property   BSTR            publisher = {read = get_publisher};
  __property   BSTR            encodedBy = {read = get_encodedBy};
  __property   BSTR            artworkURL = {read = get_artworkURL};
  __property   BSTR            trackID = {read = get_trackID};
};
typedef IVLCMediaDescriptionDispT<IVLCMediaDescription> IVLCMediaDescriptionDisp;

// *********************************************************************//
// DispIntf:  DVLCEvents
// Flags:     (4096) Dispatchable
// GUID:      {DF48072F-5EF8-434E-9B40-E2F3AE759B5F}
// *********************************************************************//
template <class T>
class DVLCEventsDispT : public TAutoDriver<DVLCEvents>
{
public:
  DVLCEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall MediaPlayerNothingSpecial();
  void            __fastcall MediaPlayerOpening();
  void            __fastcall MediaPlayerBuffering(long cache/*[in]*/);
  void            __fastcall MediaPlayerPlaying();
  void            __fastcall MediaPlayerPaused();
  void            __fastcall MediaPlayerForward();
  void            __fastcall MediaPlayerBackward();
  void            __fastcall MediaPlayerEncounteredError();
  void            __fastcall MediaPlayerEndReached();
  void            __fastcall MediaPlayerStopped();
  void            __fastcall MediaPlayerTimeChanged(long time/*[in]*/);
  void            __fastcall MediaPlayerPositionChanged(float position/*[in]*/);
  void            __fastcall MediaPlayerSeekableChanged(VARIANT_BOOL seekable/*[in]*/);
  void            __fastcall MediaPlayerPausableChanged(VARIANT_BOOL pausable/*[in]*/);
  void            __fastcall MediaPlayerMediaChanged();
  void            __fastcall MediaPlayerTitleChanged(int title/*[in]*/);
  void            __fastcall MediaPlayerLengthChanged(long length/*[in]*/);

};
typedef DVLCEventsDispT<DVLCEvents> DVLCEventsDisp;

// *********************************************************************//
// DispIntf:  IVLCAudio
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9E0BD17B-2D3C-4656-B94D-03084F3FD9D4}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCAudioDispT<T>::get_mute(VARIANT_BOOL* muted/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mute"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(muted /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVLCAudioDispT<T>::get_mute(void)
{
  VARIANT_BOOL muted;
  this->get_mute((VARIANT_BOOL*)&muted);
  return muted;
}

template <class T> HRESULT __fastcall
IVLCAudioDispT<T>::set_mute(VARIANT_BOOL muted/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("mute"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = muted /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCAudioDispT<T>::get_volume(long* volume/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("volume"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(volume /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCAudioDispT<T>::get_volume(void)
{
  long volume;
  this->get_volume((long*)&volume);
  return volume;
}

template <class T> HRESULT __fastcall
IVLCAudioDispT<T>::set_volume(long volume/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("volume"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = volume /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCAudioDispT<T>::toggleMute()
{
  _TDispID _dispid(*this, OLETEXT("toggleMute"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCAudioDispT<T>::get_track(long* track/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("track"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(track /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCAudioDispT<T>::get_track(void)
{
  long track;
  this->get_track((long*)&track);
  return track;
}

template <class T> HRESULT __fastcall
IVLCAudioDispT<T>::set_track(long track/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("track"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = track /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCAudioDispT<T>::get_count(long* trackNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("count"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(trackNumber /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCAudioDispT<T>::get_count(void)
{
  long trackNumber;
  this->get_count((long*)&trackNumber);
  return trackNumber;
}

template <class T> HRESULT __fastcall
IVLCAudioDispT<T>::description(long trackID/*[in]*/, BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("description"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<1> _args;
  _args[1] = trackID /*[VT_I4:0]*/;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCAudioDispT<T>::description(long trackID/*[in]*/)
{
  BSTR name;
  this->description(trackID, (BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IVLCAudioDispT<T>::get_channel(long* channel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("channel"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(channel /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCAudioDispT<T>::get_channel(void)
{
  long channel;
  this->get_channel((long*)&channel);
  return channel;
}

template <class T> HRESULT __fastcall
IVLCAudioDispT<T>::set_channel(long channel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("channel"), DISPID(1610743817));
  TAutoArgs<1> _args;
  _args[1] = channel /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IVLCChapter
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {5AF314CF-8849-4A79-A3FC-8DE6625D9E72}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCChapterDispT<T>::get_count(long* countTracks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("count"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(countTracks /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCChapterDispT<T>::get_count(void)
{
  long countTracks;
  this->get_count((long*)&countTracks);
  return countTracks;
}

template <class T> HRESULT __fastcall
IVLCChapterDispT<T>::countForTitle(long title/*[in]*/, long* countTracks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("countForTitle"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<1> _args;
  _args[1] = title /*[VT_I4:0]*/;
  return OutRetValSetterPtr(countTracks /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IVLCChapterDispT<T>::countForTitle(long title/*[in]*/)
{
  long countTracks;
  this->countForTitle(title, (long*)&countTracks);
  return countTracks;
}

template <class T> HRESULT __fastcall
IVLCChapterDispT<T>::get_track(long* track/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("track"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(track /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCChapterDispT<T>::get_track(void)
{
  long track;
  this->get_track((long*)&track);
  return track;
}

template <class T> HRESULT __fastcall
IVLCChapterDispT<T>::set_track(long track/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("track"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = track /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCChapterDispT<T>::description(long title/*[in]*/, long chapter/*[in]*/, 
                                 BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("description"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<2> _args;
  _args[1] = title /*[VT_I4:0]*/;
  _args[2] = chapter /*[VT_I4:0]*/;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCChapterDispT<T>::description(long title/*[in]*/, long chapter/*[in]*/)
{
  BSTR name;
  this->description(title, chapter, (BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IVLCChapterDispT<T>::next()
{
  _TDispID _dispid(*this, OLETEXT("next"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCChapterDispT<T>::prev()
{
  _TDispID _dispid(*this, OLETEXT("prev"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IVLCInput
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {49E0DBD1-9440-466C-9C97-95C67190C603}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCInputDispT<T>::get_length(double* length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(length /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IVLCInputDispT<T>::get_length(void)
{
  double length;
  this->get_length((double*)&length);
  return length;
}

template <class T> HRESULT __fastcall
IVLCInputDispT<T>::get_position(double* position/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("position"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(position /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IVLCInputDispT<T>::get_position(void)
{
  double position;
  this->get_position((double*)&position);
  return position;
}

template <class T> HRESULT __fastcall
IVLCInputDispT<T>::set_position(double position/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("position"), DISPID(1610743809));
  TAutoArgs<1> _args;
  _args[1] = position /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCInputDispT<T>::get_time(double* time/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("time"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(time /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IVLCInputDispT<T>::get_time(void)
{
  double time;
  this->get_time((double*)&time);
  return time;
}

template <class T> HRESULT __fastcall
IVLCInputDispT<T>::set_time(double time/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("time"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = time /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCInputDispT<T>::get_state(long* state/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("state"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(state /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCInputDispT<T>::get_state(void)
{
  long state;
  this->get_state((long*)&state);
  return state;
}

template <class T> HRESULT __fastcall
IVLCInputDispT<T>::get_rate(double* rate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("rate"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(rate /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IVLCInputDispT<T>::get_rate(void)
{
  double rate;
  this->get_rate((double*)&rate);
  return rate;
}

template <class T> HRESULT __fastcall
IVLCInputDispT<T>::set_rate(double rate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("rate"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = rate /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCInputDispT<T>::get_fps(double* fps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fps"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fps /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IVLCInputDispT<T>::get_fps(void)
{
  double fps;
  this->get_fps((double*)&fps);
  return fps;
}

template <class T> HRESULT __fastcall
IVLCInputDispT<T>::get_hasVout(VARIANT_BOOL* hasVout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasVout"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasVout /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVLCInputDispT<T>::get_hasVout(void)
{
  VARIANT_BOOL hasVout;
  this->get_hasVout((VARIANT_BOOL*)&hasVout);
  return hasVout;
}

template <class T> HRESULT __fastcall
IVLCInputDispT<T>::get_title(Axvlc_tlb::IVLCTitle** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("title"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCTitle**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCTitlePtr __fastcall
IVLCInputDispT<T>::get_title(void)
{
  Axvlc_tlb::IVLCTitlePtr obj;
  this->get_title(&obj);
  return obj;
}

template <class T> HRESULT __fastcall
IVLCInputDispT<T>::get_chapter(Axvlc_tlb::IVLCChapter** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("chapter"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCChapter**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCChapterPtr __fastcall
IVLCInputDispT<T>::get_chapter(void)
{
  Axvlc_tlb::IVLCChapterPtr obj;
  this->get_chapter(&obj);
  return obj;
}

// *********************************************************************//
// DispIntf:  IVLCTitle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B5DEF5A1-FFB6-4E68-B3D8-A12AC60FDA54}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCTitleDispT<T>::get_count(long* countTracks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("count"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(countTracks /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCTitleDispT<T>::get_count(void)
{
  long countTracks;
  this->get_count((long*)&countTracks);
  return countTracks;
}

template <class T> HRESULT __fastcall
IVLCTitleDispT<T>::get_track(long* track/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("track"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(track /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCTitleDispT<T>::get_track(void)
{
  long track;
  this->get_track((long*)&track);
  return track;
}

template <class T> HRESULT __fastcall
IVLCTitleDispT<T>::set_track(long track/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("track"), DISPID(1610743809));
  TAutoArgs<1> _args;
  _args[1] = track /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCTitleDispT<T>::description(long track/*[in]*/, BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("description"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = track /*[VT_I4:0]*/;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCTitleDispT<T>::description(long track/*[in]*/)
{
  BSTR name;
  this->description(track, (BSTR*)&name);
  return name;
}

// *********************************************************************//
// DispIntf:  IVLCLogo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A4A20C2-93F3-44E8-8644-BEB2E3487E84}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::enable()
{
  _TDispID _dispid(*this, OLETEXT("enable"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::disable()
{
  _TDispID _dispid(*this, OLETEXT("disable"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::file(BSTR fname/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("file"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = fname /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::get_delay(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("delay"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCLogoDispT<T>::get_delay(void)
{
  long val;
  this->get_delay((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::set_delay(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("delay"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::get_repeat(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("repeat"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCLogoDispT<T>::get_repeat(void)
{
  long val;
  this->get_repeat((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::set_repeat(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("repeat"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::get_opacity(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("opacity"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCLogoDispT<T>::get_opacity(void)
{
  long val;
  this->get_opacity((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::set_opacity(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("opacity"), DISPID(1610743815));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::get_position(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("position"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCLogoDispT<T>::get_position(void)
{
  BSTR val;
  this->get_position((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::set_position(BSTR val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("position"), DISPID(1610743817));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::get_x(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("x"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCLogoDispT<T>::get_x(void)
{
  long val;
  this->get_x((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::set_x(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("x"), DISPID(1610743819));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::get_y(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("y"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCLogoDispT<T>::get_y(void)
{
  long val;
  this->get_y((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCLogoDispT<T>::set_y(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("y"), DISPID(1610743821));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IVLCDeinterlace
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {BC97469F-CB11-4037-8DCE-5FC9F5F85307}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCDeinterlaceDispT<T>::enable(BSTR mode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("enable"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<1> _args;
  _args[1] = mode /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCDeinterlaceDispT<T>::disable()
{
  _TDispID _dispid(*this, OLETEXT("disable"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IVLCMarquee
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8D076AD6-9B6F-4150-A0FD-5D7E8C8CB02C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::enable()
{
  _TDispID _dispid(*this, OLETEXT("enable"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::disable()
{
  _TDispID _dispid(*this, OLETEXT("disable"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::get_text(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMarqueeDispT<T>::get_text(void)
{
  BSTR val;
  this->get_text((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::set_text(BSTR val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::get_color(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("color"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCMarqueeDispT<T>::get_color(void)
{
  long val;
  this->get_color((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::set_color(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("color"), DISPID(1610743812));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::get_opacity(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("opacity"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCMarqueeDispT<T>::get_opacity(void)
{
  long val;
  this->get_opacity((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::set_opacity(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("opacity"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::get_position(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("position"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMarqueeDispT<T>::get_position(void)
{
  BSTR val;
  this->get_position((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::set_position(BSTR val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("position"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::get_refresh(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("refresh"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCMarqueeDispT<T>::get_refresh(void)
{
  long val;
  this->get_refresh((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::set_refresh(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("refresh"), DISPID(1610743818));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::get_size(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("size"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCMarqueeDispT<T>::get_size(void)
{
  long val;
  this->get_size((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::set_size(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("size"), DISPID(1610743820));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::get_timeout(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("timeout"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCMarqueeDispT<T>::get_timeout(void)
{
  long val;
  this->get_timeout((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::set_timeout(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("timeout"), DISPID(1610743822));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::get_x(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("x"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCMarqueeDispT<T>::get_x(void)
{
  long val;
  this->get_x((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::set_x(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("x"), DISPID(1610743824));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::get_y(long* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("y"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCMarqueeDispT<T>::get_y(void)
{
  long val;
  this->get_y((long*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMarqueeDispT<T>::set_y(long val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("y"), DISPID(1610743826));
  TAutoArgs<1> _args;
  _args[1] = val /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IVLCPlaylist
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {54613049-40BF-4035-9E70-0A9312C0188D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::get_itemCount(long* count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("itemCount"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCPlaylistDispT<T>::get_itemCount(void)
{
  long count;
  this->get_itemCount((long*)&count);
  return count;
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::get_isPlaying(VARIANT_BOOL* playing/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("isPlaying"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(playing /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVLCPlaylistDispT<T>::get_isPlaying(void)
{
  VARIANT_BOOL playing;
  this->get_isPlaying((VARIANT_BOOL*)&playing);
  return playing;
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::get_currentItem(long* index/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("currentItem"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(index /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCPlaylistDispT<T>::get_currentItem(void)
{
  long index;
  this->get_currentItem((long*)&index);
  return index;
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::add(BSTR uri/*[in]*/, VARIANT name/*[in,opt]*/, VARIANT options/*[in,opt]*/, 
                          long* itemId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("add"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<3> _args;
  _args[1] = uri /*[VT_BSTR:0]*/;
  _args[2] = name /*[VT_VARIANT:0]*/;
  _args[3] = options /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(itemId /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IVLCPlaylistDispT<T>::add(BSTR uri/*[in]*/, VARIANT name/*[in,opt]*/, VARIANT options/*[in,opt]*/)
{
  long itemId;
  this->add(uri, name, options, (long*)&itemId);
  return itemId;
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::play()
{
  _TDispID _dispid(*this, OLETEXT("play"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::playItem(long itemId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("playItem"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = itemId /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::pause()
{
  _TDispID _dispid(*this, OLETEXT("pause"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::togglePause()
{
  _TDispID _dispid(*this, OLETEXT("togglePause"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::stop()
{
  _TDispID _dispid(*this, OLETEXT("stop"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::next()
{
  _TDispID _dispid(*this, OLETEXT("next"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::prev()
{
  _TDispID _dispid(*this, OLETEXT("prev"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::clear()
{
  _TDispID _dispid(*this, OLETEXT("clear"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::removeItem(long item/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeItem"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<1> _args;
  _args[1] = item /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCPlaylistDispT<T>::get_items(Axvlc_tlb::IVLCPlaylistItems** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("items"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCPlaylistItems**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCPlaylistItemsPtr __fastcall
IVLCPlaylistDispT<T>::get_items(void)
{
  Axvlc_tlb::IVLCPlaylistItemsPtr obj;
  this->get_items(&obj);
  return obj;
}

// *********************************************************************//
// DispIntf:  IVLCPlaylistItems
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FD37FE32-82BC-4A25-B056-315F4DBB194D}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCPlaylistItemsDispT<T>::get_count(long* count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("count"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCPlaylistItemsDispT<T>::get_count(void)
{
  long count;
  this->get_count((long*)&count);
  return count;
}

template <class T> HRESULT __fastcall
IVLCPlaylistItemsDispT<T>::clear()
{
  _TDispID _dispid(*this, OLETEXT("clear"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCPlaylistItemsDispT<T>::remove(long itemId/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("remove"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<1> _args;
  _args[1] = itemId /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IVLCSubtitle
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {465E787A-0556-452F-9477-954E4A940003}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCSubtitleDispT<T>::get_track(long* spu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("track"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(spu /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCSubtitleDispT<T>::get_track(void)
{
  long spu;
  this->get_track((long*)&spu);
  return spu;
}

template <class T> HRESULT __fastcall
IVLCSubtitleDispT<T>::set_track(long spu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("track"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = spu /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCSubtitleDispT<T>::get_count(long* spuNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("count"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(spuNumber /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCSubtitleDispT<T>::get_count(void)
{
  long spuNumber;
  this->get_count((long*)&spuNumber);
  return spuNumber;
}

template <class T> HRESULT __fastcall
IVLCSubtitleDispT<T>::description(long nameID/*[in]*/, BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("description"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<1> _args;
  _args[1] = nameID /*[VT_I4:0]*/;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCSubtitleDispT<T>::description(long nameID/*[in]*/)
{
  BSTR name;
  this->description(nameID, (BSTR*)&name);
  return name;
}

// *********************************************************************//
// DispIntf:  IVLCVideo
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0AAEDF0B-D333-4B27-A0C6-BBF31413A42E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::get_fullscreen(VARIANT_BOOL* fullscreen/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullscreen"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fullscreen /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVLCVideoDispT<T>::get_fullscreen(void)
{
  VARIANT_BOOL fullscreen;
  this->get_fullscreen((VARIANT_BOOL*)&fullscreen);
  return fullscreen;
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::set_fullscreen(VARIANT_BOOL fullscreen/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("fullscreen"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = fullscreen /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::get_width(long* width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("width"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(width /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCVideoDispT<T>::get_width(void)
{
  long width;
  this->get_width((long*)&width);
  return width;
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::get_height(long* height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("height"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(height /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCVideoDispT<T>::get_height(void)
{
  long height;
  this->get_height((long*)&height);
  return height;
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::get_aspectRatio(BSTR* aspect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("aspectRatio"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(aspect /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCVideoDispT<T>::get_aspectRatio(void)
{
  BSTR aspect;
  this->get_aspectRatio((BSTR*)&aspect);
  return aspect;
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::set_aspectRatio(BSTR aspect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("aspectRatio"), DISPID(1610743812));
  TAutoArgs<1> _args;
  _args[1] = aspect /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::get_subtitle(long* spu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("subtitle"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(spu /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCVideoDispT<T>::get_subtitle(void)
{
  long spu;
  this->get_subtitle((long*)&spu);
  return spu;
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::set_subtitle(long spu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("subtitle"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = spu /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::get_crop(BSTR* geometry/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("crop"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(geometry /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCVideoDispT<T>::get_crop(void)
{
  BSTR geometry;
  this->get_crop((BSTR*)&geometry);
  return geometry;
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::set_crop(BSTR geometry/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("crop"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = geometry /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::get_teletext(long* page/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("teletext"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(page /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCVideoDispT<T>::get_teletext(void)
{
  long page;
  this->get_teletext((long*)&page);
  return page;
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::set_teletext(long page/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("teletext"), DISPID(1610743818));
  TAutoArgs<1> _args;
  _args[1] = page /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::toggleFullscreen()
{
  _TDispID _dispid(*this, OLETEXT("toggleFullscreen"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::takeSnapshot(Axvlc_tlb::IPictureDisp** picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("takeSnapshot"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IPictureDisp**)picture /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Axvlc_tlb::IPictureDisp* __fastcall
IVLCVideoDispT<T>::takeSnapshot(void)
{
  Axvlc_tlb::IPictureDisp* picture;
  this->takeSnapshot((Axvlc_tlb::IPictureDisp**)&picture);
  return picture;
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::toggleTeletext()
{
  _TDispID _dispid(*this, OLETEXT("toggleTeletext"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::get_marquee(Axvlc_tlb::IVLCMarquee** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("marquee"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCMarquee**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCMarqueePtr __fastcall
IVLCVideoDispT<T>::get_marquee(void)
{
  Axvlc_tlb::IVLCMarqueePtr obj;
  this->get_marquee(&obj);
  return obj;
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::get_logo(Axvlc_tlb::IVLCLogo** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("logo"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCLogo**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCLogoPtr __fastcall
IVLCVideoDispT<T>::get_logo(void)
{
  Axvlc_tlb::IVLCLogoPtr obj;
  this->get_logo(&obj);
  return obj;
}

template <class T> HRESULT __fastcall
IVLCVideoDispT<T>::get_deinterlace(Axvlc_tlb::IVLCDeinterlace** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("deinterlace"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCDeinterlace**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCDeinterlacePtr __fastcall
IVLCVideoDispT<T>::get_deinterlace(void)
{
  Axvlc_tlb::IVLCDeinterlacePtr obj;
  this->get_deinterlace(&obj);
  return obj;
}

// *********************************************************************//
// SmartIntf: TCOMIVLCControl2
// Interface: IVLCControl2
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_AutoLoop(VARIANT_BOOL* AutoLoop/*[out,retval]*/)
{
  return (*this)->get_AutoLoop(AutoLoop);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVLCControl2T<T>::get_AutoLoop(void)
{
  VARIANT_BOOL AutoLoop;
  OLECHECK(this->get_AutoLoop((VARIANT_BOOL*)&AutoLoop));
  return AutoLoop;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::set_AutoLoop(VARIANT_BOOL AutoLoop/*[in]*/)
{
  return (*this)->set_AutoLoop(AutoLoop);
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_AutoPlay(VARIANT_BOOL* AutoPlay/*[out,retval]*/)
{
  return (*this)->get_AutoPlay(AutoPlay);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVLCControl2T<T>::get_AutoPlay(void)
{
  VARIANT_BOOL AutoPlay;
  OLECHECK(this->get_AutoPlay((VARIANT_BOOL*)&AutoPlay));
  return AutoPlay;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::set_AutoPlay(VARIANT_BOOL AutoPlay/*[in]*/)
{
  return (*this)->set_AutoPlay(AutoPlay);
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_BaseURL(BSTR* url/*[out,retval]*/)
{
  return (*this)->get_BaseURL(url);
}

template <class T> BSTR __fastcall
TCOMIVLCControl2T<T>::get_BaseURL(void)
{
  BSTR url = 0;
  OLECHECK(this->get_BaseURL((BSTR*)&url));
  return url;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::set_BaseURL(BSTR url/*[in]*/)
{
  return (*this)->set_BaseURL(url);
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_StartTime(long* seconds/*[out,retval]*/)
{
  return (*this)->get_StartTime(seconds);
}

template <class T> long __fastcall
TCOMIVLCControl2T<T>::get_StartTime(void)
{
  long seconds;
  OLECHECK(this->get_StartTime((long*)&seconds));
  return seconds;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::set_StartTime(long seconds/*[in]*/)
{
  return (*this)->set_StartTime(seconds);
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_MRL(BSTR* MRL/*[out,retval]*/)
{
  return (*this)->get_MRL(MRL);
}

template <class T> BSTR __fastcall
TCOMIVLCControl2T<T>::get_MRL(void)
{
  BSTR MRL = 0;
  OLECHECK(this->get_MRL((BSTR*)&MRL));
  return MRL;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::set_MRL(BSTR MRL/*[in]*/)
{
  return (*this)->set_MRL(MRL);
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_VersionInfo(BSTR* version/*[out,retval]*/)
{
  return (*this)->get_VersionInfo(version);
}

template <class T> BSTR __fastcall
TCOMIVLCControl2T<T>::get_VersionInfo(void)
{
  BSTR version = 0;
  OLECHECK(this->get_VersionInfo((BSTR*)&version));
  return version;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::getVersionInfo(BSTR* version/*[out,retval]*/)
{
  return (*this)->getVersionInfo(version);
}

template <class T> BSTR __fastcall
TCOMIVLCControl2T<T>::getVersionInfo(void)
{
  BSTR version = 0;
  OLECHECK(this->getVersionInfo((BSTR*)&version));
  return version;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  return (*this)->get_Visible(Visible);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVLCControl2T<T>::get_Visible(void)
{
  VARIANT_BOOL Visible;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&Visible));
  return Visible;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::set_Visible(VARIANT_BOOL Visible/*[in]*/)
{
  return (*this)->set_Visible(Visible);
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_volume(long* volume/*[out,retval]*/)
{
  return (*this)->get_volume(volume);
}

template <class T> long __fastcall
TCOMIVLCControl2T<T>::get_volume(void)
{
  long volume;
  OLECHECK(this->get_volume((long*)&volume));
  return volume;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::set_volume(long volume/*[in]*/)
{
  return (*this)->set_volume(volume);
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_BackColor(unsigned_long* BackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(BackColor);
}

template <class T> unsigned_long __fastcall
TCOMIVLCControl2T<T>::get_BackColor(void)
{
  unsigned_long BackColor;
  OLECHECK(this->get_BackColor((unsigned_long*)&BackColor));
  return BackColor;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::set_BackColor(unsigned_long BackColor/*[in]*/)
{
  return (*this)->set_BackColor(BackColor);
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_Toolbar(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  return (*this)->get_Toolbar(Visible);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVLCControl2T<T>::get_Toolbar(void)
{
  VARIANT_BOOL Visible;
  OLECHECK(this->get_Toolbar((VARIANT_BOOL*)&Visible));
  return Visible;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::set_Toolbar(VARIANT_BOOL Visible/*[in]*/)
{
  return (*this)->set_Toolbar(Visible);
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_audio(Axvlc_tlb::IVLCAudio** obj/*[out,retval]*/)
{
  return (*this)->get_audio(obj);
}

template <class T> Axvlc_tlb::IVLCAudioPtr __fastcall
TCOMIVLCControl2T<T>::get_audio(void)
{
  Axvlc_tlb::IVLCAudioPtr obj;
  OLECHECK(this->get_audio((Axvlc_tlb::IVLCAudioPtr*)&obj));
  return obj;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_input(Axvlc_tlb::IVLCInput** obj/*[out,retval]*/)
{
  return (*this)->get_input(obj);
}

template <class T> Axvlc_tlb::IVLCInputPtr __fastcall
TCOMIVLCControl2T<T>::get_input(void)
{
  Axvlc_tlb::IVLCInputPtr obj;
  OLECHECK(this->get_input((Axvlc_tlb::IVLCInputPtr*)&obj));
  return obj;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_playlist(Axvlc_tlb::IVLCPlaylist** obj/*[out,retval]*/)
{
  return (*this)->get_playlist(obj);
}

template <class T> Axvlc_tlb::IVLCPlaylistPtr __fastcall
TCOMIVLCControl2T<T>::get_playlist(void)
{
  Axvlc_tlb::IVLCPlaylistPtr obj;
  OLECHECK(this->get_playlist((Axvlc_tlb::IVLCPlaylistPtr*)&obj));
  return obj;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_subtitle(Axvlc_tlb::IVLCSubtitle** obj/*[out,retval]*/)
{
  return (*this)->get_subtitle(obj);
}

template <class T> Axvlc_tlb::IVLCSubtitlePtr __fastcall
TCOMIVLCControl2T<T>::get_subtitle(void)
{
  Axvlc_tlb::IVLCSubtitlePtr obj;
  OLECHECK(this->get_subtitle((Axvlc_tlb::IVLCSubtitlePtr*)&obj));
  return obj;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_video(Axvlc_tlb::IVLCVideo** obj/*[out,retval]*/)
{
  return (*this)->get_video(obj);
}

template <class T> Axvlc_tlb::IVLCVideoPtr __fastcall
TCOMIVLCControl2T<T>::get_video(void)
{
  Axvlc_tlb::IVLCVideoPtr obj;
  OLECHECK(this->get_video((Axvlc_tlb::IVLCVideoPtr*)&obj));
  return obj;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_FullscreenEnabled(VARIANT_BOOL* enabled/*[out,retval]*/)
{
  return (*this)->get_FullscreenEnabled(enabled);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVLCControl2T<T>::get_FullscreenEnabled(void)
{
  VARIANT_BOOL enabled;
  OLECHECK(this->get_FullscreenEnabled((VARIANT_BOOL*)&enabled));
  return enabled;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::set_FullscreenEnabled(VARIANT_BOOL enabled/*[in]*/)
{
  return (*this)->set_FullscreenEnabled(enabled);
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_mediaDescription(Axvlc_tlb::IVLCMediaDescription** obj/*[out,retval]*/)
{
  return (*this)->get_mediaDescription(obj);
}

template <class T> Axvlc_tlb::IVLCMediaDescriptionPtr __fastcall
TCOMIVLCControl2T<T>::get_mediaDescription(void)
{
  Axvlc_tlb::IVLCMediaDescriptionPtr obj;
  OLECHECK(this->get_mediaDescription((Axvlc_tlb::IVLCMediaDescriptionPtr*)&obj));
  return obj;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::get_Branding(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  return (*this)->get_Branding(Visible);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVLCControl2T<T>::get_Branding(void)
{
  VARIANT_BOOL Visible;
  OLECHECK(this->get_Branding((VARIANT_BOOL*)&Visible));
  return Visible;
}

template <class T> HRESULT __fastcall
TCOMIVLCControl2T<T>::set_Branding(VARIANT_BOOL Visible/*[in]*/)
{
  return (*this)->set_Branding(Visible);
}

// *********************************************************************//
// DispIntf:  IVLCControl2
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2D719729-5333-406C-BF12-8DE787FD65E3}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_AutoLoop(VARIANT_BOOL* AutoLoop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLoop"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoLoop /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVLCControl2DispT<T>::get_AutoLoop(void)
{
  VARIANT_BOOL AutoLoop;
  this->get_AutoLoop((VARIANT_BOOL*)&AutoLoop);
  return AutoLoop;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::set_AutoLoop(VARIANT_BOOL AutoLoop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLoop"), DISPID(1610743808));
  TAutoArgs<1> _args;
  _args[1] = AutoLoop /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_AutoPlay(VARIANT_BOOL* AutoPlay/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoPlay"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(AutoPlay /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVLCControl2DispT<T>::get_AutoPlay(void)
{
  VARIANT_BOOL AutoPlay;
  this->get_AutoPlay((VARIANT_BOOL*)&AutoPlay);
  return AutoPlay;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::set_AutoPlay(VARIANT_BOOL AutoPlay/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoPlay"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = AutoPlay /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_BaseURL(BSTR* url/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseURL"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(url /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCControl2DispT<T>::get_BaseURL(void)
{
  BSTR url;
  this->get_BaseURL((BSTR*)&url);
  return url;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::set_BaseURL(BSTR url/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BaseURL"), DISPID(1610743812));
  TAutoArgs<1> _args;
  _args[1] = url /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_StartTime(long* seconds/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartTime"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(seconds /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCControl2DispT<T>::get_StartTime(void)
{
  long seconds;
  this->get_StartTime((long*)&seconds);
  return seconds;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::set_StartTime(long seconds/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartTime"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = seconds /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_MRL(BSTR* MRL/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MRL"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MRL /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCControl2DispT<T>::get_MRL(void)
{
  BSTR MRL;
  this->get_MRL((BSTR*)&MRL);
  return MRL;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::set_MRL(BSTR MRL/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MRL"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = MRL /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_VersionInfo(BSTR* version/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VersionInfo"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(version /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCControl2DispT<T>::get_VersionInfo(void)
{
  BSTR version;
  this->get_VersionInfo((BSTR*)&version);
  return version;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::getVersionInfo(BSTR* version/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getVersionInfo"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(version /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCControl2DispT<T>::getVersionInfo(void)
{
  BSTR version;
  this->getVersionInfo((BSTR*)&version);
  return version;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_Visible(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Visible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVLCControl2DispT<T>::get_Visible(void)
{
  VARIANT_BOOL Visible;
  this->get_Visible((VARIANT_BOOL*)&Visible);
  return Visible;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::set_Visible(VARIANT_BOOL Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610743820));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_volume(long* volume/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("volume"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(volume /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVLCControl2DispT<T>::get_volume(void)
{
  long volume;
  this->get_volume((long*)&volume);
  return volume;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::set_volume(long volume/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("volume"), DISPID(1610743822));
  TAutoArgs<1> _args;
  _args[1] = volume /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_BackColor(unsigned_long* BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BackColor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_long __fastcall
IVLCControl2DispT<T>::get_BackColor(void)
{
  unsigned_long BackColor;
  this->get_BackColor((unsigned_long*)&BackColor);
  return BackColor;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::set_BackColor(unsigned_long BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(1610743824));
  TAutoArgs<1> _args;
  _args[1] = BackColor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_Toolbar(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Toolbar"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Visible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVLCControl2DispT<T>::get_Toolbar(void)
{
  VARIANT_BOOL Visible;
  this->get_Toolbar((VARIANT_BOOL*)&Visible);
  return Visible;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::set_Toolbar(VARIANT_BOOL Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Toolbar"), DISPID(1610743826));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_audio(Axvlc_tlb::IVLCAudio** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("audio"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCAudio**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCAudioPtr __fastcall
IVLCControl2DispT<T>::get_audio(void)
{
  Axvlc_tlb::IVLCAudioPtr obj;
  this->get_audio(&obj);
  return obj;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_input(Axvlc_tlb::IVLCInput** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("input"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCInput**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCInputPtr __fastcall
IVLCControl2DispT<T>::get_input(void)
{
  Axvlc_tlb::IVLCInputPtr obj;
  this->get_input(&obj);
  return obj;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_playlist(Axvlc_tlb::IVLCPlaylist** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("playlist"), DISPID(DISPID_UNKNOWN/*[1610743830]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCPlaylist**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCPlaylistPtr __fastcall
IVLCControl2DispT<T>::get_playlist(void)
{
  Axvlc_tlb::IVLCPlaylistPtr obj;
  this->get_playlist(&obj);
  return obj;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_subtitle(Axvlc_tlb::IVLCSubtitle** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("subtitle"), DISPID(DISPID_UNKNOWN/*[1610743831]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCSubtitle**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCSubtitlePtr __fastcall
IVLCControl2DispT<T>::get_subtitle(void)
{
  Axvlc_tlb::IVLCSubtitlePtr obj;
  this->get_subtitle(&obj);
  return obj;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_video(Axvlc_tlb::IVLCVideo** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("video"), DISPID(DISPID_UNKNOWN/*[1610743832]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCVideo**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCVideoPtr __fastcall
IVLCControl2DispT<T>::get_video(void)
{
  Axvlc_tlb::IVLCVideoPtr obj;
  this->get_video(&obj);
  return obj;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_FullscreenEnabled(VARIANT_BOOL* enabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullscreenEnabled"), DISPID(DISPID_UNKNOWN/*[1610743833]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(enabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVLCControl2DispT<T>::get_FullscreenEnabled(void)
{
  VARIANT_BOOL enabled;
  this->get_FullscreenEnabled((VARIANT_BOOL*)&enabled);
  return enabled;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::set_FullscreenEnabled(VARIANT_BOOL enabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullscreenEnabled"), DISPID(1610743833));
  TAutoArgs<1> _args;
  _args[1] = enabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_mediaDescription(Axvlc_tlb::IVLCMediaDescription** obj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mediaDescription"), DISPID(DISPID_UNKNOWN/*[1610743835]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Axvlc_tlb::IVLCMediaDescription**)obj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Axvlc_tlb::IVLCMediaDescriptionPtr __fastcall
IVLCControl2DispT<T>::get_mediaDescription(void)
{
  Axvlc_tlb::IVLCMediaDescriptionPtr obj;
  this->get_mediaDescription(&obj);
  return obj;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::get_Branding(VARIANT_BOOL* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Branding"), DISPID(DISPID_UNKNOWN/*[1610743836]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Visible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVLCControl2DispT<T>::get_Branding(void)
{
  VARIANT_BOOL Visible;
  this->get_Branding((VARIANT_BOOL*)&Visible);
  return Visible;
}

template <class T> HRESULT __fastcall
IVLCControl2DispT<T>::set_Branding(VARIANT_BOOL Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Branding"), DISPID(1610743836));
  TAutoArgs<1> _args;
  _args[1] = Visible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IVLCMediaDescription
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {796A2C2D-5B11-4FB5-9077-56D5E674972B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_title(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("title"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_title(void)
{
  BSTR val;
  this->get_title((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_artist(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("artist"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_artist(void)
{
  BSTR val;
  this->get_artist((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_genre(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("genre"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_genre(void)
{
  BSTR val;
  this->get_genre((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_copyright(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("copyright"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_copyright(void)
{
  BSTR val;
  this->get_copyright((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_album(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("album"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_album(void)
{
  BSTR val;
  this->get_album((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_trackNumber(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("trackNumber"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_trackNumber(void)
{
  BSTR val;
  this->get_trackNumber((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_description(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("description"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_description(void)
{
  BSTR val;
  this->get_description((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_rating(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("rating"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_rating(void)
{
  BSTR val;
  this->get_rating((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_date(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("date"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_date(void)
{
  BSTR val;
  this->get_date((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_setting(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("setting"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_setting(void)
{
  BSTR val;
  this->get_setting((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_url(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("url"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_url(void)
{
  BSTR val;
  this->get_url((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_language(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("language"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_language(void)
{
  BSTR val;
  this->get_language((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_nowPlaying(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nowPlaying"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_nowPlaying(void)
{
  BSTR val;
  this->get_nowPlaying((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_publisher(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("publisher"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_publisher(void)
{
  BSTR val;
  this->get_publisher((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_encodedBy(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("encodedBy"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_encodedBy(void)
{
  BSTR val;
  this->get_encodedBy((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_artworkURL(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("artworkURL"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_artworkURL(void)
{
  BSTR val;
  this->get_artworkURL((BSTR*)&val);
  return val;
}

template <class T> HRESULT __fastcall
IVLCMediaDescriptionDispT<T>::get_trackID(BSTR* val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("trackID"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(val /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVLCMediaDescriptionDispT<T>::get_trackID(void)
{
  BSTR val;
  this->get_trackID((BSTR*)&val);
  return val;
}

// *********************************************************************//
// DispIntf:  DVLCEvents
// Flags:     (4096) Dispatchable
// GUID:      {DF48072F-5EF8-434E-9B40-E2F3AE759B5F}
// *********************************************************************//
template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerNothingSpecial()
{
  _TDispID _dispid(/* MediaPlayerNothingSpecial */ DISPID(200));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerOpening()
{
  _TDispID _dispid(/* MediaPlayerOpening */ DISPID(201));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerBuffering(long cache/*[in]*/)
{
  _TDispID _dispid(/* MediaPlayerBuffering */ DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = cache /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerPlaying()
{
  _TDispID _dispid(/* MediaPlayerPlaying */ DISPID(203));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerPaused()
{
  _TDispID _dispid(/* MediaPlayerPaused */ DISPID(204));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerForward()
{
  _TDispID _dispid(/* MediaPlayerForward */ DISPID(205));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerBackward()
{
  _TDispID _dispid(/* MediaPlayerBackward */ DISPID(206));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerEncounteredError()
{
  _TDispID _dispid(/* MediaPlayerEncounteredError */ DISPID(207));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerEndReached()
{
  _TDispID _dispid(/* MediaPlayerEndReached */ DISPID(208));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerStopped()
{
  _TDispID _dispid(/* MediaPlayerStopped */ DISPID(209));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerTimeChanged(long time/*[in]*/)
{
  _TDispID _dispid(/* MediaPlayerTimeChanged */ DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = time /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerPositionChanged(float position/*[in]*/)
{
  _TDispID _dispid(/* MediaPlayerPositionChanged */ DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = position /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerSeekableChanged(VARIANT_BOOL seekable/*[in]*/)
{
  _TDispID _dispid(/* MediaPlayerSeekableChanged */ DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = seekable /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerPausableChanged(VARIANT_BOOL pausable/*[in]*/)
{
  _TDispID _dispid(/* MediaPlayerPausableChanged */ DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = pausable /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerMediaChanged()
{
  _TDispID _dispid(/* MediaPlayerMediaChanged */ DISPID(214));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerTitleChanged(int title/*[in]*/)
{
  _TDispID _dispid(/* MediaPlayerTitleChanged */ DISPID(215));
  TAutoArgs<1> _args;
  _args[1] = title /*[VT_INT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
DVLCEventsDispT<T>::MediaPlayerLengthChanged(long length/*[in]*/)
{
  _TDispID _dispid(/* MediaPlayerLengthChanged */ DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = length /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : VLCPlugin2
// Event Interface : DVLCEvents
// *********************************************************************//
template <class T>
class TEvents_VLCPlugin2 : public IConnectionPointImpl<T,
                                                 &DIID_DVLCEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_MediaPlayerNothingSpecial(void);
  void            Fire_MediaPlayerOpening(void);
  void            Fire_MediaPlayerBuffering(long cache);
  void            Fire_MediaPlayerPlaying(void);
  void            Fire_MediaPlayerPaused(void);
  void            Fire_MediaPlayerForward(void);
  void            Fire_MediaPlayerBackward(void);
  void            Fire_MediaPlayerEncounteredError(void);
  void            Fire_MediaPlayerEndReached(void);
  void            Fire_MediaPlayerStopped(void);
  void            Fire_MediaPlayerTimeChanged(long time);
  void            Fire_MediaPlayerPositionChanged(float position);
  void            Fire_MediaPlayerSeekableChanged(VARIANT_BOOL seekable);
  void            Fire_MediaPlayerPausableChanged(VARIANT_BOOL pausable);
  void            Fire_MediaPlayerMediaChanged(void);
  void            Fire_MediaPlayerTitleChanged(int title);
  void            Fire_MediaPlayerLengthChanged(long length);
protected:
  DVLCEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerNothingSpecial(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerNothingSpecial();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerOpening(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerOpening();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerBuffering(long cache)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerBuffering(cache);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerPlaying(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerPlaying();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerPaused(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerPaused();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerForward(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerForward();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerBackward(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerBackward();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerEncounteredError(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerEncounteredError();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerEndReached(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerEndReached();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerStopped(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerStopped();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerTimeChanged(long time)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerTimeChanged(time);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerPositionChanged(float position)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerPositionChanged(position);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerSeekableChanged(VARIANT_BOOL seekable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerSeekableChanged(seekable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerPausableChanged(VARIANT_BOOL pausable)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerPausableChanged(pausable);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerMediaChanged(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerMediaChanged();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerTitleChanged(int title)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerTitleChanged(title);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_VLCPlugin2<T>::Fire_MediaPlayerLengthChanged(long length)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MediaPlayerLengthChanged(length);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif    //   __TLB_NO_EVENT_WRAPPERS

#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_DAX)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : VLCPlugin2
// Event Interface : DVLCEvents
// *********************************************************************//
template <typename T>
class IVLCPlugin2_EventsDispatcher : public IUnknown
{
public:
  void Fire_MediaPlayerNothingSpecial(void)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerNothingSpecial();
  }

  void Fire_MediaPlayerOpening(void)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerOpening();
  }

  void Fire_MediaPlayerBuffering(long cache)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerBuffering(cache);
  }

  void Fire_MediaPlayerPlaying(void)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerPlaying();
  }

  void Fire_MediaPlayerPaused(void)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerPaused();
  }

  void Fire_MediaPlayerForward(void)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerForward();
  }

  void Fire_MediaPlayerBackward(void)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerBackward();
  }

  void Fire_MediaPlayerEncounteredError(void)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerEncounteredError();
  }

  void Fire_MediaPlayerEndReached(void)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerEndReached();
  }

  void Fire_MediaPlayerStopped(void)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerStopped();
  }

  void Fire_MediaPlayerTimeChanged(long time)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerTimeChanged(time);
  }

  void Fire_MediaPlayerPositionChanged(float position)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerPositionChanged(position);
  }

  void Fire_MediaPlayerSeekableChanged(VARIANT_BOOL seekable)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerSeekableChanged(seekable);
  }

  void Fire_MediaPlayerPausableChanged(VARIANT_BOOL pausable)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerPausableChanged(pausable);
  }

  void Fire_MediaPlayerMediaChanged(void)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerMediaChanged();
  }

  void Fire_MediaPlayerTitleChanged(int title)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerTitleChanged(title);
  }

  void Fire_MediaPlayerLengthChanged(long length)
  {
    DVLCEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.MediaPlayerLengthChanged(length);
  }

};

#endif    //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Axvlc_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Axvlc_tlb;
#endif

#pragma option pop

#endif // AXVLC_TLBH
